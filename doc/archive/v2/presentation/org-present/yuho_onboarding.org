#+TITLE: Learn how Yuho works in 5 minutes
#+AUTHOR: Gabriel Ong
#+DATE: 2024-08-21

* Introduction
  Yuho was born from the following beliefs.

  1. Legalese is hard to understand
  2. Textual explanations are good
  3. Diagrammatic explanations are excellent

  [[file:./asset/monkey.jpg]]

* An example
  Statutes aren't always intuitive.

  Below is Section 415 of the [[https://sso.agc.gov.sg/Act/PC1871][Penal Code 1871]] on the offense of Cheating in plaintext.

  #+BEGIN_QUOTE
  "Whoever, by deceiving any person, whether or not such deception was the sole or main inducement, fraudulently or dishonestly induces the person so deceived to deliver or cause the delivery of any property to any person, or to consent that any person shall retain any property, or intentionally induces the person so deceived to do or omit to do anything which he would not do or omit to do if he were not so deceived, and which act or omission causes or is likely to cause damage or harm to any person in body, mind, reputation or property, is said to cheat."
  #+END_QUOTE

  Say we attempt to break the statute into its composite elements and include indentation to represent the logical relationship between those elements. You could end up with something like this.

  #+BEGIN_QUOTE
  "Whoever, by deceiving any person,
  WHETHER OR NOT such deception was the sole or main inducement,
      fraudulently OR dishonestly induces the person so deceived
          to deliver any property to any person,
          OR to consent that any person shall retain any property,
      OR intentionally induces the person so deceived
          to do
          OR omit to do anything which he would not do
          OR omit if he were not so deceived
      AND which act or omission
          causes
          OR is likely to cause
              damage
              OR harm
          to that person in body, mind, reputation, or property,
  is said to cheat."
  #+END_QUOTE

  Still, the conditional relationship each element shares with the overall offense is not explicit.

  This is where Yuho comes in.

  Once someone has learnt the basics of Yuho's terse syntax, they will be able to structure that same statute in Yuho as below.

  #+BEGIN_SRC yh
  scope s415CheatingDefinition {

      struct Party {
          Accused,
          Victim,
      }

      struct AttributionType {
          SoleInducment,
          NotSoleInducement,
          NA,
      }

      struct DeceptionType {
          Fraudulently,
          Dishonestly,
          NA,
      }

      struct InducementType {
          DeliverProperty,
          ConsentRetainProperty,
          DoOrOmit,
          NA,
      }

      struct DamageHarmType {
          Body,
          Mind,
          Reputation,
          Property,
          NA,
      }

      struct ConsequenceDefinition {
          SaidToCheat,
          NotSaidToCheat,
      }

      struct Cheating {
          string || Party accused,
          string action,
          string || Party victim,
          AttributionType attribution,
          DeceptionType deception,
          InducementType inducement,
          boolean causesDamageHarm,
          {DamageHarmType} || DamageHarmType damageHarmResult,
          ConsequenceDefinition definition,
      }

      Cheating cheatingDefinition := {

          accused := Party.Accused,
          action := "deceiving",
          victim := Party.Victim,
          attribution := AttributionType.SoleInducment or AttributionType.NotSoleInducement or AttributionType.NA,
          deception := DeceptionType.Fraudulently or DeceptionType.Dishonestly or DeceptionType.NA,
          inducement := InducementType.DeliverProperty or InducementType.ConsentRetainProperty or InducementType.DoOrOmit or InducementType.NA,
          causesDamageHarm := TRUE or FALSE,
          damageHarmResult := {
              DamageHarmType.Body,
              DamageHarmType.Mind,
              DamageHarmType.Reputation,
              DamageHarmType.Property,
          } or DamageHarmType.NA,

          definition := match attribution {
              case AttributionType.SoleInducment := deception
              case AttributionType.NotSoleInducement := deception
              case AttributionType.NA := consequence ConsequenceDefinition.NotSaidToCheat
          },
          definition := match deception {
              case DeceptionType.Fraudulently := consequence inducement
              case DeceptionType.Dishonestly := consequence inducement
              case DeceptionType.NA := consequence ConsequenceDefinition.NotSaidToCheat
          },
          definition := match inducement {
              case InducementType.DeliverProperty := consequence causesDamageHarm
              case InducementType.ConsentRetainProperty := consequence causesDamageHarm
              case InducementType.DoOrOmit := consequence causesDamageHarm
              case InducementType.NA := consequence ConsequenceDefinition.NotSaidToCheat
          },
          definition := match causesDamageHarm {
              case TRUE := consequence damageHarmResult
              case FALSE := consequence ConsequenceDefinition.NotSaidToCheat
          },
          definition := match {
              case DamageHarmType.NA in damageHarmResult := consequence ConsequenceDefinition.NotSaidToCheat
              case _ :=  consequence ConsequenceDefinition.SaidToCheat
          },

      }

  }
  #+END_SRC

  This Yuho code can then be [[./../../src/main/][transpiled]] to various diagrammatic representations in [[https://mermaid.js.org/][Mermaid]].

  Right now two primary Mermaid outputs are supported.

  1. Mindmap
     - displays key elements of a statute at a glance
     - generated by parsing a struct instance

     #+BEGIN_SRC mermaid
     mindmap
         Cheating
           Accused: Party.Accused
           Action: Deceiving
           Victim: Party.Victim
           Attribution
             AttributionType.SoleInducment
             AttributionType.NotSoleInducement
             AttributionType.NA
           Deception
             DeceptionType.Fraudulently
             DeceptionType.Dishonestly
             DeceptionType.NA
           Inducement
             InducementType.DeliverProperty
             InducementType.ConsentRetainProperty
             InducementType.DoOrOmit
             InducementType.NA
           Causes Damage/Harm
             TRUE
             FALSE
           Damage/Harm Result
             DamageHarmType.Body
             DamageHarmType.Mind
             DamageHarmType.Reputation
             DamageHarmType.Property
             DamageHarmType.NA
           Definition
             ConsequenceDefinition.SaidToCheat
             ConsequenceDefinition.NotSaidToCheat
     #+END_SRC

  2. Flowchart
     - splays out a statute's event logic
     - generated by parsing a struct instance

     #+BEGIN_SRC mermaid
     flowchart TD
         A[Cheating] --> B[Accused := Party.Accused]
         B --> C[Action := Deceiving]
         C --> D[Victim := Party.Victim]
         D --> E[Attribution]
         E --> |AttributionType.SoleInducement| F[Deception]
         E --> |AttributionType.NotSoleInducement| F
         E --> |AttributionType.NA| Z
         F --> |DeceptionType.Fraudulently| G[Inducement]
         F --> |DeceptionType.Dishonestly| G
         F --> |DeceptionType.NA| Z
         G --> |InducementType.DeliverProperty| H[CausesDamageHarm]
         G --> |InducementType.ConsentRetainProperty| H
         G --> |InducementType.DoOrOmit| H
         G --> |InducementType.NA| Z
         H --> |TRUE| I[DamageHarmResult]
         H --> |FALSE| Z[ConsequenceDefinition.NotSaidToCheat]
         I --> |DamageHarmType.Body| Y[ConsequenceDefinition.SaidToCheat]
         I --> |DamageHarmType.Mind| Y
         I --> |DamageHarmType.Reputation| Y
         I --> |DamageHarmType.Property| Y
         I --> |DamageHarmType.NA| Z
     #+END_SRC

* Further Visualization
  Moreover, we are able to visualize how a specific scenario plays out diagrammatically when holding its Yuho statute literal against a Yuho statute definition as specified earlier.

  Below is a Yuho statute literal of [[https://sso.agc.gov.sg/Act/PC1871?ProvIds=P417-#pr415-][Illustration A]] from Section 415 of the Penal Code 1871.

  #+BEGIN_SRC yh
  referencing Cheating from s415_cheating_definition

  s415_cheating_definition.Cheating cheatingIllustrationA := {

      accused := "A",
      action := "falsely pretending to be in the Government service, intentionally deceiving",
      victim := "Z",
      attribution := AttributionType.SoleInducment,
      deception := DeceptionType.Dishonestly,
      inducement := InducementType.ConsentRetainProperty,
      causesDamageHarm := TRUE,
      damageHarmResult := {
          DamageHarmType.Body,
          DamageHarmType.Mind,
          DamageHarmType.Reputation,
          DamageHarmType.Property,
      },
      definition := ConsequenceDefinition.SaidToCheat,

  }
  #+END_SRC

* Conclusion
  As a result, developers have a more intuitive way of exploring legislation in Singaporean Criminal Law.

  Much like how a compiler can spot flaws in programming logic, Yuho is able to detect if a statute literal satisfies its statute definition as per Singaporean Criminal Law.
