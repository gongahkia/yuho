/*
VERSION 1.1
    * detailed version of s415_cheating_definition.yh
    * includes specification of Material facts, Actus Reus and Mens Rea

Based off the following statutory provisions on cheating
    * Penal Code S415
/* 

scope s415DetailedCheatingDefinition {

    // ~ ENUMS ~
        // observe how we use enums to model most multi-valued custom types in Yuho, the equivalent of optional types in other programming languages
        // enums are incredibly useful and let us perform powerful comprehensive pattern-matching as will be seen below

    struct Party { // ENUM
        Accused,
        Victim,
    }

    struct AttributionType { // ENUM
        SoleInducment,
        NotSoleInducement,
        NA,
    }

    struct DeceptionType { // ENUM
        Fraudulently,
        Dishonestly,
        NA,
    }

    struct InducementType { // ENUM
        DeliverProperty,
        ConsentRetainProperty,
        DoOrOmit,
        NA,
    }

    struct DamageHarmType { // ENUM
        Body,
        Mind, 
        Reputation,
        Property,
        NA,
    }

    struct ConsequenceDefinition { // ENUM
        SaidToCheat,
        NotSaidToCheat,
    }

    // ~ STRUCT DEFINITIONS ~
        // used to group related information
        // structs are a type onto themselves, a custom datatype

    struct Facts { // STRUCT
        string || Party accused,
        string action,
        string || Party victim,
    }

    struct MentalElement { // STRUCT
        DeceptionType deception,
    }

    struct PhysicalElement { // STRUCT
        AttributionType attribution,
        InducementType inducement,
        boolean causesDamageHarm,
        {DamageHarmType} || DamageHarmType damageHarmResult, 
    }

    struct Cheating { // STRUCT
        Facts materialFacts,
        MentalElement mensRea,
        PhysicalElement actusReus,
        ConsequenceDefinition definition,
    }

    // ~ STRUCT LITERAL ~

    Cheating cheatingDefinition := { 

        // ~ struct literal attributes ~
            // instantiated based on the struct definition specified above
            // there must be at least ONE struct attribute literal defined below for each struct attribute specified within the definition above
            // Yuho's interpreter will specify any inconsistencies and prevent transpilation if the struct literal is instantiated wrongly

        materialFacts := {
            accused := Party.Accused,
            action := "deceiving",
            victim := Party.Victim,
        },
        mensRea := {
            deception := DeceptionType.Fraudulently or DeceptionType.Dishonestly or DeceptionType.NA,
        },
        actusReus := {
            attribution := AttributionType.SoleInducment or AttributionType.NotSoleInducement or AttributionType.NA,
            inducement := InducementType.DeliverProperty or InducementType.ConsentRetainProperty or InducementType.DoOrOmit or InducementType.NA, 
            causesDamageHarm := TRUE or FALSE,
            damageHarmResult := {
                DamageHarmType.Body,
                DamageHarmType.Mind,
                DamageHarmType.Reputation,
                DamageHarmType.Property,
            } or DamageHarmType.NA, // this evaluates in the backend to a simple OR construct as with deception, inducement and causesDamageHarm
        },

        // ~ logical short circuiting ~
            // every logical operator introduced in a struct instance must have its each of its enumerations' logic resolved with a corresponding match-case construct
            // by convention, the match-case constructs are placed at the bottom of the struct instance for greater readability
            // since the logical shortcircuiting is introduced here, it means the order of the struct literal's attributes above does not really matter and they can be further grouped with structs

        definition := match attribution {
            case AttributionType.SoleInducment := deception
            case AttributionType.NotSoleInducement := deception
            case AttributionType.NA := consequence ConsequenceDefinition.NotSaidToCheat
        },
        definition := match deception {
            case DeceptionType.Fraudulently := consequence inducement
            case DeceptionType.Dishonestly := consequence inducement
            case DeceptionType.NA := consequence ConsequenceDefinition.NotSaidToCheat
        },
        definition := match inducement {
            case InducementType.DeliverProperty := consequence causesDamageHarm
            case InducementType.ConsentRetainProperty := consequence causesDamageHarm
            case InducementType.DoOrOmit := consequence causesDamageHarm
            case InducementType.NA := consequence ConsequenceDefinition.NotSaidToCheat
        },
        definition := match causesDamageHarm{
            case TRUE := consequence damageHarmResult
            case FALSE := consequence ConsequenceDefinition.NotSaidToCheat
        },
        definition := match {
            case DamageHarmType.NA in damageHarmResult := consequence ConsequenceDefinition.NotSaidToCheat
            case _ :=  consequence ConsequenceDefinition.SaidToCheat 
        },

    }

}