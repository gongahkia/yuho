PARSER_BEGIN(Yuho)

public class Yuho {
  public static void main(String[] args) throws ParseException {
    Yuho parser = new Yuho(System.in);
    parser.program();
  }
}

PARSER_END(Yuho)

SKIP : {
  " " | "\t" | "\n" | "\r" | "//" ~[\r\n]* | "/*" .*? "*/"
}

TOKEN : {
  < TRUE : "TRUE" >
| < FALSE : "FALSE" >
| < MATCH : "match" >
| < CASE : "case" >
| < CONSEQUENCE : "consequence" >
| < PASS : "pass" >
| < STRUCT : "struct" >
| < FN : "fn" >
| < PERCENT : "%" >
| < MONEY_PREFIX : "$" >
| < DATE_FORMAT : "DD-MM-YYYY" >
| < DURATION_UNITS : ("day" | "month" | "year") >
| < IDENTIFIER : (<LETTER> (<LETTER> | <DIGIT>))* >
| < DOT : "." >
| < STRING : "\"" (~["\""])* "\"" >
| < INTEGER : <DIGIT>+ >
| < FLOAT : <DIGIT>+ "." <DIGIT>* >
| < PERCENTAGE : INTEGER PERCENT >
| < MONEY : MONEY_PREFIX <DIGIT>{1,3} ("," <DIGIT>{3})* "." <DIGIT>{2} >
| < DATE : <DIGIT>{2}-<DIGIT>{2}-<DIGIT>{4} >
| < DURATION : INTEGER (DURATION_UNITS ("," INTEGER DURATION_UNITS)*)? >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULT : "*" >
| < DIV : "/" >
| < ASSIGN : ":=" >
| < EQUAL : "==" >
| < NOTEQUAL : "!=" >
| < GT : ">" >
| < LT : "<" >
| < AND : "&&" >
| < OR : "||" >
| < SEMICOLON : ";" >
| < COLON : ":" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < COMMA : "," >
| < UNDERSCORE : "_" >
}

void program() :
{}
{
  (declaration | functionDefinition | structDefinition | matchCase)*
}

void declaration() :
{}
{
  type IDENTIFIER ASSIGN expression SEMICOLON
  | type IDENTIFIER SEMICOLON
}

void type() :
{}
{
  "int" | "float" | "percent" | "money" | "date" | "duration" | "bool" | "string" | IDENTIFIER
}

void expression() :
{}
{
  expression (PLUS | MINUS | MULT | DIV) expression
  | expression (GT | LT | EQUAL | NOTEQUAL) expression
  | expression (AND | OR) expression
  | IDENTIFIER
  | IDENTIFIER DOT IDENTIFIER
  | literal
}

void literal() :
{}
{
  STRING | INTEGER | FLOAT | PERCENTAGE | MONEY | DATE | DURATION | TRUE | FALSE
}

void statement() :
{}
{
  declaration
  | assignment
  | functionCall
  | matchCase
  | passStatement
}

void assignment() :
{}
{
  IDENTIFIER ASSIGN expression SEMICOLON
}

void matchCase() :
{}
{
  MATCH (LPAREN expression RPAREN)? LBRACE caseClause* RBRACE
}

void caseClause() :
{}
{
  CASE expression ASSIGN CONSEQUENCE expression SEMICOLON
  | CASE UNDERSCORE ASSIGN CONSEQUENCE passStatement SEMICOLON
}

void passStatement() :
{}
{
  PASS SEMICOLON
}

void functionDefinition() :
{}
{
  FN IDENTIFIER LPAREN parameterList RPAREN COLON type block
}

void parameterList() :
{}
{
  (parameter (COMMA parameter)*)?
}

void parameter() :
{}
{
  type IDENTIFIER
}

void functionCall() :
{}
{
  IDENTIFIER LPAREN argumentList RPAREN SEMICOLON
}

void argumentList() :
{}
{
  (expression (COMMA expression)*)?
}

void structDefinition() :
{}
{
  STRUCT IDENTIFIER LBRACE structMember* RBRACE
}

void structMember() :
{}
{
  type IDENTIFIER (COMMA | SEMICOLON)
}

void block() :
{}
{
  LBRACE statement* RBRACE
}

<LETTER> ::= [a-zA-Z]
<DIGIT> ::= [0-9]
