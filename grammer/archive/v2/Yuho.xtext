grammar yuho.Yuho with org.eclipse.xtext.common.Terminals
generate yuho "http://www.Yuho.yuho"

Model:
    (declarations+=Declaration | functionDefinitions+=FunctionDefinition | structDefinitions+=StructDefinition | matchCases+=MatchCase)*;

Declaration:
    type=Type name=ID (ASSIGN expression=Expression)?;

Type:
    'int' | 'float' | 'percent' | 'money' | 'date' | 'duration' | 'bool' | 'string' | ID;

LogicalExpression:
    RelationalExpression ((AND | OR) RelationalExpression)*;

RelationalExpression:
    AdditiveExpression ((GT | LT | EQUAL | NOTEQUAL) AdditiveExpression)*;

AdditiveExpression:
    MultiplicativeExpression ((PLUS | MINUS) MultiplicativeExpression)*;

MultiplicativeExpression:
    PrimaryExpression ((MULT | DIV) PrimaryExpression)*;

PrimaryExpression:
    ID ('.' ID)? | Literal | LPAREN Expression RPAREN;

Expression:
    LogicalExpression;

Literal:
    STRING | INTEGER | FLOAT | PERCENTAGE | MONEY | DATE | DURATION | TRUE_LITERAL | FALSE_LITERAL;

Statement:
    Declaration
    | Assignment
    | FunctionCall
    | MatchCase
    | {Statement} PassStatement;

Assignment:
    ID ASSIGN expression=Expression;

MatchCase:
    MATCH LPAREN expression=Expression RPAREN? LBRACE (caseClauses+=CaseClause)* RBRACE;

CaseClause:
    CASE expression=Expression ASSIGN CONSEQUENCE expression=Expression
    | {CaseClause} CASE UNDERSCORE ASSIGN CONSEQUENCE PassStatement;

PassStatement:
    PASS;

FunctionDefinition:
    FN name=ID LPAREN (parameters+=Parameter (COMMA parameters+=Parameter)*)? RPAREN COLON returnType=Type LPAREN (statements+=Statement)* RPAREN;

Parameter:
    type=Type name=ID;

FunctionCall:
    {FunctionCall} ID LPAREN (arguments+=Expression (COMMA arguments+=Expression)*)? RPAREN;

StructDefinition:
    STRUCT name=ID LBRACE (members+=StructMember (COMMA | SEMICOLON)*)? RBRACE;

StructMember:
    type=Type name=ID;

EntryPoint:
    {EntryPoint} 'main' LBRACE (statements+=Statement)* RBRACE;

terminal STRING: '"' ('\\'. | !('\\' | '"'))* '"';
terminal INTEGER: ('0'..'9')+;
terminal FLOAT: ('0'..'9')+ '.' ('0'..'9')*;
terminal PERCENTAGE: INT PERCENT ;
terminal MONEY: MONEY_PREFIX ('0'..'9')+ ((',' '0'..'9')*)? ('.' ('0'..'9')*)?;
terminal DATE: '0'..'9' ('0'..'9') '-' '0'..'9' ('0'..'9') '-' '0'..'9' ('0'..'9') ('0'..'9') ('0'..'9');
terminal DURATION: ('0'..'9')+ (DURATION_UNITS) (COMMA ('0'..'9')+ (DURATION_UNITS))*;
@Override terminal ID: ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*;
@Override terminal WS: (' ' | '\t' | '\r' | '\n')+;
terminal PLUS: '+';
terminal MINUS: '-';
terminal MULT: '*';
terminal DIV: '/';
terminal ASSIGN: ':=';
terminal EQUAL: '==';
terminal NOTEQUAL: '!=';
terminal GT: '>';
terminal LT: '<';
terminal AND: '&&';
terminal OR: '||';
terminal SEMICOLON: ';';
terminal COLON: ':';
terminal LBRACE: '{';
terminal RBRACE: '}';
terminal LPAREN: '(';
terminal RPAREN: ')';
terminal COMMA: ',';
terminal UNDERSCORE: '_';

terminal TRUE_LITERAL: 'TRUE';
terminal FALSE_LITERAL: 'FALSE';
terminal MATCH: 'match';
terminal CASE: 'case';
terminal CONSEQUENCE: 'consequence';
terminal PASS: 'pass';
terminal STRUCT: 'struct';
terminal FN: 'fn';
terminal PERCENT: '%';
terminal MONEY_PREFIX: '$';

terminal DAY: 'day';
terminal MONTH: 'month';
terminal YEAR: 'year';
terminal DURATION_UNITS: DAY | MONTH | YEAR;