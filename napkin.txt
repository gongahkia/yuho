fua
* three main products
  * 1. core YUHO lang syntax that lawyers and programmers will write in (.ebnf file => define syntax, .md file => explain and give examples, .yuho => actual yuho files to show yuho at work representing various statutes)
    * YUHO should be functional with all functional paradigms
  * 2. formalised semantics for legal reasoning (.md file => explaining the mathematical and logical basic for formal proving, .fs => proving the logical correctness of YUHO, .asl (alloy) => proving constraint correctness with the alloy analyser)
  * 3. transpiler to different targets (.md file => explaining purpose of transpiler, .py ACTUAL transpiler in whatever language and to be decided)
    * .js
    * .r
    * .fs
* supplementary products
  * .md files for EACH of the products mentioned above explaining necessary terms
* consider adding this to my README.md
  * Yuho aims to collapse these superpositions possible within the multiple decision procedures of legislation to arrive at an unambigious state, calculating the ulimate end state of a given charge for accused who choose to [self-reprsent](https://www.judiciary.gov.sg/attending-court/represent-yourself-court-rights-responsibilities) in Courts.

additional resources
  * be aware that other formal verification methods and formats exist and learn / implement them if necessary
    * func => https://samibendou.github.io/func-lang/
    * coq => https://coq.inria.fr/
    * cogent => https://trustworthy.systems/projects/OLD/cogent/
