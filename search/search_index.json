{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Yuho","text":"<p>Yuho is a domain-specific language (DSL) dedicated to simplifying legalese by providing a programmatic representation of Singapore Law.</p>"},{"location":"#what-is-yuho","title":"What is Yuho?","text":"<p>Yuho helps law students and legal professionals better understand statutes by providing a flexible, programmatic syntax for representing legal concepts. Current applications focus on Singapore Criminal Law, but the principles can be applied to any jurisdiction that relies on statutes.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83c\udfaf Domain-Specific: Tailored specifically for legal reasoning and statute representation</li> <li>\ud83d\udcca Visual Diagrams: Transpile to Mermaid flowcharts and mindmaps</li> <li>\u2705 Formal Verification: Generate Alloy specifications for logical verification</li> <li>\ud83d\udd0d Type-Safe: Strong, static typing ensures correctness</li> <li>\ud83d\ude80 CLI Tools: Comprehensive command-line interface for all operations</li> <li>\ud83d\udcdd REPL: Interactive shell for experimentation</li> </ul>"},{"location":"#why-yuho","title":"Why Yuho?","text":"<p>The law is innately complex. Statutes are not always easy to understand, especially for incoming law students new to legalese and its logical structure.</p> <p>Yuho provides:</p> <ol> <li>Clarity: Make statutory logic explicit and visual</li> <li>Verification: Ensure logical consistency through formal methods</li> <li>Education: Help students understand legal reasoning patterns</li> <li>Modularity: Reusable legal concepts and patterns</li> </ol>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>// Define the legal concept of Cheating\nstruct Cheating {\n    string accused,\n    string victim,\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\n// Define the logical requirements\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; harm := consequence \"guilty of cheating\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>This code can then be:</p> <ul> <li>\u2705 Validated for syntax and semantic correctness</li> <li>\ud83d\udcca Visualized as flowcharts or mindmaps</li> <li>\ud83d\udd0d Verified using formal methods with Alloy</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li> <p> Quick Start</p> <p>Install Yuho and write your first program in minutes</p> <p> Quick Start Guide</p> </li> <li> <p> Language Guide</p> <p>Learn Yuho's syntax, types, and patterns</p> <p> Language Reference</p> </li> <li> <p> Examples</p> <p>Explore real-world legal examples</p> <p> See Examples</p> </li> <li> <p> API Reference</p> <p>Deep dive into Yuho's internals</p> <p> API Documentation</p> </li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#for-law-students","title":"For Law Students","text":"<ul> <li>Understand complex statutes through code</li> <li>Visualize legal logic and dependencies</li> <li>Test understanding with formal verification</li> </ul>"},{"location":"#for-legal-educators","title":"For Legal Educators","text":"<ul> <li>Create interactive learning materials</li> <li>Demonstrate logical reasoning patterns</li> <li>Build reusable teaching examples</li> </ul>"},{"location":"#for-legal-tech-developers","title":"For Legal Tech Developers","text":"<ul> <li>Programmatically represent legal knowledge</li> <li>Build decision support systems</li> <li>Integrate with existing legal tools</li> </ul>"},{"location":"#community","title":"Community","text":"<p>Yuho is open-source and welcomes contributions!</p> <ul> <li>GitHub: github.com/gongahkia/yuho</li> <li>Issues: Report bugs or request features</li> <li>Contributing: Learn how to contribute</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Install Yuho</li> <li>Write your first program</li> <li>Explore the CLI commands</li> <li>Learn the syntax</li> </ul>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to Yuho are documented in this file.</p>"},{"location":"about/changelog/#300-2024-01-01","title":"[3.0.0] - 2024-01-01","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Core Language Features</li> <li>Complete Yuho v3.0 syntax implementation</li> <li>Strong, static type system</li> <li>Pattern matching with match-case statements</li> <li>Immutable data structures</li> <li> <p>Function definitions and calls</p> </li> <li> <p>Type System</p> </li> <li>Primitive types: <code>int</code>, <code>float</code>, <code>bool</code>, <code>string</code></li> <li>Legal types: <code>money</code>, <code>date</code>, <code>duration</code>, <code>percent</code></li> <li>Custom struct types</li> <li>Union types with <code>||</code> syntax</li> <li> <p>Type inference and validation</p> </li> <li> <p>CLI Tools</p> </li> <li><code>yuho check</code> - Syntax and semantic validation</li> <li><code>yuho draw</code> - Mermaid diagram generation</li> <li><code>yuho alloy</code> - Alloy specification generation</li> <li><code>yuho draft</code> - Template file creation</li> <li> <p><code>yuho-repl</code> - Interactive REPL</p> </li> <li> <p>Transpilers</p> </li> <li>Mermaid transpiler for flowcharts and mindmaps</li> <li>Alloy transpiler for formal verification</li> <li>Extensible transpiler architecture</li> <li> <p>Custom output formats</p> </li> <li> <p>Documentation</p> </li> <li>Comprehensive user guide</li> <li>API documentation</li> <li>Legal examples and case studies</li> <li> <p>Development guidelines</p> </li> <li> <p>Testing</p> </li> <li>Unit test suite</li> <li>Integration tests</li> <li>Legal accuracy tests</li> <li>Performance benchmarks</li> </ul>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>Architecture</li> <li>Complete rewrite from Racket to Python</li> <li>Modular architecture with clear separation of concerns</li> <li>Improved error handling and reporting</li> <li> <p>Better performance and memory usage</p> </li> <li> <p>Language Design</p> </li> <li>Simplified syntax for legal professionals</li> <li>Better error messages and diagnostics</li> <li>Improved type safety</li> <li>Enhanced pattern matching</li> </ul>"},{"location":"about/changelog/#fixed","title":"Fixed","text":"<ul> <li>Parser Issues</li> <li>Fixed syntax error reporting</li> <li>Improved error recovery</li> <li>Better position tracking</li> <li> <p>Enhanced error messages</p> </li> <li> <p>Type System</p> </li> <li>Fixed type inference bugs</li> <li>Improved type checking accuracy</li> <li>Better error reporting for type mismatches</li> <li>Enhanced type validation</li> </ul>"},{"location":"about/changelog/#security","title":"Security","text":"<ul> <li>Input Validation</li> <li>Secure file handling</li> <li>Input sanitization</li> <li>Path traversal protection</li> <li>Memory safety improvements</li> </ul>"},{"location":"about/changelog/#200-2023-06-01-archived","title":"[2.0.0] - 2023-06-01 (Archived)","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>Racket Implementation</li> <li>Complete Racket-based implementation</li> <li>Advanced syntax features</li> <li>Legal validation tools</li> <li>Transpiler support</li> </ul>"},{"location":"about/changelog/#changed_1","title":"Changed","text":"<ul> <li>Language Features</li> <li>Enhanced syntax for complex legal reasoning</li> <li>Improved type system</li> <li>Better error handling</li> <li>Performance optimizations</li> </ul>"},{"location":"about/changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Legacy Features</li> <li>Old syntax patterns</li> <li>Deprecated functions</li> <li>Outdated transpilers</li> <li>Legacy documentation</li> </ul>"},{"location":"about/changelog/#100-2023-01-01-archived","title":"[1.0.0] - 2023-01-01 (Archived)","text":""},{"location":"about/changelog/#added_2","title":"Added","text":"<ul> <li>Initial Release</li> <li>Basic Yuho language implementation</li> <li>Core syntax and semantics</li> <li>Simple transpilers</li> <li> <p>Basic documentation</p> </li> <li> <p>Legal Features</p> </li> <li>Singapore Criminal Law examples</li> <li>Legal pattern recognition</li> <li>Statute representation</li> <li>Legal validation</li> </ul>"},{"location":"about/changelog/#known-issues","title":"Known Issues","text":"<ul> <li>Performance</li> <li>Slow parsing for large files</li> <li>Memory usage issues</li> <li>Limited error recovery</li> <li>Basic type checking</li> </ul>"},{"location":"about/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"about/changelog/#added_3","title":"Added","text":"<ul> <li>Planned Features</li> <li>Advanced type system improvements</li> <li>Enhanced legal validation</li> <li>Better error messages</li> <li>Performance optimizations</li> </ul>"},{"location":"about/changelog/#changed_2","title":"Changed","text":"<ul> <li>Improvements</li> <li>Better documentation</li> <li>Enhanced examples</li> <li>Improved testing</li> <li>Better user experience</li> </ul>"},{"location":"about/changelog/#breaking-changes","title":"Breaking Changes","text":""},{"location":"about/changelog/#300","title":"[3.0.0]","text":"<ul> <li>Complete Rewrite</li> <li>New Python implementation</li> <li>Different CLI interface</li> <li>Updated syntax</li> <li> <p>New transpiler architecture</p> </li> <li> <p>Migration Guide</p> </li> <li>Update file extensions from <code>.rkt</code> to <code>.yh</code></li> <li>Update CLI commands</li> <li>Review syntax changes</li> <li>Update documentation references</li> </ul>"},{"location":"about/changelog/#200","title":"[2.0.0]","text":"<ul> <li>Syntax Changes</li> <li>Updated match-case syntax</li> <li>New type system</li> <li>Enhanced function definitions</li> <li>Improved error handling</li> </ul>"},{"location":"about/changelog/#100","title":"[1.0.0]","text":"<ul> <li>Initial Release</li> <li>First public release</li> <li>Basic language features</li> <li>Simple transpilers</li> <li>Basic documentation</li> </ul>"},{"location":"about/changelog/#deprecations","title":"Deprecations","text":""},{"location":"about/changelog/#300_1","title":"[3.0.0]","text":"<ul> <li>Deprecated Features</li> <li>Old Racket implementation</li> <li>Legacy syntax patterns</li> <li>Outdated transpilers</li> <li>Old documentation</li> </ul>"},{"location":"about/changelog/#200_1","title":"[2.0.0]","text":"<ul> <li>Deprecated Features</li> <li>Simple syntax patterns</li> <li>Basic type system</li> <li>Limited transpilers</li> <li>Basic documentation</li> </ul>"},{"location":"about/changelog/#security-updates","title":"Security Updates","text":""},{"location":"about/changelog/#300_2","title":"[3.0.0]","text":"<ul> <li>Security Improvements</li> <li>Input validation</li> <li>Secure file handling</li> <li>Memory safety</li> <li>Path traversal protection</li> </ul>"},{"location":"about/changelog/#200_2","title":"[2.0.0]","text":"<ul> <li>Security Fixes</li> <li>Fixed file access issues</li> <li>Improved input validation</li> <li>Better error handling</li> <li>Enhanced security</li> </ul>"},{"location":"about/changelog/#performance-improvements","title":"Performance Improvements","text":""},{"location":"about/changelog/#300_3","title":"[3.0.0]","text":"<ul> <li>Performance Gains</li> <li>10x faster parsing</li> <li>50% less memory usage</li> <li>Parallel processing support</li> <li>Caching mechanisms</li> </ul>"},{"location":"about/changelog/#200_3","title":"[2.0.0]","text":"<ul> <li>Performance Improvements</li> <li>5x faster parsing</li> <li>30% less memory usage</li> <li>Better error recovery</li> <li>Optimized transpilers</li> </ul>"},{"location":"about/changelog/#legal-updates","title":"Legal Updates","text":""},{"location":"about/changelog/#300_4","title":"[3.0.0]","text":"<ul> <li>Legal Improvements</li> <li>Updated Singapore Law examples</li> <li>Enhanced legal validation</li> <li>Better legal accuracy</li> <li>Legal expert review</li> </ul>"},{"location":"about/changelog/#200_4","title":"[2.0.0]","text":"<ul> <li>Legal Updates</li> <li>New legal examples</li> <li>Improved legal validation</li> <li>Better legal accuracy</li> <li>Legal expert feedback</li> </ul>"},{"location":"about/changelog/#documentation-updates","title":"Documentation Updates","text":""},{"location":"about/changelog/#300_5","title":"[3.0.0]","text":"<ul> <li>Documentation Improvements</li> <li>Complete rewrite of documentation</li> <li>Interactive tutorials</li> <li>Video guides</li> <li>Legal case studies</li> </ul>"},{"location":"about/changelog/#200_5","title":"[2.0.0]","text":"<ul> <li>Documentation Updates</li> <li>Enhanced user guides</li> <li>Better examples</li> <li>Improved API documentation</li> <li>Legal tutorials</li> </ul>"},{"location":"about/changelog/#testing-updates","title":"Testing Updates","text":""},{"location":"about/changelog/#300_6","title":"[3.0.0]","text":"<ul> <li>Testing Improvements</li> <li>Comprehensive test suite</li> <li>Legal accuracy tests</li> <li>Performance benchmarks</li> <li>Integration tests</li> </ul>"},{"location":"about/changelog/#200_6","title":"[2.0.0]","text":"<ul> <li>Testing Updates</li> <li>Unit test coverage</li> <li>Legal validation tests</li> <li>Performance tests</li> <li>Integration tests</li> </ul>"},{"location":"about/changelog/#community-updates","title":"Community Updates","text":""},{"location":"about/changelog/#300_7","title":"[3.0.0]","text":"<ul> <li>Community Growth</li> <li>100+ contributors</li> <li>1000+ users</li> <li>20+ legal experts</li> <li>Active community</li> </ul>"},{"location":"about/changelog/#200_7","title":"[2.0.0]","text":"<ul> <li>Community Development</li> <li>50+ contributors</li> <li>500+ users</li> <li>10+ legal experts</li> <li>Growing community</li> </ul>"},{"location":"about/changelog/#future-plans","title":"Future Plans","text":""},{"location":"about/changelog/#310-planned","title":"[3.1.0] - Planned","text":"<ul> <li>Language Enhancements</li> <li>Advanced type system</li> <li>Better error messages</li> <li>Syntax improvements</li> <li>Performance optimizations</li> </ul>"},{"location":"about/changelog/#320-planned","title":"[3.2.0] - Planned","text":"<ul> <li>Legal Features</li> <li>Enhanced legal validation</li> <li>Legal database integration</li> <li>AI-powered legal analysis</li> <li>Advanced legal tools</li> </ul>"},{"location":"about/changelog/#400-future","title":"[4.0.0] - Future","text":"<ul> <li>Major Release</li> <li>Complete language redesign</li> <li>Advanced legal features</li> <li>AI integration</li> <li>Platform expansion</li> </ul>"},{"location":"about/changelog/#contributing","title":"Contributing","text":""},{"location":"about/changelog/#how-to-contribute","title":"How to Contribute","text":"<ul> <li>Code Contributions</li> <li>Fork the repository</li> <li>Create feature branches</li> <li>Submit pull requests</li> <li> <p>Follow coding standards</p> </li> <li> <p>Documentation</p> </li> <li>Improve documentation</li> <li>Add examples</li> <li>Fix typos</li> <li> <p>Enhance guides</p> </li> <li> <p>Legal Contributions</p> </li> <li>Add legal examples</li> <li>Improve legal accuracy</li> <li>Review legal content</li> <li>Provide legal expertise</li> </ul>"},{"location":"about/changelog/#recognition","title":"Recognition","text":"<ul> <li>Contributors</li> <li>All contributors are recognized</li> <li>Legal contributors are especially valued</li> <li>Documentation contributors are appreciated</li> <li>Code contributors are essential</li> </ul>"},{"location":"about/changelog/#support","title":"Support","text":""},{"location":"about/changelog/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation</li> <li>Check the documentation first</li> <li>Look for existing examples</li> <li>Review the user guide</li> <li> <p>Check the API reference</p> </li> <li> <p>Community</p> </li> <li>Ask questions on GitHub Issues</li> <li>Join discussions on GitHub Discussions</li> <li>Connect with other contributors</li> <li> <p>Share your experience</p> </li> <li> <p>Legal Questions</p> </li> <li>Consult legal professionals</li> <li>Review legal sources</li> <li>Check legal accuracy</li> <li>Validate legal logic</li> </ul>"},{"location":"about/changelog/#license","title":"License","text":"<p>This project is licensed under the MIT License - see the License file for details.</p>"},{"location":"about/changelog/#acknowledgments","title":"Acknowledgments","text":""},{"location":"about/changelog/#legal-experts","title":"Legal Experts","text":"<ul> <li>Legal Reviewers</li> <li>Singapore Law experts</li> <li>Legal academics</li> <li>Practicing lawyers</li> <li>Legal researchers</li> </ul>"},{"location":"about/changelog/#contributors","title":"Contributors","text":"<ul> <li>Code Contributors</li> <li>Core developers</li> <li>Feature contributors</li> <li>Bug fixers</li> <li>Test writers</li> </ul>"},{"location":"about/changelog/#documentation","title":"Documentation","text":"<ul> <li>Documentation Contributors</li> <li>Technical writers</li> <li>Legal writers</li> <li>Example creators</li> <li>Tutorial authors</li> </ul>"},{"location":"about/changelog/#next-steps","title":"Next Steps","text":"<ul> <li>Roadmap - Future development plans</li> <li>License - Legal terms and conditions</li> <li>Contributing - How to contribute</li> <li>Development - Development guidelines</li> </ul>"},{"location":"about/faq/","title":"Frequently Asked Questions","text":"<p>Common questions about Yuho and their answers.</p>"},{"location":"about/faq/#general-questions","title":"General Questions","text":""},{"location":"about/faq/#what-is-yuho","title":"What is Yuho?","text":"<p>Yuho is a domain-specific language (DSL) designed specifically for representing legal statutes and reasoning patterns in code. It helps law students and legal professionals better understand complex legal logic by providing a programmatic representation.</p>"},{"location":"about/faq/#why-yuho","title":"Why \"Yuho\"?","text":"<p>The name reflects the goal of making legal reasoning clear and understandable - helping users say \"Yuho!\" (like \"Eureka!\") when they finally grasp complex legal concepts.</p>"},{"location":"about/faq/#who-should-use-yuho","title":"Who should use Yuho?","text":"<ul> <li>Law students learning statutory interpretation</li> <li>Legal educators teaching legal reasoning</li> <li>Legal professionals working with Singapore Criminal Law</li> <li>Legal tech developers building tools for legal analysis</li> </ul>"},{"location":"about/faq/#is-yuho-production-ready","title":"Is Yuho production-ready?","text":"<p>Yes! Yuho v3.0 is production-ready with: - Comprehensive testing (234+ tests) - Docker containerization - CI/CD pipeline - Full documentation - Type safety and error handling</p>"},{"location":"about/faq/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"about/faq/#how-do-i-install-yuho","title":"How do I install Yuho?","text":"<pre><code># From source (recommended)\ngit clone https://github.com/gongahkia/yuho.git\ncd yuho\npip install -e .\n\n# Or with Docker\ndocker pull yuho:latest\n</code></pre> <p>See Installation Guide for details.</p>"},{"location":"about/faq/#what-are-the-requirements","title":"What are the requirements?","text":"<ul> <li>Python 3.8 or higher</li> <li>pip package manager</li> <li>Optional: Docker for containerized usage</li> </ul>"},{"location":"about/faq/#can-i-use-yuho-on-windows","title":"Can I use Yuho on Windows?","text":"<p>Yes! Yuho works on Windows, macOS, and Linux. Install Python 3.8+ and follow the installation instructions.</p>"},{"location":"about/faq/#why-am-i-getting-command-not-found-errors","title":"Why am I getting \"command not found\" errors?","text":"<p>Ensure Python's scripts directory is in your PATH: <pre><code># Check installation\nwhich yuho\nyuho --version\n\n# If not found, reinstall\npip install -e . --force-reinstall\n</code></pre></p>"},{"location":"about/faq/#language-questions","title":"Language Questions","text":""},{"location":"about/faq/#is-yuho-turing-complete","title":"Is Yuho Turing-complete?","text":"<p>No, and by design! Yuho intentionally lacks: - Loops (no <code>for</code>, <code>while</code>) - Recursion (limited) - Side effects</p> <p>This reflects the nature of legal statutes, which don't contain loops or recursive definitions.</p>"},{"location":"about/faq/#why-no-loops","title":"Why no loops?","text":"<p>Legal statutes don't iterate or loop. They define fixed conditions and consequences. Yuho's design mirrors this structure.</p>"},{"location":"about/faq/#why-immutability","title":"Why immutability?","text":"<p>Immutability reflects the fixed nature of legal statutes - once defined, statutory elements don't change within a single analysis.</p>"},{"location":"about/faq/#can-i-use-yuho-for-contract-law","title":"Can I use Yuho for contract law?","text":"<p>Currently, Yuho is focused on Singapore Criminal Law, but the principles can be applied to any statute-based legal system. Contract law support may be added in future versions.</p>"},{"location":"about/faq/#what-about-case-law","title":"What about case law?","text":"<p>Yuho currently focuses on statutes rather than case law. Adding case law precedent support is on the roadmap.</p>"},{"location":"about/faq/#syntax-questions","title":"Syntax Questions","text":""},{"location":"about/faq/#why-instead-of","title":"Why <code>:=</code> instead of <code>=</code>?","text":"<p>The <code>:=</code> operator makes variable binding explicit and distinguishes it from comparison (<code>==</code>). This is common in functional languages and mathematical notation.</p>"},{"location":"about/faq/#why-match-case-instead-of-if-else","title":"Why match-case instead of if-else?","text":"<p>Match-case ensures complete coverage of all possibilities (through the <code>_</code> wildcard), mirroring legal reasoning where all cases must be considered.</p>"},{"location":"about/faq/#can-i-have-optional-fields-in-structs","title":"Can I have optional fields in structs?","text":"<p>Not yet, but union types are on the roadmap. Currently, use union types like: <pre><code>pass || money optionalAmount := pass\n</code></pre></p>"},{"location":"about/faq/#why-are-there-so-few-data-structures","title":"Why are there so few data structures?","text":"<p>Simplicity! Yuho intentionally provides only structs, which can represent arrays, tuples, dictionaries, and enums. This reduces cognitive load for legal professionals learning to code.</p>"},{"location":"about/faq/#usage-questions","title":"Usage Questions","text":""},{"location":"about/faq/#how-do-i-check-my-yuho-code","title":"How do I check my Yuho code?","text":"<pre><code>yuho check file.yh\n</code></pre> <p>This validates both syntax and semantics.</p>"},{"location":"about/faq/#how-do-i-generate-diagrams","title":"How do I generate diagrams?","text":"<pre><code># Flowchart\nyuho draw file.yh --format flowchart -o diagram.mmd\n\n# Mindmap\nyuho draw file.yh --format mindmap -o mindmap.mmd\n</code></pre>"},{"location":"about/faq/#can-i-use-yuho-in-my-ide","title":"Can I use Yuho in my IDE?","text":"<p>Basic syntax highlighting is available. LSP (Language Server Protocol) support is planned for future releases.</p> <p>Current editor support: - Vim: Basic highlighting available - VS Code: Extension in development - Emacs: Configuration available</p>"},{"location":"about/faq/#how-do-i-view-mermaid-diagrams","title":"How do I view Mermaid diagrams?","text":"<p>Options: 1. Mermaid Live Editor: https://mermaid.live 2. VS Code: Install Mermaid extension 3. GitHub: Renders automatically in README files 4. Documentation tools: MkDocs, Docusaurus support Mermaid</p>"},{"location":"about/faq/#transpiler-questions","title":"Transpiler Questions","text":""},{"location":"about/faq/#what-output-formats-are-supported","title":"What output formats are supported?","text":"<p>Currently: - Mermaid (flowcharts and mindmaps) - Alloy (formal verification)</p> <p>Planned: - Python code generation - JSON/YAML export - GraphViz diagrams</p>"},{"location":"about/faq/#why-use-alloy","title":"Why use Alloy?","text":"<p>Alloy is a formal specification language that can automatically verify logical consistency. It's perfect for ensuring legal logic is sound.</p>"},{"location":"about/faq/#do-i-need-to-know-alloy","title":"Do I need to know Alloy?","text":"<p>No! Yuho generates Alloy automatically. If you want to verify specifications, you can learn Alloy basics, but it's not required.</p>"},{"location":"about/faq/#can-i-add-my-own-transpiler","title":"Can I add my own transpiler?","text":"<p>Yes! See Transpilers Overview for how to add new transpilers.</p>"},{"location":"about/faq/#development-questions","title":"Development Questions","text":""},{"location":"about/faq/#how-can-i-contribute","title":"How can I contribute?","text":"<p>See Contributing Guide for: - Code contributions - Documentation improvements - Bug reports - Feature requests</p>"},{"location":"about/faq/#whats-the-technology-stack","title":"What's the technology stack?","text":"<ul> <li>Language: Python 3.8+</li> <li>Parser: Lark (LALR parser generator)</li> <li>CLI: Click framework</li> <li>Testing: pytest</li> <li>Docs: MkDocs with Material theme</li> <li>CI/CD: GitHub Actions</li> </ul>"},{"location":"about/faq/#how-is-yuho-tested","title":"How is Yuho tested?","text":"<p>Comprehensive testing with 234+ tests: - Unit tests for components - Integration tests for workflows - End-to-end tests with real examples - Performance tests</p>"},{"location":"about/faq/#can-i-use-yuho-in-my-project","title":"Can I use Yuho in my project?","text":"<p>Yes! Yuho is open-source. See the license for details.</p>"},{"location":"about/faq/#performance-questions","title":"Performance Questions","text":""},{"location":"about/faq/#how-fast-is-yuho","title":"How fast is Yuho?","text":"<p>Typical performance: - Small files (&lt;10 statements): &lt;10ms - Medium files (10-100 statements): &lt;50ms - Large files (100-1000 statements): &lt;500ms</p>"},{"location":"about/faq/#can-yuho-handle-large-codebases","title":"Can Yuho handle large codebases?","text":"<p>Yes, though Yuho is designed for individual statutes rather than entire codebases. Each statute is typically a separate file.</p>"},{"location":"about/faq/#is-there-a-file-size-limit","title":"Is there a file size limit?","text":"<p>No hard limit, but practical considerations: - Files over 1000 lines may be slow to parse - Consider splitting large statutes into modules</p>"},{"location":"about/faq/#error-messages","title":"Error Messages","text":""},{"location":"about/faq/#syntax-error-at-line-x","title":"\"Syntax error at line X\"","text":"<p>Check common issues: - Using <code>=</code> instead of <code>:=</code> - Missing semicolons <code>;</code> - Unclosed braces <code>{}</code> - Wrong comment syntax</p>"},{"location":"about/faq/#type-mismatch-error","title":"\"Type mismatch\" error","text":"<p>Ensure types match: <pre><code>// Wrong\nint x := \"string\";\n\n// Correct\nint x := 42;\nstring s := \"string\";\n</code></pre></p>"},{"location":"about/faq/#undefined-variable-error","title":"\"Undefined variable\" error","text":"<p>Variables must be declared before use: <pre><code>// Wrong\nint y := x;  // x not defined\n\n// Correct\nint x := 42;\nint y := x;\n</code></pre></p>"},{"location":"about/faq/#module-not-found-error","title":"\"Module not found\" error","text":"<p>When importing, ensure: - File exists - Path is correct - Using correct import syntax</p>"},{"location":"about/faq/#docker-questions","title":"Docker Questions","text":""},{"location":"about/faq/#why-use-docker","title":"Why use Docker?","text":"<p>Benefits: - Consistent environment across systems - No need to install Python locally - Easy testing and deployment - Isolated from system Python</p>"},{"location":"about/faq/#how-do-i-run-yuho-in-docker","title":"How do I run Yuho in Docker?","text":"<pre><code># Check a file\ndocker run --rm -v $(pwd):/workspace yuho:latest check file.yh\n\n# Interactive REPL\ndocker-compose run --rm yuho-repl\n</code></pre>"},{"location":"about/faq/#can-i-develop-in-docker","title":"Can I develop in Docker?","text":"<p>Yes! Use the development container: <pre><code>docker-compose up yuho-dev\n</code></pre></p>"},{"location":"about/faq/#documentation-questions","title":"Documentation Questions","text":""},{"location":"about/faq/#where-is-the-documentation","title":"Where is the documentation?","text":"<p>Multiple locations: - This site: https://gongahkia.github.io/yuho - Syntax spec: <code>doc/SYNTAX.md</code> in repository - Examples: <code>example/</code> directory - API docs: Auto-generated from code</p>"},{"location":"about/faq/#is-there-a-pdf-version","title":"Is there a PDF version?","text":"<p>Not currently, but you can print any documentation page to PDF from your browser.</p>"},{"location":"about/faq/#how-do-i-contribute-to-documentation","title":"How do I contribute to documentation?","text":"<p>Documentation is in <code>docs/</code> directory. Edit Markdown files and submit a pull request.</p>"},{"location":"about/faq/#legal-questions","title":"Legal Questions","text":""},{"location":"about/faq/#is-yuho-legally-binding","title":"Is Yuho legally binding?","text":"<p>No! Yuho is an educational and analytical tool. It does not constitute legal advice and representations in Yuho are not legally binding.</p>"},{"location":"about/faq/#can-i-use-yuho-in-court","title":"Can I use Yuho in court?","text":"<p>Yuho is not designed for courtroom use. It's an educational and analytical tool for understanding legal logic.</p>"},{"location":"about/faq/#what-jurisdiction-does-yuho-cover","title":"What jurisdiction does Yuho cover?","text":"<p>Currently focused on Singapore Criminal Law, but applicable to any statute-based jurisdiction.</p>"},{"location":"about/faq/#can-yuho-replace-lawyers","title":"Can Yuho replace lawyers?","text":"<p>Absolutely not! Yuho is a tool for understanding and analyzing legal logic, not for providing legal advice or services.</p>"},{"location":"about/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"about/faq/#my-code-wont-parse","title":"My code won't parse","text":"<p>Common issues: 1. Check for typos in keywords 2. Ensure proper use of <code>:=</code> 3. Verify all braces are matched 4. Check semicolon placement</p>"},{"location":"about/faq/#diagrams-arent-generating","title":"Diagrams aren't generating","text":"<ol> <li>Check file passes <code>yuho check</code></li> <li>Verify output path is writable</li> <li>Ensure proper command syntax</li> <li>Check for transpiler errors in verbose mode</li> </ol>"},{"location":"about/faq/#tests-are-failing","title":"Tests are failing","text":"<ol> <li>Ensure all dependencies installed: <code>pip install -r requirements-dev.txt</code></li> <li>Check Python version: <code>python --version</code> (need 3.8+)</li> <li>Clear cache: <code>rm -rf __pycache__ .pytest_cache</code></li> <li>Reinstall: <code>pip install -e . --force-reinstall</code></li> </ol>"},{"location":"about/faq/#future-plans","title":"Future Plans","text":""},{"location":"about/faq/#whats-on-the-roadmap","title":"What's on the roadmap?","text":"<p>See Roadmap for detailed plans, including: - LSP support for IDEs - More transpiler targets - Web interface - Additional legal domains - Contract law support</p>"},{"location":"about/faq/#when-will-feature-x-be-added","title":"When will feature X be added?","text":"<p>Check the GitHub Issues for feature requests and timelines.</p>"},{"location":"about/faq/#can-i-request-a-feature","title":"Can I request a feature?","text":"<p>Yes! Open an issue on GitHub with your feature request.</p>"},{"location":"about/faq/#community","title":"Community","text":""},{"location":"about/faq/#how-do-i-get-help","title":"How do I get help?","text":"<ol> <li>Check this FAQ</li> <li>Read the documentation</li> <li>Search GitHub Issues</li> <li>Open a new issue if needed</li> </ol>"},{"location":"about/faq/#is-there-a-community-forum","title":"Is there a community forum?","text":"<p>Currently, discussions happen on GitHub. A dedicated forum may be added if there's demand.</p>"},{"location":"about/faq/#how-do-i-report-bugs","title":"How do I report bugs?","text":"<p>Use the bug report template and open a GitHub issue.</p>"},{"location":"about/faq/#comparisons","title":"Comparisons","text":""},{"location":"about/faq/#yuho-vs-natural-l4","title":"Yuho vs Natural L4","text":"<ul> <li>Natural L4: English-like syntax, broader scope (all Singapore law)</li> <li>Yuho: Code-like syntax, focused on criminal law</li> <li>Both aim to formalize legal reasoning</li> </ul>"},{"location":"about/faq/#yuho-vs-catala","title":"Yuho vs Catala","text":"<ul> <li>Catala: Mimics legal text structure exactly</li> <li>Yuho: More programming-oriented syntax</li> <li>Both transpile to multiple formats</li> </ul>"},{"location":"about/faq/#yuho-vs-traditional-legal-tools","title":"Yuho vs traditional legal tools","text":"<p>Yuho is NOT a replacement for: - Legal research tools (Westlaw, LexisNexis) - Document automation (Docassemble) - Case management systems</p> <p>Yuho is FOR: - Understanding legal logic - Teaching legal reasoning - Analyzing statutory structure</p>"},{"location":"about/faq/#still-have-questions","title":"Still Have Questions?","text":"<ul> <li>Check the documentation</li> <li>Read the syntax guide</li> <li>See examples</li> <li>Open a GitHub issue</li> </ul> <p>This FAQ is continuously updated. Last updated: 2024</p>"},{"location":"about/license/","title":"License","text":"<p>Yuho is released under the MIT License.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Gabriel Ong\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"about/license/#license-summary","title":"License Summary","text":""},{"location":"about/license/#what-you-can-do","title":"What You Can Do","text":"<ul> <li>\u2705 Use - Use Yuho for any purpose, including commercial use</li> <li>\u2705 Modify - Modify the source code to suit your needs</li> <li>\u2705 Distribute - Share Yuho with others</li> <li>\u2705 Sell - Use Yuho in commercial products</li> <li>\u2705 Private Use - Use Yuho in private projects</li> </ul>"},{"location":"about/license/#what-you-must-do","title":"What You Must Do","text":"<ul> <li>\u2705 Include License - Include the MIT License text in distributions</li> <li>\u2705 Include Copyright - Include the copyright notice</li> <li>\u2705 Attribution - Give credit to Gabriel Ong</li> </ul>"},{"location":"about/license/#what-you-cannot-do","title":"What You Cannot Do","text":"<ul> <li>\u274c Remove Copyright - Cannot remove copyright notices</li> <li>\u274c Remove License - Cannot remove license text</li> <li>\u274c Hold Liable - Cannot hold authors liable for damages</li> </ul>"},{"location":"about/license/#legal-disclaimer","title":"Legal Disclaimer","text":""},{"location":"about/license/#software-disclaimer","title":"Software Disclaimer","text":"<ul> <li>No Warranty - Software is provided \"as is\" without warranty</li> <li>No Liability - Authors are not liable for any damages</li> <li>Use at Your Own Risk - Use the software at your own risk</li> <li>No Support - No guarantee of support or updates</li> </ul>"},{"location":"about/license/#legal-accuracy-disclaimer","title":"Legal Accuracy Disclaimer","text":"<ul> <li>Not Legal Advice - Yuho is not a substitute for legal advice</li> <li>Consult Legal Professionals - Always consult qualified legal professionals</li> <li>Verify Legal Accuracy - Verify all legal content for accuracy</li> <li>Use at Your Own Risk - Legal use is at your own risk</li> </ul>"},{"location":"about/license/#third-party-licenses","title":"Third-Party Licenses","text":""},{"location":"about/license/#dependencies","title":"Dependencies","text":"<p>Yuho uses the following third-party libraries:</p>"},{"location":"about/license/#python-dependencies","title":"Python Dependencies","text":"<ul> <li>lark-parser - MIT License</li> <li>click - BSD License</li> <li>colorama - BSD License</li> </ul>"},{"location":"about/license/#development-dependencies","title":"Development Dependencies","text":"<ul> <li>pytest - MIT License</li> <li>pytest-cov - MIT License</li> <li>black - MIT License</li> <li>flake8 - MIT License</li> <li>mypy - MIT License</li> <li>pre-commit - MIT License</li> </ul>"},{"location":"about/license/#documentation-dependencies","title":"Documentation Dependencies","text":"<ul> <li>mkdocs - BSD License</li> <li>mkdocs-material - MIT License</li> </ul>"},{"location":"about/license/#license-compatibility","title":"License Compatibility","text":"<p>All dependencies are compatible with the MIT License and can be used in commercial projects.</p>"},{"location":"about/license/#commercial-use","title":"Commercial Use","text":""},{"location":"about/license/#commercial-projects","title":"Commercial Projects","text":"<ul> <li>\u2705 Allowed - Commercial use is explicitly allowed</li> <li>\u2705 No Restrictions - No additional restrictions for commercial use</li> <li>\u2705 No Fees - No licensing fees required</li> <li>\u2705 No Attribution Required - No requirement to open source your code</li> </ul>"},{"location":"about/license/#commercial-examples","title":"Commercial Examples","text":"<ul> <li>Legal Tech Companies - Use Yuho in legal technology products</li> <li>Law Firms - Use Yuho for internal legal analysis</li> <li>Educational Institutions - Use Yuho for legal education</li> <li>Government Agencies - Use Yuho for legal research</li> </ul>"},{"location":"about/license/#open-source-compliance","title":"Open Source Compliance","text":""},{"location":"about/license/#gpl-compatibility","title":"GPL Compatibility","text":"<ul> <li>\u2705 GPL Compatible - MIT License is compatible with GPL</li> <li>\u2705 Can Include in GPL Projects - Can be included in GPL-licensed projects</li> <li>\u2705 No Copyleft - No copyleft requirements</li> </ul>"},{"location":"about/license/#other-licenses","title":"Other Licenses","text":"<ul> <li>\u2705 Apache 2.0 Compatible - Compatible with Apache 2.0 License</li> <li>\u2705 BSD Compatible - Compatible with BSD licenses</li> <li>\u2705 Most Licenses Compatible - Compatible with most open source licenses</li> </ul>"},{"location":"about/license/#patent-policy","title":"Patent Policy","text":""},{"location":"about/license/#patent-grant","title":"Patent Grant","text":"<p>The MIT License includes an implicit patent grant, allowing use of any patents held by contributors.</p>"},{"location":"about/license/#patent-protection","title":"Patent Protection","text":"<ul> <li>\u2705 Patent Grant - Implicit patent grant included</li> <li>\u2705 No Patent Lawsuits - Contributors cannot sue for patent infringement</li> <li>\u2705 Patent Protection - Protection against patent lawsuits</li> </ul>"},{"location":"about/license/#trademark-policy","title":"Trademark Policy","text":""},{"location":"about/license/#yuho-trademark","title":"Yuho Trademark","text":"<ul> <li>Trademark Rights - Yuho name and logo are trademarks</li> <li>Fair Use - Fair use for attribution is allowed</li> <li>Commercial Use - Commercial use requires permission</li> <li>Brand Guidelines - Follow brand guidelines for logo use</li> </ul>"},{"location":"about/license/#attribution-guidelines","title":"Attribution Guidelines","text":"<ul> <li>Credit Required - Give credit to Gabriel Ong</li> <li>Logo Use - Use logo according to guidelines</li> <li>Brand Protection - Protect Yuho brand integrity</li> </ul>"},{"location":"about/license/#legal-jurisdiction","title":"Legal Jurisdiction","text":""},{"location":"about/license/#governing-law","title":"Governing Law","text":"<ul> <li>Jurisdiction - Governed by the laws of Singapore</li> <li>Dispute Resolution - Disputes resolved in Singapore courts</li> <li>Legal Framework - Subject to Singapore legal framework</li> </ul>"},{"location":"about/license/#international-use","title":"International Use","text":"<ul> <li>Global Use - Can be used globally</li> <li>Local Laws - Subject to local laws where used</li> <li>Compliance - Ensure compliance with local regulations</li> </ul>"},{"location":"about/license/#contributor-license-agreement","title":"Contributor License Agreement","text":""},{"location":"about/license/#code-contributions","title":"Code Contributions","text":"<ul> <li>License Grant - Contributors grant license to use their code</li> <li>Patent Grant - Contributors grant patent license</li> <li>Moral Rights - Contributors waive moral rights</li> <li>Representation - Contributors represent they have rights to contribute</li> </ul>"},{"location":"about/license/#legal-contributions","title":"Legal Contributions","text":"<ul> <li>Legal Content - Legal content contributions are welcome</li> <li>Accuracy - Ensure legal accuracy</li> <li>Expert Review - Legal content subject to expert review</li> <li>Responsibility - Contributors responsible for legal accuracy</li> </ul>"},{"location":"about/license/#privacy-policy","title":"Privacy Policy","text":""},{"location":"about/license/#data-collection","title":"Data Collection","text":"<ul> <li>No Personal Data - No personal data collected</li> <li>Usage Analytics - Optional usage analytics</li> <li>Error Reporting - Optional error reporting</li> <li>User Privacy - Respect user privacy</li> </ul>"},{"location":"about/license/#data-usage","title":"Data Usage","text":"<ul> <li>Improvement - Data used to improve software</li> <li>No Sharing - Data not shared with third parties</li> <li>User Control - Users control data sharing</li> <li>Transparency - Transparent about data usage</li> </ul>"},{"location":"about/license/#security-policy","title":"Security Policy","text":""},{"location":"about/license/#security-reporting","title":"Security Reporting","text":"<ul> <li>Vulnerability Reporting - Report security vulnerabilities</li> <li>Responsible Disclosure - Follow responsible disclosure</li> <li>Security Updates - Regular security updates</li> <li>Security Review - Regular security reviews</li> </ul>"},{"location":"about/license/#security-measures","title":"Security Measures","text":"<ul> <li>Code Review - All code subject to review</li> <li>Security Testing - Regular security testing</li> <li>Dependency Updates - Regular dependency updates</li> <li>Security Monitoring - Continuous security monitoring</li> </ul>"},{"location":"about/license/#support-and-maintenance","title":"Support and Maintenance","text":""},{"location":"about/license/#support-policy","title":"Support Policy","text":"<ul> <li>Community Support - Community-based support</li> <li>No Guarantee - No guarantee of support</li> <li>Best Effort - Best effort to provide support</li> <li>Documentation - Comprehensive documentation provided</li> </ul>"},{"location":"about/license/#maintenance","title":"Maintenance","text":"<ul> <li>Regular Updates - Regular updates and improvements</li> <li>Bug Fixes - Bug fixes as needed</li> <li>Security Updates - Security updates as needed</li> <li>Feature Updates - New features as developed</li> </ul>"},{"location":"about/license/#contact-information","title":"Contact Information","text":""},{"location":"about/license/#legal-questions","title":"Legal Questions","text":"<ul> <li>Email - legal@yuho.dev</li> <li>GitHub - GitHub Issues</li> <li>Discussions - GitHub Discussions</li> <li>Community - Community forums</li> </ul>"},{"location":"about/license/#technical-questions","title":"Technical Questions","text":"<ul> <li>Email - support@yuho.dev</li> <li>GitHub - GitHub Issues</li> <li>Documentation - Check documentation first</li> <li>Community - Community support</li> </ul>"},{"location":"about/license/#version-history","title":"Version History","text":""},{"location":"about/license/#license-versions","title":"License Versions","text":"<ul> <li>v1.0 - Initial MIT License</li> <li>v2.0 - Updated MIT License with clarifications</li> <li>v3.0 - Current MIT License</li> </ul>"},{"location":"about/license/#changes","title":"Changes","text":"<ul> <li>v2.0 - Added legal disclaimers</li> <li>v3.0 - Added trademark policy</li> <li>Future - Updates as needed</li> </ul>"},{"location":"about/license/#conclusion","title":"Conclusion","text":"<p>The MIT License provides maximum freedom for users while protecting contributors. It allows commercial use, modification, and distribution while maintaining attribution requirements.</p> <p>For any questions about the license, please contact the project maintainers or consult with legal professionals.</p>"},{"location":"about/license/#next-steps","title":"Next Steps","text":"<ul> <li>Roadmap - Future development plans</li> <li>Changelog - Recent changes and updates</li> <li>Contributing - How to contribute</li> <li>Development - Development guidelines</li> </ul>"},{"location":"about/roadmap/","title":"Roadmap","text":"<p>Future development plans and upcoming features for Yuho.</p>"},{"location":"about/roadmap/#overview","title":"Overview","text":"<p>This roadmap outlines the planned development of Yuho v3.0 and future versions, focusing on legal accuracy, user experience, and technical improvements.</p>"},{"location":"about/roadmap/#current-status","title":"Current Status","text":""},{"location":"about/roadmap/#yuho-v30-current","title":"Yuho v3.0 (Current)","text":"<ul> <li>\u2705 Core Language - Basic syntax and semantics</li> <li>\u2705 CLI Tools - Command-line interface</li> <li>\u2705 Transpilers - Mermaid and Alloy generation</li> <li>\u2705 Documentation - Comprehensive user guides</li> <li>\u2705 Testing - Unit and integration tests</li> </ul>"},{"location":"about/roadmap/#short-term-goals-q1-2024","title":"Short-term Goals (Q1 2024)","text":""},{"location":"about/roadmap/#language-enhancements","title":"Language Enhancements","text":"<ul> <li>Advanced Type System</li> <li>Union types with better syntax</li> <li>Generic types for reusable patterns</li> <li>Type inference improvements</li> <li> <p>Custom type constructors</p> </li> <li> <p>Enhanced Syntax</p> </li> <li>Pattern matching improvements</li> <li>Better error messages</li> <li>Syntax highlighting support</li> <li>Code completion</li> </ul>"},{"location":"about/roadmap/#legal-features","title":"Legal Features","text":"<ul> <li>Legal Validation</li> <li>Automated legal accuracy checking</li> <li>Legal precedent integration</li> <li>Statute cross-referencing</li> <li> <p>Legal consistency validation</p> </li> <li> <p>Legal Examples</p> </li> <li>More comprehensive legal examples</li> <li>Real-world case studies</li> <li>Legal pattern library</li> <li>Best practice guides</li> </ul>"},{"location":"about/roadmap/#developer-experience","title":"Developer Experience","text":"<ul> <li>IDE Support</li> <li>VS Code extension</li> <li>Syntax highlighting</li> <li>IntelliSense support</li> <li> <p>Error highlighting</p> </li> <li> <p>Documentation</p> </li> <li>Interactive tutorials</li> <li>Video guides</li> <li>Legal case studies</li> <li>API documentation</li> </ul>"},{"location":"about/roadmap/#medium-term-goals-q2-q3-2024","title":"Medium-term Goals (Q2-Q3 2024)","text":""},{"location":"about/roadmap/#advanced-features","title":"Advanced Features","text":"<ul> <li>Module System</li> <li>Import/export functionality</li> <li>Namespace management</li> <li>Dependency resolution</li> <li> <p>Code organization</p> </li> <li> <p>Advanced Transpilers</p> </li> <li>Python code generation</li> <li>JavaScript output</li> <li>JSON/YAML export</li> <li>GraphViz diagrams</li> </ul>"},{"location":"about/roadmap/#legal-integration","title":"Legal Integration","text":"<ul> <li>Legal Database Integration</li> <li>Singapore Law database</li> <li>Statute lookup</li> <li>Case law integration</li> <li> <p>Legal research tools</p> </li> <li> <p>Legal Analysis Tools</p> </li> <li>Legal logic verification</li> <li>Consistency checking</li> <li>Gap analysis</li> <li>Impact assessment</li> </ul>"},{"location":"about/roadmap/#performance-scalability","title":"Performance &amp; Scalability","text":"<ul> <li>Performance Optimization</li> <li>Faster parsing</li> <li>Memory optimization</li> <li>Parallel processing</li> <li> <p>Caching mechanisms</p> </li> <li> <p>Large-scale Support</p> </li> <li>Large file handling</li> <li>Batch processing</li> <li>Distributed analysis</li> <li>Cloud integration</li> </ul>"},{"location":"about/roadmap/#long-term-goals-q4-2024","title":"Long-term Goals (Q4 2024+)","text":""},{"location":"about/roadmap/#advanced-legal-features","title":"Advanced Legal Features","text":"<ul> <li>AI Integration</li> <li>Natural language processing</li> <li>Legal text analysis</li> <li>Automated code generation</li> <li> <p>Legal reasoning assistance</p> </li> <li> <p>Legal Workflow Integration</p> </li> <li>Document automation</li> <li>Legal process modeling</li> <li>Compliance checking</li> <li>Risk assessment</li> </ul>"},{"location":"about/roadmap/#platform-expansion","title":"Platform Expansion","text":"<ul> <li>Web Platform</li> <li>Online editor</li> <li>Collaborative features</li> <li>Real-time sharing</li> <li> <p>Cloud storage</p> </li> <li> <p>Mobile Support</p> </li> <li>Mobile app</li> <li>Offline capabilities</li> <li>Sync functionality</li> <li>Touch-optimized interface</li> </ul>"},{"location":"about/roadmap/#ecosystem-development","title":"Ecosystem Development","text":"<ul> <li>Plugin System</li> <li>Custom transpilers</li> <li>Legal extensions</li> <li>Third-party integrations</li> <li> <p>Community contributions</p> </li> <li> <p>Legal Community</p> </li> <li>Legal expert network</li> <li>Knowledge sharing</li> <li>Collaborative development</li> <li>Legal education</li> </ul>"},{"location":"about/roadmap/#technical-roadmap","title":"Technical Roadmap","text":""},{"location":"about/roadmap/#architecture-improvements","title":"Architecture Improvements","text":"<ul> <li>Modular Architecture</li> <li>Plugin system</li> <li>Extensible transpilers</li> <li>Custom analyzers</li> <li> <p>Third-party integrations</p> </li> <li> <p>Performance Optimization</p> </li> <li>Incremental compilation</li> <li>Parallel processing</li> <li>Memory management</li> <li>Caching strategies</li> </ul>"},{"location":"about/roadmap/#language-evolution","title":"Language Evolution","text":"<ul> <li>Syntax Enhancements</li> <li>More expressive syntax</li> <li>Better error handling</li> <li>Improved readability</li> <li> <p>Legal-specific constructs</p> </li> <li> <p>Type System</p> </li> <li>Advanced type checking</li> <li>Type inference</li> <li>Generic programming</li> <li>Dependent types</li> </ul>"},{"location":"about/roadmap/#tooling-improvements","title":"Tooling Improvements","text":"<ul> <li>Development Tools</li> <li>Better debugging</li> <li>Profiling tools</li> <li>Performance monitoring</li> <li> <p>Error analysis</p> </li> <li> <p>Integration Tools</p> </li> <li>CI/CD support</li> <li>Version control</li> <li>Collaboration tools</li> <li>Deployment automation</li> </ul>"},{"location":"about/roadmap/#legal-roadmap","title":"Legal Roadmap","text":""},{"location":"about/roadmap/#legal-accuracy","title":"Legal Accuracy","text":"<ul> <li>Legal Validation</li> <li>Automated accuracy checking</li> <li>Legal expert review</li> <li>Statute compliance</li> <li> <p>Case law integration</p> </li> <li> <p>Legal Education</p> </li> <li>Tutorial content</li> <li>Legal case studies</li> <li>Best practices</li> <li>Expert guidance</li> </ul>"},{"location":"about/roadmap/#legal-applications","title":"Legal Applications","text":"<ul> <li>Legal Practice</li> <li>Document automation</li> <li>Legal research</li> <li>Case analysis</li> <li> <p>Compliance checking</p> </li> <li> <p>Legal Education</p> </li> <li>Student tools</li> <li>Interactive learning</li> <li>Assessment tools</li> <li>Knowledge sharing</li> </ul>"},{"location":"about/roadmap/#community-roadmap","title":"Community Roadmap","text":""},{"location":"about/roadmap/#community-building","title":"Community Building","text":"<ul> <li>Developer Community</li> <li>Contributor guidelines</li> <li>Code of conduct</li> <li>Mentorship program</li> <li> <p>Recognition system</p> </li> <li> <p>Legal Community</p> </li> <li>Legal expert network</li> <li>Knowledge sharing</li> <li>Collaborative projects</li> <li>Legal education</li> </ul>"},{"location":"about/roadmap/#open-source","title":"Open Source","text":"<ul> <li>Open Source Development</li> <li>Transparent development</li> <li>Community contributions</li> <li>Open governance</li> <li> <p>Public roadmap</p> </li> <li> <p>Legal Open Source</p> </li> <li>Legal knowledge sharing</li> <li>Open legal resources</li> <li>Collaborative legal tools</li> <li>Legal education materials</li> </ul>"},{"location":"about/roadmap/#research-areas","title":"Research Areas","text":""},{"location":"about/roadmap/#legal-technology","title":"Legal Technology","text":"<ul> <li>Legal AI</li> <li>Natural language processing</li> <li>Legal reasoning</li> <li>Document analysis</li> <li> <p>Knowledge extraction</p> </li> <li> <p>Legal Semantics</p> </li> <li>Legal logic formalization</li> <li>Legal reasoning patterns</li> <li>Legal knowledge representation</li> <li>Legal argumentation</li> </ul>"},{"location":"about/roadmap/#language-design","title":"Language Design","text":"<ul> <li>Domain-Specific Languages</li> <li>Legal DSL design</li> <li>Legal syntax patterns</li> <li>Legal semantics</li> <li> <p>Legal pragmatics</p> </li> <li> <p>Formal Methods</p> </li> <li>Legal logic verification</li> <li>Legal consistency checking</li> <li>Legal completeness</li> <li>Legal soundness</li> </ul>"},{"location":"about/roadmap/#implementation-timeline","title":"Implementation Timeline","text":""},{"location":"about/roadmap/#phase-1-foundation-q1-2024","title":"Phase 1: Foundation (Q1 2024)","text":"<ul> <li>Core language improvements</li> <li>Basic legal validation</li> <li>Enhanced documentation</li> <li>Developer tools</li> </ul>"},{"location":"about/roadmap/#phase-2-expansion-q2-q3-2024","title":"Phase 2: Expansion (Q2-Q3 2024)","text":"<ul> <li>Advanced features</li> <li>Legal integration</li> <li>Performance optimization</li> <li>Community building</li> </ul>"},{"location":"about/roadmap/#phase-3-innovation-q4-2024","title":"Phase 3: Innovation (Q4 2024+)","text":"<ul> <li>AI integration</li> <li>Advanced legal features</li> <li>Platform expansion</li> <li>Ecosystem development</li> </ul>"},{"location":"about/roadmap/#success-metrics","title":"Success Metrics","text":""},{"location":"about/roadmap/#technical-metrics","title":"Technical Metrics","text":"<ul> <li>Performance: Parse time &lt; 100ms for typical files</li> <li>Reliability: 99.9% uptime for online tools</li> <li>Coverage: 90% test coverage</li> <li>Documentation: 100% API documentation</li> </ul>"},{"location":"about/roadmap/#legal-metrics","title":"Legal Metrics","text":"<ul> <li>Accuracy: 95% legal accuracy in examples</li> <li>Validation: 100% legal validation coverage</li> <li>Expert Review: Legal expert approval</li> <li>Compliance: Full legal compliance</li> </ul>"},{"location":"about/roadmap/#community-metrics","title":"Community Metrics","text":"<ul> <li>Contributors: 50+ active contributors</li> <li>Users: 1000+ active users</li> <li>Legal Experts: 20+ legal experts</li> <li>Adoption: 100+ legal institutions</li> </ul>"},{"location":"about/roadmap/#feedback-and-contributions","title":"Feedback and Contributions","text":""},{"location":"about/roadmap/#community-input","title":"Community Input","text":"<ul> <li>Feature Requests: GitHub issues</li> <li>Bug Reports: GitHub issues</li> <li>Legal Feedback: Legal expert review</li> <li>User Feedback: User surveys</li> </ul>"},{"location":"about/roadmap/#contribution-opportunities","title":"Contribution Opportunities","text":"<ul> <li>Code Contributions: Pull requests</li> <li>Documentation: Documentation improvements</li> <li>Legal Examples: Legal case studies</li> <li>Testing: Test case development</li> </ul>"},{"location":"about/roadmap/#conclusion","title":"Conclusion","text":"<p>This roadmap represents our vision for Yuho's future development. We are committed to creating a powerful, accurate, and user-friendly tool for legal reasoning and education.</p> <p>The roadmap is a living document that evolves based on community feedback, legal requirements, and technological advances. We welcome input from the community to help shape Yuho's future.</p>"},{"location":"about/roadmap/#next-steps","title":"Next Steps","text":"<ul> <li>Changelog - Recent changes and updates</li> <li>License - Legal terms and conditions</li> <li>Contributing - How to contribute</li> <li>Development - Development guidelines</li> </ul>"},{"location":"api/ast/","title":"AST API","text":"<p>The Yuho Abstract Syntax Tree (AST) represents the parsed structure of Yuho code.</p>"},{"location":"api/ast/#overview","title":"Overview","text":"<p>The AST provides:</p> <ul> <li>Program Structure - Complete program representation</li> <li>Type Safety - Strongly typed nodes</li> <li>Traversal - Easy navigation of code structure</li> <li>Transformation - Code modification and generation</li> </ul>"},{"location":"api/ast/#ast-node-types","title":"AST Node Types","text":""},{"location":"api/ast/#base-node","title":"Base Node","text":"<pre><code>@dataclass\nclass ASTNode:\n    \"\"\"Base class for all AST nodes\"\"\"\n    pass\n</code></pre>"},{"location":"api/ast/#program-structure","title":"Program Structure","text":"<pre><code>@dataclass\nclass Program(ASTNode):\n    \"\"\"Root AST node representing a complete Yuho program\"\"\"\n    statements: List[ASTNode]\n\n@dataclass\nclass ImportStatement(ASTNode):\n    \"\"\"Import statement: referencing StructName from module_name\"\"\"\n    struct_name: str\n    module_name: str\n</code></pre>"},{"location":"api/ast/#type-definitions","title":"Type Definitions","text":"<pre><code>@dataclass\nclass TypeNode(ASTNode):\n    \"\"\"Type annotation node\"\"\"\n    type_name: Union[YuhoType, str]\n\n@dataclass\nclass QualifiedIdentifier(ASTNode):\n    \"\"\"Qualified identifier like module.StructName\"\"\"\n    parts: List[str]\n\n    def __str__(self):\n        return \".\".join(self.parts)\n</code></pre>"},{"location":"api/ast/#expressions","title":"Expressions","text":"<pre><code>@dataclass\nclass Expression(ASTNode):\n    \"\"\"Base class for all expressions\"\"\"\n    pass\n\n@dataclass\nclass Literal(Expression):\n    \"\"\"Literal value expression\"\"\"\n    value: Any\n    literal_type: YuhoType\n\n@dataclass\nclass Identifier(Expression):\n    \"\"\"Variable or function identifier\"\"\"\n    name: str\n\n@dataclass\nclass BinaryOperation(Expression):\n    \"\"\"Binary operation expression\"\"\"\n    left: Expression\n    operator: Operator\n    right: Expression\n\n@dataclass\nclass UnaryOperation(Expression):\n    \"\"\"Unary operation expression\"\"\"\n    operator: str\n    operand: Expression\n</code></pre>"},{"location":"api/ast/#statements","title":"Statements","text":"<pre><code>@dataclass\nclass Statement(ASTNode):\n    \"\"\"Base class for all statements\"\"\"\n    pass\n\n@dataclass\nclass Declaration(Statement):\n    \"\"\"Variable declaration\"\"\"\n    type_node: TypeNode\n    name: str\n    value: Optional[Expression] = None\n\n@dataclass\nclass Assignment(Statement):\n    \"\"\"Variable assignment\"\"\"\n    name: str\n    value: Expression\n\n@dataclass\nclass PassStatement(Statement):\n    \"\"\"Pass statement (no-op)\"\"\"\n    pass\n</code></pre>"},{"location":"api/ast/#structures","title":"Structures","text":"<pre><code>@dataclass\nclass StructMember(ASTNode):\n    \"\"\"Member of a struct definition\"\"\"\n    type_node: TypeNode\n    name: str\n\n@dataclass\nclass StructDefinition(Statement):\n    \"\"\"Struct definition\"\"\"\n    name: str\n    members: List[StructMember]\n\n@dataclass\nclass StructInstantiation(Expression):\n    \"\"\"Struct instantiation with field assignments\"\"\"\n    struct_type: QualifiedIdentifier\n    name: str\n    fields: List['FieldAssignment']\n\n@dataclass\nclass FieldAssignment(ASTNode):\n    \"\"\"Field assignment in struct instantiation\"\"\"\n    field_name: str\n    value: Expression\n</code></pre>"},{"location":"api/ast/#control-structures","title":"Control Structures","text":"<pre><code>@dataclass\nclass CaseClause(ASTNode):\n    \"\"\"Case clause in match statement\"\"\"\n    condition: Optional[Expression]  # None for wildcard (_)\n    consequence: Expression\n\n@dataclass\nclass MatchCase(Statement):\n    \"\"\"Match-case control structure\"\"\"\n    expression: Optional[Expression]  # None for bare match {}\n    cases: List[CaseClause]\n</code></pre>"},{"location":"api/ast/#functions","title":"Functions","text":"<pre><code>@dataclass\nclass Parameter(ASTNode):\n    \"\"\"Function parameter\"\"\"\n    type_node: TypeNode\n    name: str\n\n@dataclass\nclass FunctionDefinition(Statement):\n    \"\"\"Function definition\"\"\"\n    name: str\n    parameters: List[Parameter]\n    return_type: TypeNode\n    body: List[Statement]\n\n@dataclass\nclass FunctionCall(Expression):\n    \"\"\"Function call expression\"\"\"\n    name: str\n    arguments: List[Expression]\n</code></pre>"},{"location":"api/ast/#type-system","title":"Type System","text":""},{"location":"api/ast/#yuho-types","title":"Yuho Types","text":"<pre><code>class YuhoType(Enum):\n    INT = \"int\"\n    FLOAT = \"float\"\n    PERCENT = \"percent\"\n    MONEY = \"money\"\n    DATE = \"date\"\n    DURATION = \"duration\"\n    BOOL = \"bool\"\n    STRING = \"string\"\n    CUSTOM = \"custom\"\n</code></pre>"},{"location":"api/ast/#operators","title":"Operators","text":"<pre><code>class Operator(Enum):\n    PLUS = \"+\"\n    MINUS = \"-\"\n    MULT = \"*\"\n    DIV = \"/\"\n    EQUAL = \"==\"\n    NOTEQUAL = \"!=\"\n    GT = \"&gt;\"\n    LT = \"&lt;\"\n    AND = \"&amp;&amp;\"\n    OR = \"||\"\n</code></pre>"},{"location":"api/ast/#ast-construction","title":"AST Construction","text":""},{"location":"api/ast/#basic-construction","title":"Basic Construction","text":"<pre><code>from yuho_v3.ast_nodes import *\n\n# Create a simple struct\nstruct_def = StructDefinition(\n    name=\"Person\",\n    members=[\n        StructMember(\n            type_node=TypeNode(type_name=YuhoType.STRING),\n            name=\"name\"\n        ),\n        StructMember(\n            type_node=TypeNode(type_name=YuhoType.INT),\n            name=\"age\"\n        )\n    ]\n)\n\n# Create a program\nprogram = Program(statements=[struct_def])\n</code></pre>"},{"location":"api/ast/#complex-construction","title":"Complex Construction","text":"<pre><code># Create a match-case statement\nmatch_case = MatchCase(\n    expression=None,\n    cases=[\n        CaseClause(\n            condition=BinaryOperation(\n                left=Identifier(name=\"deception\"),\n                operator=Operator.AND,\n                right=Identifier(name=\"dishonest\")\n            ),\n            consequence=Literal(\n                value=\"guilty\",\n                literal_type=YuhoType.STRING\n            )\n        ),\n        CaseClause(\n            condition=None,  # Default case\n            consequence=Literal(\n                value=\"not guilty\",\n                literal_type=YuhoType.STRING\n            )\n        )\n    ]\n)\n\n# Add to program\nprogram.statements.append(match_case)\n</code></pre>"},{"location":"api/ast/#ast-traversal","title":"AST Traversal","text":""},{"location":"api/ast/#visitor-pattern","title":"Visitor Pattern","text":"<pre><code>class ASTVisitor:\n    \"\"\"Base visitor for AST traversal\"\"\"\n\n    def visit(self, node: ASTNode):\n        \"\"\"Visit a node\"\"\"\n        method_name = f\"visit_{type(node).__name__}\"\n        method = getattr(self, method_name, self.generic_visit)\n        return method(node)\n\n    def generic_visit(self, node: ASTNode):\n        \"\"\"Generic visit method\"\"\"\n        for field in node.__dataclass_fields__:\n            value = getattr(node, field)\n            if isinstance(value, ASTNode):\n                self.visit(value)\n            elif isinstance(value, list):\n                for item in value:\n                    if isinstance(item, ASTNode):\n                        self.visit(item)\n</code></pre>"},{"location":"api/ast/#custom-visitors","title":"Custom Visitors","text":"<pre><code>class PrintVisitor(ASTVisitor):\n    \"\"\"Visitor that prints AST structure\"\"\"\n\n    def visit_Program(self, node: Program):\n        print(\"Program:\")\n        for stmt in node.statements:\n            self.visit(stmt)\n\n    def visit_StructDefinition(self, node: StructDefinition):\n        print(f\"  Struct: {node.name}\")\n        for member in node.members:\n            print(f\"    {member.name}: {member.type_node.type_name}\")\n\n    def visit_MatchCase(self, node: MatchCase):\n        print(\"  Match:\")\n        for case in node.cases:\n            if case.condition:\n                print(f\"    Case: {case.condition}\")\n            else:\n                print(\"    Default case\")\n            print(f\"    Consequence: {case.consequence}\")\n</code></pre>"},{"location":"api/ast/#transformation-visitors","title":"Transformation Visitors","text":"<pre><code>class TransformVisitor(ASTVisitor):\n    \"\"\"Visitor that transforms AST\"\"\"\n\n    def visit_StructDefinition(self, node: StructDefinition):\n        \"\"\"Transform struct definition\"\"\"\n        # Add validation to struct\n        validation = self._create_validation(node)\n        return [node, validation]\n\n    def _create_validation(self, struct: StructDefinition):\n        \"\"\"Create validation for struct\"\"\"\n        # Implementation\n        pass\n</code></pre>"},{"location":"api/ast/#ast-analysis","title":"AST Analysis","text":""},{"location":"api/ast/#type-analysis","title":"Type Analysis","text":"<pre><code>class TypeAnalyzer(ASTVisitor):\n    \"\"\"Analyze types in AST\"\"\"\n\n    def __init__(self):\n        self.symbol_table = {}\n\n    def visit_Declaration(self, node: Declaration):\n        \"\"\"Analyze variable declaration\"\"\"\n        self.symbol_table[node.name] = node.type_node.type_name\n\n    def visit_Identifier(self, node: Identifier):\n        \"\"\"Analyze identifier usage\"\"\"\n        if node.name in self.symbol_table:\n            return self.symbol_table[node.name]\n        else:\n            raise SemanticError(f\"Undefined variable: {node.name}\")\n</code></pre>"},{"location":"api/ast/#semantic-analysis","title":"Semantic Analysis","text":"<pre><code>class SemanticAnalyzer(ASTVisitor):\n    \"\"\"Perform semantic analysis\"\"\"\n\n    def __init__(self):\n        self.errors = []\n\n    def visit_MatchCase(self, node: MatchCase):\n        \"\"\"Analyze match-case completeness\"\"\"\n        has_default = any(case.condition is None for case in node.cases)\n        if not has_default:\n            self.errors.append(\"Match-case must have default case\")\n\n    def visit_StructDefinition(self, node: StructDefinition):\n        \"\"\"Analyze struct definition\"\"\"\n        if not node.members:\n            self.errors.append(\"Struct must have at least one member\")\n</code></pre>"},{"location":"api/ast/#ast-generation","title":"AST Generation","text":""},{"location":"api/ast/#from-parser","title":"From Parser","text":"<pre><code>from yuho_v3.parser import YuhoParser\n\n# Parse source code\nparser = YuhoParser()\nast = parser.parse(\"\"\"\nstruct Person {\n    string name,\n    int age\n}\n\nmatch {\n    case age &gt;= 18 := consequence \"adult\";\n    case _ := consequence \"minor\";\n}\n\"\"\")\n\n# Access AST nodes\nprint(f\"Program has {len(ast.statements)} statements\")\nfor stmt in ast.statements:\n    print(f\"  {type(stmt).__name__}\")\n</code></pre>"},{"location":"api/ast/#manual-construction","title":"Manual Construction","text":"<pre><code># Create AST manually\nprogram = Program(statements=[\n    StructDefinition(\n        name=\"Person\",\n        members=[\n            StructMember(\n                type_node=TypeNode(type_name=YuhoType.STRING),\n                name=\"name\"\n            ),\n            StructMember(\n                type_node=TypeNode(type_name=YuhoType.INT),\n                name=\"age\"\n            )\n        ]\n    ),\n    MatchCase(\n        expression=None,\n        cases=[\n            CaseClause(\n                condition=BinaryOperation(\n                    left=Identifier(name=\"age\"),\n                    operator=Operator.GT,\n                    right=Literal(value=18, literal_type=YuhoType.INT)\n                ),\n                consequence=Literal(value=\"adult\", literal_type=YuhoType.STRING)\n            ),\n            CaseClause(\n                condition=None,\n                consequence=Literal(value=\"minor\", literal_type=YuhoType.STRING)\n            )\n        ]\n    )\n])\n</code></pre>"},{"location":"api/ast/#ast-serialization","title":"AST Serialization","text":""},{"location":"api/ast/#json-serialization","title":"JSON Serialization","text":"<pre><code>import json\nfrom dataclasses import asdict\n\ndef ast_to_json(ast: Program) -&gt; str:\n    \"\"\"Convert AST to JSON\"\"\"\n    return json.dumps(asdict(ast), indent=2)\n\ndef json_to_ast(json_str: str) -&gt; Program:\n    \"\"\"Convert JSON to AST\"\"\"\n    data = json.loads(json_str)\n    return Program(**data)\n</code></pre>"},{"location":"api/ast/#pickle-serialization","title":"Pickle Serialization","text":"<pre><code>import pickle\n\ndef save_ast(ast: Program, filename: str):\n    \"\"\"Save AST to file\"\"\"\n    with open(filename, 'wb') as f:\n        pickle.dump(ast, f)\n\ndef load_ast(filename: str) -&gt; Program:\n    \"\"\"Load AST from file\"\"\"\n    with open(filename, 'rb') as f:\n        return pickle.load(f)\n</code></pre>"},{"location":"api/ast/#ast-validation","title":"AST Validation","text":""},{"location":"api/ast/#structure-validation","title":"Structure Validation","text":"<pre><code>class ASTValidator:\n    \"\"\"Validate AST structure\"\"\"\n\n    def validate(self, ast: Program) -&gt; List[str]:\n        \"\"\"Validate AST and return errors\"\"\"\n        errors = []\n\n        for stmt in ast.statements:\n            if isinstance(stmt, StructDefinition):\n                errors.extend(self._validate_struct(stmt))\n            elif isinstance(stmt, MatchCase):\n                errors.extend(self._validate_match_case(stmt))\n\n        return errors\n\n    def _validate_struct(self, struct: StructDefinition) -&gt; List[str]:\n        \"\"\"Validate struct definition\"\"\"\n        errors = []\n\n        if not struct.name:\n            errors.append(\"Struct must have a name\")\n\n        if not struct.members:\n            errors.append(\"Struct must have at least one member\")\n\n        return errors\n\n    def _validate_match_case(self, match: MatchCase) -&gt; List[str]:\n        \"\"\"Validate match-case statement\"\"\"\n        errors = []\n\n        if not match.cases:\n            errors.append(\"Match-case must have at least one case\")\n\n        has_default = any(case.condition is None for case in match.cases)\n        if not has_default:\n            errors.append(\"Match-case must have default case\")\n\n        return errors\n</code></pre>"},{"location":"api/ast/#ast-transformation","title":"AST Transformation","text":""},{"location":"api/ast/#code-generation","title":"Code Generation","text":"<pre><code>class CodeGenerator(ASTVisitor):\n    \"\"\"Generate code from AST\"\"\"\n\n    def visit_Program(self, node: Program) -&gt; str:\n        \"\"\"Generate program code\"\"\"\n        lines = []\n        for stmt in node.statements:\n            lines.append(self.visit(stmt))\n        return \"\\n\".join(lines)\n\n    def visit_StructDefinition(self, node: StructDefinition) -&gt; str:\n        \"\"\"Generate struct code\"\"\"\n        lines = [f\"struct {node.name} {{\"]\n        for member in node.members:\n            lines.append(f\"    {member.type_node.type_name} {member.name},\")\n        lines.append(\"}\")\n        return \"\\n\".join(lines)\n\n    def visit_MatchCase(self, node: MatchCase) -&gt; str:\n        \"\"\"Generate match-case code\"\"\"\n        lines = [\"match {\"]\n        for case in node.cases:\n            if case.condition:\n                lines.append(f\"    case {case.condition} := consequence {case.consequence};\")\n            else:\n                lines.append(f\"    case _ := consequence {case.consequence};\")\n        lines.append(\"}\")\n        return \"\\n\".join(lines)\n</code></pre>"},{"location":"api/ast/#optimization","title":"Optimization","text":"<pre><code>class ASTOptimizer(ASTVisitor):\n    \"\"\"Optimize AST\"\"\"\n\n    def visit_BinaryOperation(self, node: BinaryOperation) -&gt; Expression:\n        \"\"\"Optimize binary operations\"\"\"\n        if isinstance(node.left, Literal) and isinstance(node.right, Literal):\n            # Constant folding\n            return self._fold_constants(node)\n        return node\n\n    def _fold_constants(self, node: BinaryOperation) -&gt; Literal:\n        \"\"\"Fold constant expressions\"\"\"\n        # Implementation\n        pass\n</code></pre>"},{"location":"api/ast/#testing","title":"Testing","text":""},{"location":"api/ast/#unit-tests","title":"Unit Tests","text":"<pre><code>def test_ast_construction():\n    \"\"\"Test AST construction\"\"\"\n    struct = StructDefinition(\n        name=\"Person\",\n        members=[\n            StructMember(\n                type_node=TypeNode(type_name=YuhoType.STRING),\n                name=\"name\"\n            )\n        ]\n    )\n\n    assert struct.name == \"Person\"\n    assert len(struct.members) == 1\n    assert struct.members[0].name == \"name\"\n</code></pre>"},{"location":"api/ast/#integration-tests","title":"Integration Tests","text":"<pre><code>def test_ast_parsing():\n    \"\"\"Test AST parsing\"\"\"\n    parser = YuhoParser()\n    ast = parser.parse(\"struct Person { string name }\")\n\n    assert isinstance(ast, Program)\n    assert len(ast.statements) == 1\n    assert isinstance(ast.statements[0], StructDefinition)\n</code></pre>"},{"location":"api/ast/#performance-tests","title":"Performance Tests","text":"<pre><code>def test_ast_performance():\n    \"\"\"Test AST performance\"\"\"\n    parser = YuhoParser()\n    code = \"struct Person { string name, int age }\" * 100\n\n    start_time = time.time()\n    ast = parser.parse(code)\n    end_time = time.time()\n\n    assert (end_time - start_time) &lt; 1.0\n</code></pre>"},{"location":"api/ast/#best-practices","title":"Best Practices","text":""},{"location":"api/ast/#ast-design","title":"AST Design","text":"<ul> <li>Use dataclasses for all nodes</li> <li>Include type hints for all fields</li> <li>Use enums for constants</li> <li>Keep nodes immutable</li> </ul>"},{"location":"api/ast/#traversal","title":"Traversal","text":"<ul> <li>Use visitor pattern for traversal</li> <li>Separate concerns in different visitors</li> <li>Handle errors gracefully</li> <li>Optimize for performance</li> </ul>"},{"location":"api/ast/#validation","title":"Validation","text":"<ul> <li>Validate AST structure</li> <li>Check semantic correctness</li> <li>Ensure completeness</li> <li>Handle edge cases</li> </ul>"},{"location":"api/ast/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/ast/#common-issues","title":"Common Issues","text":""},{"location":"api/ast/#issue-1-circular-references","title":"Issue 1: Circular References","text":"<pre><code># Problem: Circular references in AST\nstruct_a = StructDefinition(name=\"A\", members=[])\nstruct_b = StructDefinition(name=\"B\", members=[])\nstruct_a.members.append(StructMember(type_node=TypeNode(type_name=\"B\"), name=\"b\"))\nstruct_b.members.append(StructMember(type_node=TypeNode(type_name=\"A\"), name=\"a\"))\n</code></pre> <p>Solution: Use weak references or separate type system:</p> <pre><code># Use string references instead of direct references\nstruct_a.members.append(StructMember(type_node=TypeNode(type_name=\"B\"), name=\"b\"))\n</code></pre>"},{"location":"api/ast/#issue-2-memory-usage","title":"Issue 2: Memory Usage","text":"<pre><code># Problem: High memory usage with large ASTs\nast = parser.parse(large_source)\n# Memory usage too high\n</code></pre> <p>Solution: Use streaming or lazy evaluation:</p> <pre><code>class LazyAST:\n    \"\"\"Lazy AST evaluation\"\"\"\n\n    def __init__(self, source: str):\n        self.source = source\n        self._ast = None\n\n    @property\n    def ast(self):\n        if self._ast is None:\n            self._ast = parser.parse(self.source)\n        return self._ast\n</code></pre>"},{"location":"api/ast/#issue-3-type-safety","title":"Issue 3: Type Safety","text":"<pre><code># Problem: Type errors in AST\nnode = StructDefinition(name=\"Person\", members=\"invalid\")\n# TypeError: members must be List[StructMember]\n</code></pre> <p>Solution: Use type hints and validation:</p> <pre><code>@dataclass\nclass StructDefinition(Statement):\n    name: str\n    members: List[StructMember]  # Type hint\n\n    def __post_init__(self):\n        if not isinstance(self.members, list):\n            raise TypeError(\"members must be a list\")\n</code></pre>"},{"location":"api/ast/#next-steps","title":"Next Steps","text":"<ul> <li>Lexer API - Tokenization</li> <li>Parser API - Parsing tokens into AST</li> <li>Semantic API - Semantic analysis</li> <li>Transpilers API - Code generation</li> </ul>"},{"location":"api/lexer/","title":"Lexer API","text":"<p>The Yuho lexer tokenizes source code into a stream of tokens for parsing.</p>"},{"location":"api/lexer/#overview","title":"Overview","text":"<p>The lexer is responsible for:</p> <ul> <li>Tokenization - Converting source code to tokens</li> <li>Token Classification - Identifying token types</li> <li>Error Detection - Finding lexical errors</li> <li>Position Tracking - Recording token positions</li> </ul>"},{"location":"api/lexer/#basic-usage","title":"Basic Usage","text":"<pre><code>from yuho_v3.lexer import YuhoLexer\n\n# Create lexer instance\nlexer = YuhoLexer()\n\n# Tokenize source code\ntokens = lexer.tokenize(\"struct Person { string name, int age }\")\n\n# Process tokens\nfor token in tokens:\n    print(f\"{token.type}: {token.value}\")\n</code></pre>"},{"location":"api/lexer/#token-types","title":"Token Types","text":""},{"location":"api/lexer/#keywords","title":"Keywords","text":"<pre><code># Legal keywords\nKEYWORDS = {\n    'struct', 'match', 'case', 'consequence', 'func',\n    'true', 'false', 'pass', 'referencing', 'from'\n}\n\n# Type keywords\nTYPE_KEYWORDS = {\n    'int', 'float', 'bool', 'string', 'money', 'date',\n    'duration', 'percent'\n}\n</code></pre>"},{"location":"api/lexer/#operators","title":"Operators","text":"<pre><code># Arithmetic operators\nARITHMETIC_OPERATORS = {\n    '+', '-', '*', '/', '//', '%'\n}\n\n# Comparison operators\nCOMPARISON_OPERATORS = {\n    '==', '!=', '&gt;', '&lt;', '&gt;=', '&lt;='\n}\n\n# Logical operators\nLOGICAL_OPERATORS = {\n    'and', 'or', 'not', '&amp;&amp;', '||', '!'\n}\n</code></pre>"},{"location":"api/lexer/#literals","title":"Literals","text":"<pre><code># String literals\nSTRING_LITERAL = r'\"[^\"]*\"'\n\n# Integer literals\nINTEGER_LITERAL = r'\\d+'\n\n# Float literals\nFLOAT_LITERAL = r'\\d+\\.\\d+'\n\n# Boolean literals\nBOOLEAN_LITERAL = r'true|false'\n\n# Money literals\nMONEY_LITERAL = r'\\$\\d+(,\\d{3})*(\\.\\d{2})?'\n\n# Date literals\nDATE_LITERAL = r'\\d{2}-\\d{2}-\\d{4}'\n</code></pre>"},{"location":"api/lexer/#token-structure","title":"Token Structure","text":""},{"location":"api/lexer/#token-class","title":"Token Class","text":"<pre><code>@dataclass\nclass Token:\n    type: str\n    value: str\n    line: int\n    column: int\n    position: int\n</code></pre>"},{"location":"api/lexer/#token-properties","title":"Token Properties","text":"<ul> <li>type - Token type (keyword, identifier, literal, etc.)</li> <li>value - Token value as string</li> <li>line - Line number in source</li> <li>column - Column number in source</li> <li>position - Character position in source</li> </ul>"},{"location":"api/lexer/#lexer-implementation","title":"Lexer Implementation","text":""},{"location":"api/lexer/#basic-lexer-class","title":"Basic Lexer Class","text":"<pre><code>class YuhoLexer:\n    \"\"\"Yuho language lexer\"\"\"\n\n    def __init__(self):\n        self.tokens = []\n        self.position = 0\n        self.line = 1\n        self.column = 1\n\n    def tokenize(self, source: str) -&gt; List[Token]:\n        \"\"\"Tokenize source code\"\"\"\n        self.tokens = []\n        self.position = 0\n        self.line = 1\n        self.column = 1\n\n        while self.position &lt; len(source):\n            self._skip_whitespace()\n            if self.position &gt;= len(source):\n                break\n\n            token = self._next_token()\n            if token:\n                self.tokens.append(token)\n\n        return self.tokens\n</code></pre>"},{"location":"api/lexer/#token-recognition","title":"Token Recognition","text":"<pre><code>def _next_token(self) -&gt; Optional[Token]:\n    \"\"\"Get next token from source\"\"\"\n    char = self._current_char()\n\n    # Keywords and identifiers\n    if char.isalpha() or char == '_':\n        return self._read_identifier()\n\n    # String literals\n    elif char == '\"':\n        return self._read_string()\n\n    # Numeric literals\n    elif char.isdigit():\n        return self._read_number()\n\n    # Money literals\n    elif char == '$':\n        return self._read_money()\n\n    # Operators\n    elif char in OPERATORS:\n        return self._read_operator()\n\n    # Punctuation\n    elif char in PUNCTUATION:\n        return self._read_punctuation()\n\n    else:\n        raise LexerError(f\"Unexpected character: {char}\")\n</code></pre>"},{"location":"api/lexer/#identifier-recognition","title":"Identifier Recognition","text":"<pre><code>def _read_identifier(self) -&gt; Token:\n    \"\"\"Read identifier or keyword\"\"\"\n    start = self.position\n    while self._current_char() and (self._current_char().isalnum() or self._current_char() == '_'):\n        self._advance()\n\n    value = self.source[start:self.position]\n    token_type = 'KEYWORD' if value in KEYWORDS else 'IDENTIFIER'\n\n    return Token(\n        type=token_type,\n        value=value,\n        line=self.line,\n        column=self.column - len(value),\n        position=start\n    )\n</code></pre>"},{"location":"api/lexer/#string-recognition","title":"String Recognition","text":"<pre><code>def _read_string(self) -&gt; Token:\n    \"\"\"Read string literal\"\"\"\n    start = self.position\n    self._advance()  # Skip opening quote\n\n    while self._current_char() and self._current_char() != '\"':\n        if self._current_char() == '\\\\':\n            self._advance()  # Skip escape character\n        self._advance()\n\n    if not self._current_char():\n        raise LexerError(\"Unterminated string literal\")\n\n    self._advance()  # Skip closing quote\n\n    value = self.source[start:self.position]\n\n    return Token(\n        type='STRING_LITERAL',\n        value=value,\n        line=self.line,\n        column=self.column - len(value),\n        position=start\n    )\n</code></pre>"},{"location":"api/lexer/#number-recognition","title":"Number Recognition","text":"<pre><code>def _read_number(self) -&gt; Token:\n    \"\"\"Read numeric literal\"\"\"\n    start = self.position\n\n    # Read integer part\n    while self._current_char() and self._current_char().isdigit():\n        self._advance()\n\n    # Check for decimal point\n    if self._current_char() == '.':\n        self._advance()\n        while self._current_char() and self._current_char().isdigit():\n            self._advance()\n        token_type = 'FLOAT_LITERAL'\n    else:\n        token_type = 'INTEGER_LITERAL'\n\n    value = self.source[start:self.position]\n\n    return Token(\n        type=token_type,\n        value=value,\n        line=self.line,\n        column=self.column - len(value),\n        position=start\n    )\n</code></pre>"},{"location":"api/lexer/#error-handling","title":"Error Handling","text":""},{"location":"api/lexer/#lexer-errors","title":"Lexer Errors","text":"<pre><code>class LexerError(Exception):\n    \"\"\"Lexer error exception\"\"\"\n\n    def __init__(self, message: str, line: int = 0, column: int = 0):\n        self.message = message\n        self.line = line\n        self.column = column\n        super().__init__(f\"{message} at line {line}, column {column}\")\n</code></pre>"},{"location":"api/lexer/#error-detection","title":"Error Detection","text":"<pre><code>def _validate_token(self, token: Token) -&gt; None:\n    \"\"\"Validate token for errors\"\"\"\n    if token.type == 'STRING_LITERAL':\n        if not token.value.startswith('\"') or not token.value.endswith('\"'):\n            raise LexerError(\"Invalid string literal\", token.line, token.column)\n\n    elif token.type == 'MONEY_LITERAL':\n        if not token.value.startswith('$'):\n            raise LexerError(\"Invalid money literal\", token.line, token.column)\n\n    elif token.type == 'DATE_LITERAL':\n        if not self._is_valid_date(token.value):\n            raise LexerError(\"Invalid date literal\", token.line, token.column)\n</code></pre>"},{"location":"api/lexer/#advanced-features","title":"Advanced Features","text":""},{"location":"api/lexer/#position-tracking","title":"Position Tracking","text":"<pre><code>def _advance(self) -&gt; None:\n    \"\"\"Advance to next character\"\"\"\n    if self._current_char() == '\\n':\n        self.line += 1\n        self.column = 1\n    else:\n        self.column += 1\n\n    self.position += 1\n\ndef _current_char(self) -&gt; Optional[str]:\n    \"\"\"Get current character\"\"\"\n    if self.position &gt;= len(self.source):\n        return None\n    return self.source[self.position]\n</code></pre>"},{"location":"api/lexer/#whitespace-handling","title":"Whitespace Handling","text":"<pre><code>def _skip_whitespace(self) -&gt; None:\n    \"\"\"Skip whitespace characters\"\"\"\n    while self._current_char() and self._current_char().isspace():\n        self._advance()\n</code></pre>"},{"location":"api/lexer/#comment-handling","title":"Comment Handling","text":"<pre><code>def _skip_comment(self) -&gt; None:\n    \"\"\"Skip comment until end of line\"\"\"\n    while self._current_char() and self._current_char() != '\\n':\n        self._advance()\n</code></pre>"},{"location":"api/lexer/#usage-examples","title":"Usage Examples","text":""},{"location":"api/lexer/#basic-tokenization","title":"Basic Tokenization","text":"<pre><code>from yuho_v3.lexer import YuhoLexer\n\n# Create lexer\nlexer = YuhoLexer()\n\n# Tokenize simple code\ncode = \"struct Person { string name, int age }\"\ntokens = lexer.tokenize(code)\n\n# Print tokens\nfor token in tokens:\n    print(f\"{token.type}: {token.value}\")\n</code></pre>"},{"location":"api/lexer/#error-handling_1","title":"Error Handling","text":"<pre><code>try:\n    tokens = lexer.tokenize('struct Person { string name, int age')\nexcept LexerError as e:\n    print(f\"Lexer error: {e}\")\n    print(f\"Line: {e.line}, Column: {e.column}\")\n</code></pre>"},{"location":"api/lexer/#token-analysis","title":"Token Analysis","text":"<pre><code>def analyze_tokens(tokens):\n    \"\"\"Analyze token stream\"\"\"\n    keywords = [t for t in tokens if t.type == 'KEYWORD']\n    identifiers = [t for t in tokens if t.type == 'IDENTIFIER']\n    literals = [t for t in tokens if t.type.endswith('_LITERAL')]\n\n    print(f\"Keywords: {len(keywords)}\")\n    print(f\"Identifiers: {len(identifiers)}\")\n    print(f\"Literals: {len(literals)}\")\n</code></pre>"},{"location":"api/lexer/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/lexer/#token-caching","title":"Token Caching","text":"<pre><code>class CachedLexer:\n    \"\"\"Lexer with token caching\"\"\"\n\n    def __init__(self):\n        self.cache = {}\n\n    def tokenize(self, source: str) -&gt; List[Token]:\n        \"\"\"Tokenize with caching\"\"\"\n        if source in self.cache:\n            return self.cache[source]\n\n        tokens = self._tokenize_internal(source)\n        self.cache[source] = tokens\n        return tokens\n</code></pre>"},{"location":"api/lexer/#memory-optimization","title":"Memory Optimization","text":"<pre><code>class OptimizedLexer:\n    \"\"\"Memory-optimized lexer\"\"\"\n\n    def __init__(self):\n        self.tokens = []\n        self.max_tokens = 10000  # Limit token count\n\n    def tokenize(self, source: str) -&gt; List[Token]:\n        \"\"\"Tokenize with memory limits\"\"\"\n        if len(source) &gt; self.max_tokens:\n            raise LexerError(\"Source too large for tokenization\")\n\n        return self._tokenize_internal(source)\n</code></pre>"},{"location":"api/lexer/#testing","title":"Testing","text":""},{"location":"api/lexer/#unit-tests","title":"Unit Tests","text":"<pre><code>def test_basic_tokenization():\n    \"\"\"Test basic tokenization\"\"\"\n    lexer = YuhoLexer()\n    tokens = lexer.tokenize(\"struct Person { string name }\")\n\n    assert len(tokens) == 6\n    assert tokens[0].type == 'KEYWORD'\n    assert tokens[0].value == 'struct'\n    assert tokens[1].type == 'IDENTIFIER'\n    assert tokens[1].value == 'Person'\n</code></pre>"},{"location":"api/lexer/#error-tests","title":"Error Tests","text":"<pre><code>def test_lexer_errors():\n    \"\"\"Test lexer error handling\"\"\"\n    lexer = YuhoLexer()\n\n    with pytest.raises(LexerError):\n        lexer.tokenize('struct Person { string name')  # Missing closing brace\n</code></pre>"},{"location":"api/lexer/#performance-tests","title":"Performance Tests","text":"<pre><code>def test_lexer_performance():\n    \"\"\"Test lexer performance\"\"\"\n    lexer = YuhoLexer()\n    code = \"struct Person { string name, int age }\" * 100\n\n    start_time = time.time()\n    tokens = lexer.tokenize(code)\n    end_time = time.time()\n\n    assert (end_time - start_time) &lt; 1.0  # Should complete in under 1 second\n</code></pre>"},{"location":"api/lexer/#integration","title":"Integration","text":""},{"location":"api/lexer/#parser-integration","title":"Parser Integration","text":"<pre><code>from yuho_v3.lexer import YuhoLexer\nfrom yuho_v3.parser import YuhoParser\n\n# Lexer and parser integration\nlexer = YuhoLexer()\nparser = YuhoParser()\n\n# Tokenize and parse\ntokens = lexer.tokenize(source)\nast = parser.parse_tokens(tokens)\n</code></pre>"},{"location":"api/lexer/#cli-integration","title":"CLI Integration","text":"<pre><code>def lex_file(file_path: str) -&gt; List[Token]:\n    \"\"\"Lex file from command line\"\"\"\n    with open(file_path, 'r') as f:\n        source = f.read()\n\n    lexer = YuhoLexer()\n    return lexer.tokenize(source)\n</code></pre>"},{"location":"api/lexer/#best-practices","title":"Best Practices","text":""},{"location":"api/lexer/#error-handling_2","title":"Error Handling","text":"<pre><code>def safe_tokenize(source: str) -&gt; List[Token]:\n    \"\"\"Safely tokenize source code\"\"\"\n    try:\n        lexer = YuhoLexer()\n        return lexer.tokenize(source)\n    except LexerError as e:\n        print(f\"Lexer error: {e}\")\n        return []\n</code></pre>"},{"location":"api/lexer/#memory-management","title":"Memory Management","text":"<pre><code>def tokenize_large_file(file_path: str) -&gt; List[Token]:\n    \"\"\"Tokenize large file efficiently\"\"\"\n    lexer = YuhoLexer()\n    tokens = []\n\n    with open(file_path, 'r') as f:\n        for line in f:\n            line_tokens = lexer.tokenize(line)\n            tokens.extend(line_tokens)\n\n    return tokens\n</code></pre>"},{"location":"api/lexer/#performance-optimization","title":"Performance Optimization","text":"<pre><code>def optimized_tokenize(source: str) -&gt; List[Token]:\n    \"\"\"Optimized tokenization\"\"\"\n    lexer = YuhoLexer()\n\n    # Pre-allocate token list\n    tokens = []\n    tokens.reserve(len(source) // 10)  # Estimate token count\n\n    return lexer.tokenize(source)\n</code></pre>"},{"location":"api/lexer/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/lexer/#common-issues","title":"Common Issues","text":""},{"location":"api/lexer/#issue-1-token-recognition","title":"Issue 1: Token Recognition","text":"<pre><code># Problem: Incorrect token recognition\ntokens = lexer.tokenize(\"struct Person\")\n# Expected: [KEYWORD: struct, IDENTIFIER: Person]\n# Actual: [IDENTIFIER: struct, IDENTIFIER: Person]\n</code></pre> <p>Solution: Check keyword definitions:</p> <pre><code>KEYWORDS = {\n    'struct', 'match', 'case', 'consequence', 'func',\n    'true', 'false', 'pass', 'referencing', 'from'\n}\n</code></pre>"},{"location":"api/lexer/#issue-2-position-tracking","title":"Issue 2: Position Tracking","text":"<pre><code># Problem: Incorrect position tracking\ntoken = lexer.tokenize(\"struct Person\")[0]\n# Expected: line=1, column=1\n# Actual: line=1, column=7\n</code></pre> <p>Solution: Fix position tracking:</p> <pre><code>def _advance(self) -&gt; None:\n    \"\"\"Advance to next character\"\"\"\n    if self._current_char() == '\\n':\n        self.line += 1\n        self.column = 1\n    else:\n        self.column += 1\n\n    self.position += 1\n</code></pre>"},{"location":"api/lexer/#issue-3-memory-usage","title":"Issue 3: Memory Usage","text":"<pre><code># Problem: High memory usage\ntokens = lexer.tokenize(large_source)\n# Memory usage too high\n</code></pre> <p>Solution: Use streaming tokenization:</p> <pre><code>def stream_tokenize(source: str):\n    \"\"\"Stream tokens instead of storing all\"\"\"\n    lexer = YuhoLexer()\n    for token in lexer.tokenize(source):\n        yield token\n</code></pre>"},{"location":"api/lexer/#next-steps","title":"Next Steps","text":"<ul> <li>Parser API - Parsing tokens into AST</li> <li>AST API - Abstract Syntax Tree nodes</li> <li>Semantic API - Semantic analysis</li> <li>Transpilers API - Code generation</li> </ul>"},{"location":"api/parser/","title":"Parser API Reference","text":"<p>API documentation for Yuho's parser module.</p>"},{"location":"api/parser/#overview","title":"Overview","text":"<p>The parser module (<code>yuho_v3/parser.py</code>) converts Lark parse trees into Yuho's Abstract Syntax Tree (AST). It consists of two main components:</p> <ol> <li>YuhoTransformer: Transforms Lark parse trees to AST nodes</li> <li>YuhoParser: Main parser interface for user code</li> </ol>"},{"location":"api/parser/#module-yuho_v3parser","title":"Module: <code>yuho_v3.parser</code>","text":"<pre><code>from yuho_v3.parser import YuhoParser, YuhoTransformer\n</code></pre>"},{"location":"api/parser/#class-yuhoparser","title":"Class: <code>YuhoParser</code>","text":"<p>Main parser class for Yuho language.</p>"},{"location":"api/parser/#constructor","title":"Constructor","text":"<pre><code>YuhoParser()\n</code></pre> <p>Creates a new parser instance.</p> <p>Example: <pre><code>parser = YuhoParser()\n</code></pre></p>"},{"location":"api/parser/#methods","title":"Methods","text":""},{"location":"api/parser/#parsetext-str-program","title":"<code>parse(text: str) -&gt; Program</code>","text":"<p>Parse Yuho source code into an AST.</p> <p>Parameters: - <code>text</code> (str): Yuho source code string</p> <p>Returns: - <code>Program</code>: Root AST node representing the complete program</p> <p>Raises: - <code>SyntaxError</code>: If parsing fails due to syntax errors</p> <p>Example: <pre><code>parser = YuhoParser()\nast = parser.parse('int x := 42;')\nprint(f\"Parsed {len(ast.statements)} statement(s)\")\n</code></pre></p> <p>Usage: <pre><code>code = \"\"\"\nstruct Person {\n    string name,\n    int age\n}\n\"\"\"\ntry:\n    ast = parser.parse(code)\n    print(\"Parsing successful!\")\nexcept SyntaxError as e:\n    print(f\"Syntax error: {e}\")\n</code></pre></p>"},{"location":"api/parser/#parse_filefilepath-str-program","title":"<code>parse_file(filepath: str) -&gt; Program</code>","text":"<p>Parse a Yuho source file.</p> <p>Parameters: - <code>filepath</code> (str): Path to <code>.yh</code> file</p> <p>Returns: - <code>Program</code>: Root AST node</p> <p>Raises: - <code>SyntaxError</code>: If parsing fails - <code>FileNotFoundError</code>: If file doesn't exist - <code>IOError</code>: If file can't be read</p> <p>Example: <pre><code>parser = YuhoParser()\nast = parser.parse_file('example.yh')\nprint(f\"File contains {len(ast.statements)} statements\")\n</code></pre></p> <p>Usage: <pre><code>try:\n    ast = parser.parse_file('/path/to/statute.yh')\n    for stmt in ast.statements:\n        print(f\"Statement type: {type(stmt).__name__}\")\nexcept FileNotFoundError:\n    print(\"File not found\")\nexcept SyntaxError as e:\n    print(f\"Parse error: {e}\")\n</code></pre></p>"},{"location":"api/parser/#class-yuhotransformer","title":"Class: <code>YuhoTransformer</code>","text":"<p>Lark transformer that converts parse trees to Yuho AST nodes.</p> <p>This is an internal class used by <code>YuhoParser</code>. Most users don't need to interact with it directly.</p>"},{"location":"api/parser/#transformation-methods","title":"Transformation Methods","text":"<p>The transformer handles all Yuho language constructs:</p>"},{"location":"api/parser/#statement-transformations","title":"Statement Transformations","text":"<ul> <li><code>program(children)</code> - Transform program node</li> <li><code>import_statement(children)</code> - Transform import statements</li> <li><code>declaration(children)</code> - Transform variable declarations</li> <li><code>assignment(children)</code> - Transform assignments</li> <li><code>struct_definition(children)</code> - Transform struct definitions</li> <li><code>function_definition(children)</code> - Transform function definitions</li> <li><code>match_case(children)</code> - Transform match-case statements</li> </ul>"},{"location":"api/parser/#expression-transformations","title":"Expression Transformations","text":"<ul> <li><code>expression(children)</code> - Transform expressions</li> <li><code>logical_expression(children)</code> - Transform logical operations (&amp;&amp;, ||)</li> <li><code>relational_expression(children)</code> - Transform comparisons (&gt;, &lt;, ==)</li> <li><code>additive_expression(children)</code> - Transform addition/subtraction</li> <li><code>multiplicative_expression(children)</code> - Transform multiplication/division</li> <li><code>primary_expression(children)</code> - Transform primary expressions</li> <li><code>literal(children)</code> - Transform literal values</li> </ul>"},{"location":"api/parser/#usage-examples","title":"Usage Examples","text":""},{"location":"api/parser/#basic-parsing","title":"Basic Parsing","text":"<pre><code>from yuho_v3.parser import YuhoParser\n\n# Create parser\nparser = YuhoParser()\n\n# Parse simple code\ncode = \"int x := 42;\"\nast = parser.parse(code)\n\n# Access AST\nassert len(ast.statements) == 1\ndecl = ast.statements[0]\nassert decl.name == \"x\"\nassert decl.value.value == 42\n</code></pre>"},{"location":"api/parser/#parsing-complex-code","title":"Parsing Complex Code","text":"<pre><code>from yuho_v3.parser import YuhoParser\n\ncode = \"\"\"\n// Define a legal concept\nstruct Cheating {\n    string accused,\n    string victim,\n    bool deception,\n    bool harm\n}\n\n// Define logic\nmatch {\n    case deception &amp;&amp; harm := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n\"\"\"\n\nparser = YuhoParser()\nast = parser.parse(code)\n\n# Examine AST structure\nfor stmt in ast.statements:\n    if isinstance(stmt, StructDefinition):\n        print(f\"Struct: {stmt.name}\")\n        print(f\"  Members: {len(stmt.members)}\")\n    elif isinstance(stmt, MatchCase):\n        print(f\"Match-case with {len(stmt.cases)} cases\")\n</code></pre>"},{"location":"api/parser/#error-handling","title":"Error Handling","text":"<pre><code>from yuho_v3.parser import YuhoParser\n\nparser = YuhoParser()\n\n# Handle syntax errors gracefully\ninvalid_code = \"int x = 42;\"  # Wrong: should use :=\n\ntry:\n    ast = parser.parse(invalid_code)\nexcept SyntaxError as e:\n    print(f\"Syntax error: {e}\")\n    # Provide helpful feedback to user\n</code></pre>"},{"location":"api/parser/#file-parsing-with-error-recovery","title":"File Parsing with Error Recovery","text":"<pre><code>from yuho_v3.parser import YuhoParser\nfrom pathlib import Path\n\ndef parse_yuho_files(directory):\n    \"\"\"Parse all .yh files in a directory\"\"\"\n    parser = YuhoParser()\n    results = {}\n\n    for file_path in Path(directory).glob('*.yh'):\n        try:\n            ast = parser.parse_file(str(file_path))\n            results[file_path.name] = {\n                'success': True,\n                'ast': ast,\n                'statements': len(ast.statements)\n            }\n        except SyntaxError as e:\n            results[file_path.name] = {\n                'success': False,\n                'error': str(e)\n            }\n\n    return results\n\n# Usage\nresults = parse_yuho_files('example/cheating/')\nfor filename, result in results.items():\n    if result['success']:\n        print(f\"\u2713 {filename}: {result['statements']} statements\")\n    else:\n        print(f\"\u2717 {filename}: {result['error']}\")\n</code></pre>"},{"location":"api/parser/#ast-nodes","title":"AST Nodes","text":"<p>The parser produces instances of AST node classes defined in <code>yuho_v3/ast_nodes.py</code>.</p>"},{"location":"api/parser/#common-ast-nodes","title":"Common AST Nodes","text":"<pre><code>from yuho_v3.ast_nodes import (\n    Program,           # Root node\n    Declaration,       # Variable declaration\n    StructDefinition,  # Struct definition\n    MatchCase,         # Match-case statement\n    Literal,          # Literal value\n    Identifier,       # Variable reference\n    BinaryOperation,  # Binary operation (&amp;&amp;, +, etc.)\n)\n</code></pre>"},{"location":"api/parser/#inspecting-ast","title":"Inspecting AST","text":"<pre><code>from yuho_v3.parser import YuhoParser\nfrom yuho_v3.ast_nodes import Declaration, Literal\n\nparser = YuhoParser()\nast = parser.parse('int x := 42;')\n\n# Type checking\nstmt = ast.statements[0]\nassert isinstance(stmt, Declaration)\n\n# Access properties\nassert stmt.name == \"x\"\nassert isinstance(stmt.value, Literal)\nassert stmt.value.value == 42\nassert stmt.value.literal_type == YuhoType.INT\n</code></pre>"},{"location":"api/parser/#integration-with-other-components","title":"Integration with Other Components","text":""},{"location":"api/parser/#with-semantic-analyzer","title":"With Semantic Analyzer","text":"<pre><code>from yuho_v3.parser import YuhoParser\nfrom yuho_v3.semantic_analyzer import SemanticAnalyzer\n\n# Parse code\nparser = YuhoParser()\nast = parser.parse(code)\n\n# Analyze semantics\nanalyzer = SemanticAnalyzer()\nerrors = analyzer.analyze(ast)\n\nif errors:\n    print(\"Semantic errors:\")\n    for error in errors:\n        print(f\"  - {error}\")\nelse:\n    print(\"Code is semantically correct!\")\n</code></pre>"},{"location":"api/parser/#with-transpilers","title":"With Transpilers","text":"<pre><code>from yuho_v3.parser import YuhoParser\nfrom yuho_v3.transpilers.mermaid_transpiler import MermaidTranspiler\n\n# Parse code\nparser = YuhoParser()\nast = parser.parse_file('statute.yh')\n\n# Generate Mermaid diagram\ntranspiler = MermaidTranspiler()\ndiagram = transpiler.transpile_to_flowchart(ast)\n\n# Save to file\nwith open('diagram.mmd', 'w') as f:\n    f.write(diagram)\n</code></pre>"},{"location":"api/parser/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/parser/#parser-performance","title":"Parser Performance","text":"<ul> <li>Time Complexity: O(n) where n = source code length</li> <li>Memory: O(m) where m = AST node count</li> <li>Typical Speed: ~1000 lines/second on modern hardware</li> </ul>"},{"location":"api/parser/#optimization-tips","title":"Optimization Tips","text":"<pre><code># 1. Reuse parser instance\nparser = YuhoParser()  # Create once\nfor file in files:\n    ast = parser.parse_file(file)  # Reuse\n\n# 2. Parse large files in chunks (if streaming supported in future)\n# Currently, parse entire file at once\n\n# 3. Cache parsed results\nfrom functools import lru_cache\n\n@lru_cache(maxsize=100)\ndef parse_cached(filepath):\n    parser = YuhoParser()\n    return parser.parse_file(filepath)\n</code></pre>"},{"location":"api/parser/#error-messages","title":"Error Messages","text":"<p>The parser provides detailed error messages:</p>"},{"location":"api/parser/#syntax-error-example","title":"Syntax Error Example","text":"<pre><code>parser = YuhoParser()\ntry:\n    parser.parse(\"int x = 42;\")  # Wrong operator\nexcept SyntaxError as e:\n    # Error message will indicate:\n    # - What was expected\n    # - What was found\n    # - Line and column number\n    print(e)\n</code></pre>"},{"location":"api/parser/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/parser/#custom-error-handling","title":"Custom Error Handling","text":"<pre><code>from yuho_v3.parser import YuhoParser\nfrom yuho_v3.exceptions import YuhoSyntaxError, SourceLocation\n\ndef parse_with_custom_errors(code, filename=None):\n    \"\"\"Parse with custom error handling\"\"\"\n    parser = YuhoParser()\n\n    try:\n        return parser.parse(code)\n    except SyntaxError as e:\n        # Convert to custom error type\n        error = YuhoSyntaxError(\n            message=str(e),\n            location=SourceLocation(line=1, column=1, filename=filename),\n            suggestion=\"Check your syntax - did you use := for assignment?\"\n        )\n        raise error\n</code></pre>"},{"location":"api/parser/#batch-processing","title":"Batch Processing","text":"<pre><code>from yuho_v3.parser import YuhoParser\nfrom concurrent.futures import ThreadPoolExecutor\nfrom pathlib import Path\n\ndef parse_file_safe(filepath):\n    \"\"\"Parse file and return result tuple\"\"\"\n    parser = YuhoParser()\n    try:\n        ast = parser.parse_file(filepath)\n        return (filepath, ast, None)\n    except Exception as e:\n        return (filepath, None, e)\n\ndef parse_directory_parallel(directory, max_workers=4):\n    \"\"\"Parse all files in directory in parallel\"\"\"\n    files = list(Path(directory).glob('*.yh'))\n\n    with ThreadPoolExecutor(max_workers=max_workers) as executor:\n        results = list(executor.map(parse_file_safe, files))\n\n    return results\n</code></pre>"},{"location":"api/parser/#see-also","title":"See Also","text":"<ul> <li>AST Nodes Reference</li> <li>Lexer Reference</li> <li>Semantic Analyzer Reference</li> <li>Architecture Overview</li> </ul>"},{"location":"api/parser/#source-code","title":"Source Code","text":"<p>Location: <code>yuho_v3/parser.py</code></p> <p>View on GitHub: parser.py</p>"},{"location":"api/semantic/","title":"Semantic Analyzer API","text":"<p>The Yuho semantic analyzer validates the meaning and correctness of parsed code.</p>"},{"location":"api/semantic/#overview","title":"Overview","text":"<p>The semantic analyzer provides:</p> <ul> <li>Type Checking - Validate type consistency</li> <li>Variable Analysis - Check variable declarations and usage</li> <li>Semantic Validation - Ensure logical correctness</li> <li>Error Reporting - Provide detailed error messages</li> </ul>"},{"location":"api/semantic/#basic-usage","title":"Basic Usage","text":"<pre><code>from yuho_v3.semantic_analyzer import SemanticAnalyzer\nfrom yuho_v3.parser import YuhoParser\n\n# Parse source code\nparser = YuhoParser()\nast = parser.parse(\"\"\"\nstruct Person {\n    string name,\n    int age\n}\n\nPerson person := {\n    name := \"Alice\",\n    age := 25\n}\n\"\"\")\n\n# Perform semantic analysis\nanalyzer = SemanticAnalyzer()\nerrors = analyzer.analyze(ast)\n\nif errors:\n    for error in errors:\n        print(f\"Error: {error}\")\nelse:\n    print(\"Semantic analysis passed\")\n</code></pre>"},{"location":"api/semantic/#analysis-types","title":"Analysis Types","text":""},{"location":"api/semantic/#type-checking","title":"Type Checking","text":"<pre><code>class TypeChecker:\n    \"\"\"Type checking functionality\"\"\"\n\n    def __init__(self):\n        self.symbol_table = {}\n        self.errors = []\n\n    def check_types(self, ast: Program) -&gt; List[str]:\n        \"\"\"Check types in AST\"\"\"\n        self.errors = []\n        self.symbol_table = {}\n\n        for stmt in ast.statements:\n            self._check_statement(stmt)\n\n        return self.errors\n\n    def _check_statement(self, stmt: Statement):\n        \"\"\"Check individual statement\"\"\"\n        if isinstance(stmt, Declaration):\n            self._check_declaration(stmt)\n        elif isinstance(stmt, StructDefinition):\n            self._check_struct_definition(stmt)\n        elif isinstance(stmt, MatchCase):\n            self._check_match_case(stmt)\n</code></pre>"},{"location":"api/semantic/#variable-analysis","title":"Variable Analysis","text":"<pre><code>class VariableAnalyzer:\n    \"\"\"Variable analysis functionality\"\"\"\n\n    def __init__(self):\n        self.symbol_table = {}\n        self.errors = []\n\n    def analyze_variables(self, ast: Program) -&gt; List[str]:\n        \"\"\"Analyze variable usage\"\"\"\n        self.errors = []\n        self.symbol_table = {}\n\n        # First pass: collect declarations\n        for stmt in ast.statements:\n            if isinstance(stmt, Declaration):\n                self._add_declaration(stmt)\n\n        # Second pass: check usage\n        for stmt in ast.statements:\n            self._check_statement(stmt)\n\n        return self.errors\n\n    def _add_declaration(self, decl: Declaration):\n        \"\"\"Add variable declaration to symbol table\"\"\"\n        self.symbol_table[decl.name] = decl.type_node.type_name\n\n    def _check_identifier(self, ident: Identifier):\n        \"\"\"Check identifier usage\"\"\"\n        if ident.name not in self.symbol_table:\n            self.errors.append(f\"Undefined variable: {ident.name}\")\n</code></pre>"},{"location":"api/semantic/#semantic-validation","title":"Semantic Validation","text":"<pre><code>class SemanticValidator:\n    \"\"\"Semantic validation functionality\"\"\"\n\n    def __init__(self):\n        self.errors = []\n\n    def validate(self, ast: Program) -&gt; List[str]:\n        \"\"\"Validate semantic correctness\"\"\"\n        self.errors = []\n\n        for stmt in ast.statements:\n            if isinstance(stmt, MatchCase):\n                self._validate_match_case(stmt)\n            elif isinstance(stmt, StructDefinition):\n                self._validate_struct_definition(stmt)\n\n        return self.errors\n\n    def _validate_match_case(self, match: MatchCase):\n        \"\"\"Validate match-case statement\"\"\"\n        if not match.cases:\n            self.errors.append(\"Match-case must have at least one case\")\n            return\n\n        # Check for default case\n        has_default = any(case.condition is None for case in match.cases)\n        if not has_default:\n            self.errors.append(\"Match-case must have default case\")\n\n        # Check case completeness\n        self._check_case_completeness(match)\n\n    def _check_case_completeness(self, match: MatchCase):\n        \"\"\"Check if all cases are covered\"\"\"\n        # Implementation for checking completeness\n        pass\n</code></pre>"},{"location":"api/semantic/#error-types","title":"Error Types","text":""},{"location":"api/semantic/#type-errors","title":"Type Errors","text":"<pre><code>class TypeError:\n    \"\"\"Type-related error\"\"\"\n\n    def __init__(self, message: str, line: int = 0, column: int = 0):\n        self.message = message\n        self.line = line\n        self.column = column\n\n    def __str__(self):\n        return f\"Type error: {self.message} at line {self.line}, column {self.column}\"\n\n# Common type errors\ndef check_type_mismatch(left_type: str, right_type: str, line: int, column: int):\n    \"\"\"Check for type mismatch\"\"\"\n    if left_type != right_type:\n        return TypeError(f\"Type mismatch: expected {left_type}, got {right_type}\", line, column)\n    return None\n</code></pre>"},{"location":"api/semantic/#variable-errors","title":"Variable Errors","text":"<pre><code>class VariableError:\n    \"\"\"Variable-related error\"\"\"\n\n    def __init__(self, message: str, variable: str, line: int = 0, column: int = 0):\n        self.message = message\n        self.variable = variable\n        self.line = line\n        self.column = column\n\n    def __str__(self):\n        return f\"Variable error: {self.message} for '{self.variable}' at line {self.line}, column {self.column}\"\n\n# Common variable errors\ndef check_undefined_variable(var_name: str, line: int, column: int):\n    \"\"\"Check for undefined variable\"\"\"\n    return VariableError(f\"Undefined variable: {var_name}\", var_name, line, column)\n\ndef check_redeclared_variable(var_name: str, line: int, column: int):\n    \"\"\"Check for redeclared variable\"\"\"\n    return VariableError(f\"Variable already declared: {var_name}\", var_name, line, column)\n</code></pre>"},{"location":"api/semantic/#semantic-errors","title":"Semantic Errors","text":"<pre><code>class SemanticError:\n    \"\"\"Semantic-related error\"\"\"\n\n    def __init__(self, message: str, line: int = 0, column: int = 0):\n        self.message = message\n        self.line = line\n        self.column = column\n\n    def __str__(self):\n        return f\"Semantic error: {self.message} at line {self.line}, column {self.column}\"\n\n# Common semantic errors\ndef check_incomplete_match_case(line: int, column: int):\n    \"\"\"Check for incomplete match-case\"\"\"\n    return SemanticError(\"Match-case must have default case\", line, column)\n\ndef check_empty_struct(line: int, column: int):\n    \"\"\"Check for empty struct\"\"\"\n    return SemanticError(\"Struct must have at least one member\", line, column)\n</code></pre>"},{"location":"api/semantic/#analysis-implementation","title":"Analysis Implementation","text":""},{"location":"api/semantic/#main-analyzer-class","title":"Main Analyzer Class","text":"<pre><code>class SemanticAnalyzer:\n    \"\"\"Main semantic analyzer\"\"\"\n\n    def __init__(self):\n        self.symbol_table = {}\n        self.errors = []\n        self.warnings = []\n\n    def analyze(self, ast: Program) -&gt; List[str]:\n        \"\"\"Perform complete semantic analysis\"\"\"\n        self.errors = []\n        self.warnings = []\n        self.symbol_table = {}\n\n        # Phase 1: Collect declarations\n        self._collect_declarations(ast)\n\n        # Phase 2: Type checking\n        self._check_types(ast)\n\n        # Phase 3: Variable analysis\n        self._analyze_variables(ast)\n\n        # Phase 4: Semantic validation\n        self._validate_semantics(ast)\n\n        return self.errors\n\n    def _collect_declarations(self, ast: Program):\n        \"\"\"Collect all declarations\"\"\"\n        for stmt in ast.statements:\n            if isinstance(stmt, Declaration):\n                self._add_declaration(stmt)\n            elif isinstance(stmt, StructDefinition):\n                self._add_struct_definition(stmt)\n\n    def _check_types(self, ast: Program):\n        \"\"\"Check type consistency\"\"\"\n        for stmt in ast.statements:\n            self._check_statement_types(stmt)\n\n    def _analyze_variables(self, ast: Program):\n        \"\"\"Analyze variable usage\"\"\"\n        for stmt in ast.statements:\n            self._check_statement_variables(stmt)\n\n    def _validate_semantics(self, ast: Program):\n        \"\"\"Validate semantic correctness\"\"\"\n        for stmt in ast.statements:\n            self._validate_statement(stmt)\n</code></pre>"},{"location":"api/semantic/#type-checking-implementation","title":"Type Checking Implementation","text":"<pre><code>def _check_statement_types(self, stmt: Statement):\n    \"\"\"Check types in statement\"\"\"\n    if isinstance(stmt, Declaration):\n        self._check_declaration_types(stmt)\n    elif isinstance(stmt, Assignment):\n        self._check_assignment_types(stmt)\n    elif isinstance(stmt, MatchCase):\n        self._check_match_case_types(stmt)\n\ndef _check_declaration_types(self, decl: Declaration):\n    \"\"\"Check declaration types\"\"\"\n    if decl.value:\n        expected_type = decl.type_node.type_name\n        actual_type = self._get_expression_type(decl.value)\n\n        if expected_type != actual_type:\n            self.errors.append(\n                f\"Type mismatch in declaration '{decl.name}': \"\n                f\"expected {expected_type}, got {actual_type}\"\n            )\n\ndef _get_expression_type(self, expr: Expression) -&gt; str:\n    \"\"\"Get type of expression\"\"\"\n    if isinstance(expr, Literal):\n        return expr.literal_type.value\n    elif isinstance(expr, Identifier):\n        return self.symbol_table.get(expr.name, \"unknown\")\n    elif isinstance(expr, BinaryOperation):\n        return self._get_binary_operation_type(expr)\n    else:\n        return \"unknown\"\n</code></pre>"},{"location":"api/semantic/#variable-analysis-implementation","title":"Variable Analysis Implementation","text":"<pre><code>def _check_statement_variables(self, stmt: Statement):\n    \"\"\"Check variables in statement\"\"\"\n    if isinstance(stmt, Declaration):\n        self._check_declaration_variables(stmt)\n    elif isinstance(stmt, Assignment):\n        self._check_assignment_variables(stmt)\n    elif isinstance(stmt, MatchCase):\n        self._check_match_case_variables(stmt)\n\ndef _check_declaration_variables(self, decl: Declaration):\n    \"\"\"Check declaration variables\"\"\"\n    if decl.name in self.symbol_table:\n        self.errors.append(f\"Variable already declared: {decl.name}\")\n    else:\n        self.symbol_table[decl.name] = decl.type_node.type_name\n\ndef _check_assignment_variables(self, assign: Assignment):\n    \"\"\"Check assignment variables\"\"\"\n    if assign.name not in self.symbol_table:\n        self.errors.append(f\"Undefined variable: {assign.name}\")\n\n    # Check if variable is being assigned to itself\n    if isinstance(assign.value, Identifier) and assign.value.name == assign.name:\n        self.warnings.append(f\"Variable assigned to itself: {assign.name}\")\n</code></pre>"},{"location":"api/semantic/#advanced-analysis","title":"Advanced Analysis","text":""},{"location":"api/semantic/#control-flow-analysis","title":"Control Flow Analysis","text":"<pre><code>class ControlFlowAnalyzer:\n    \"\"\"Analyze control flow\"\"\"\n\n    def __init__(self):\n        self.errors = []\n\n    def analyze_control_flow(self, ast: Program) -&gt; List[str]:\n        \"\"\"Analyze control flow patterns\"\"\"\n        self.errors = []\n\n        for stmt in ast.statements:\n            if isinstance(stmt, MatchCase):\n                self._analyze_match_case_flow(stmt)\n\n        return self.errors\n\n    def _analyze_match_case_flow(self, match: MatchCase):\n        \"\"\"Analyze match-case control flow\"\"\"\n        # Check for unreachable cases\n        self._check_unreachable_cases(match)\n\n        # Check for redundant cases\n        self._check_redundant_cases(match)\n\n    def _check_unreachable_cases(self, match: MatchCase):\n        \"\"\"Check for unreachable cases\"\"\"\n        # Implementation for checking unreachable cases\n        pass\n\n    def _check_redundant_cases(self, match: MatchCase):\n        \"\"\"Check for redundant cases\"\"\"\n        # Implementation for checking redundant cases\n        pass\n</code></pre>"},{"location":"api/semantic/#data-flow-analysis","title":"Data Flow Analysis","text":"<pre><code>class DataFlowAnalyzer:\n    \"\"\"Analyze data flow\"\"\"\n\n    def __init__(self):\n        self.errors = []\n\n    def analyze_data_flow(self, ast: Program) -&gt; List[str]:\n        \"\"\"Analyze data flow patterns\"\"\"\n        self.errors = []\n\n        # Track variable definitions and uses\n        self._track_variable_flow(ast)\n\n        return self.errors\n\n    def _track_variable_flow(self, ast: Program):\n        \"\"\"Track variable definitions and uses\"\"\"\n        # Implementation for tracking variable flow\n        pass\n</code></pre>"},{"location":"api/semantic/#error-reporting","title":"Error Reporting","text":""},{"location":"api/semantic/#error-formatting","title":"Error Formatting","text":"<pre><code>class ErrorFormatter:\n    \"\"\"Format error messages\"\"\"\n\n    @staticmethod\n    def format_error(error: str, line: int = 0, column: int = 0) -&gt; str:\n        \"\"\"Format error message\"\"\"\n        if line &gt; 0 and column &gt; 0:\n            return f\"Error at line {line}, column {column}: {error}\"\n        else:\n            return f\"Error: {error}\"\n\n    @staticmethod\n    def format_warning(warning: str, line: int = 0, column: int = 0) -&gt; str:\n        \"\"\"Format warning message\"\"\"\n        if line &gt; 0 and column &gt; 0:\n            return f\"Warning at line {line}, column {column}: {warning}\"\n        else:\n            return f\"Warning: {warning}\"\n</code></pre>"},{"location":"api/semantic/#error-categories","title":"Error Categories","text":"<pre><code>class ErrorCategory(Enum):\n    TYPE_ERROR = \"type_error\"\n    VARIABLE_ERROR = \"variable_error\"\n    SEMANTIC_ERROR = \"semantic_error\"\n    SYNTAX_ERROR = \"syntax_error\"\n\nclass CategorizedError:\n    \"\"\"Error with category\"\"\"\n\n    def __init__(self, message: str, category: ErrorCategory, line: int = 0, column: int = 0):\n        self.message = message\n        self.category = category\n        self.line = line\n        self.column = column\n\n    def __str__(self):\n        return f\"{self.category.value}: {self.message} at line {self.line}, column {self.column}\"\n</code></pre>"},{"location":"api/semantic/#testing","title":"Testing","text":""},{"location":"api/semantic/#unit-tests","title":"Unit Tests","text":"<pre><code>def test_type_checking():\n    \"\"\"Test type checking\"\"\"\n    analyzer = SemanticAnalyzer()\n\n    # Test valid code\n    parser = YuhoParser()\n    ast = parser.parse(\"int x := 42;\")\n    errors = analyzer.analyze(ast)\n    assert len(errors) == 0\n\n    # Test type mismatch\n    ast = parser.parse('int x := \"hello\";')\n    errors = analyzer.analyze(ast)\n    assert len(errors) &gt; 0\n    assert \"type mismatch\" in errors[0].lower()\n\ndef test_variable_analysis():\n    \"\"\"Test variable analysis\"\"\"\n    analyzer = SemanticAnalyzer()\n\n    # Test undefined variable\n    parser = YuhoParser()\n    ast = parser.parse(\"x := 42;\")\n    errors = analyzer.analyze(ast)\n    assert len(errors) &gt; 0\n    assert \"undefined variable\" in errors[0].lower()\n\ndef test_semantic_validation():\n    \"\"\"Test semantic validation\"\"\"\n    analyzer = SemanticAnalyzer()\n\n    # Test incomplete match-case\n    parser = YuhoParser()\n    ast = parser.parse(\"\"\"\n    match {\n        case condition := consequence \"result\";\n    }\n    \"\"\")\n    errors = analyzer.analyze(ast)\n    assert len(errors) &gt; 0\n    assert \"default case\" in errors[0].lower()\n</code></pre>"},{"location":"api/semantic/#integration-tests","title":"Integration Tests","text":"<pre><code>def test_complete_analysis():\n    \"\"\"Test complete semantic analysis\"\"\"\n    analyzer = SemanticAnalyzer()\n    parser = YuhoParser()\n\n    code = \"\"\"\n    struct Person {\n        string name,\n        int age\n    }\n\n    Person person := {\n        name := \"Alice\",\n        age := 25\n    }\n\n    match {\n        case person.age &gt;= 18 := consequence \"adult\";\n        case _ := consequence \"minor\";\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n    errors = analyzer.analyze(ast)\n    assert len(errors) == 0\n</code></pre>"},{"location":"api/semantic/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/semantic/#analysis-optimization","title":"Analysis Optimization","text":"<pre><code>class OptimizedAnalyzer:\n    \"\"\"Optimized semantic analyzer\"\"\"\n\n    def __init__(self):\n        self.cache = {}\n\n    def analyze(self, ast: Program) -&gt; List[str]:\n        \"\"\"Optimized analysis with caching\"\"\"\n        ast_hash = hash(str(ast))\n        if ast_hash in self.cache:\n            return self.cache[ast_hash]\n\n        errors = self._analyze_internal(ast)\n        self.cache[ast_hash] = errors\n        return errors\n</code></pre>"},{"location":"api/semantic/#memory-management","title":"Memory Management","text":"<pre><code>class MemoryEfficientAnalyzer:\n    \"\"\"Memory-efficient semantic analyzer\"\"\"\n\n    def __init__(self):\n        self.symbol_table = {}\n        self.errors = []\n\n    def analyze(self, ast: Program) -&gt; List[str]:\n        \"\"\"Memory-efficient analysis\"\"\"\n        # Clear previous state\n        self.symbol_table.clear()\n        self.errors.clear()\n\n        # Perform analysis\n        self._analyze_ast(ast)\n\n        # Return copy of errors\n        return self.errors.copy()\n</code></pre>"},{"location":"api/semantic/#best-practices","title":"Best Practices","text":""},{"location":"api/semantic/#error-handling","title":"Error Handling","text":"<pre><code>def safe_analyze(ast: Program) -&gt; List[str]:\n    \"\"\"Safely analyze AST\"\"\"\n    try:\n        analyzer = SemanticAnalyzer()\n        return analyzer.analyze(ast)\n    except Exception as e:\n        return [f\"Analysis error: {str(e)}\"]\n</code></pre>"},{"location":"api/semantic/#performance","title":"Performance","text":"<pre><code>def analyze_large_ast(ast: Program) -&gt; List[str]:\n    \"\"\"Analyze large AST efficiently\"\"\"\n    analyzer = SemanticAnalyzer()\n\n    # Use streaming analysis for large ASTs\n    if len(ast.statements) &gt; 1000:\n        return analyzer.analyze_streaming(ast)\n    else:\n        return analyzer.analyze(ast)\n</code></pre>"},{"location":"api/semantic/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/semantic/#common-issues","title":"Common Issues","text":""},{"location":"api/semantic/#issue-1-false-positives","title":"Issue 1: False Positives","text":"<pre><code># Problem: False positive type errors\nanalyzer = SemanticAnalyzer()\nast = parser.parse(\"int x := 42;\")\nerrors = analyzer.analyze(ast)\n# Unexpected type error\n</code></pre> <p>Solution: Check type inference logic:</p> <pre><code>def _get_expression_type(self, expr: Expression) -&gt; str:\n    \"\"\"Get type of expression with better inference\"\"\"\n    if isinstance(expr, Literal):\n        return expr.literal_type.value\n    elif isinstance(expr, Identifier):\n        return self.symbol_table.get(expr.name, \"unknown\")\n    # Add more type inference logic\n</code></pre>"},{"location":"api/semantic/#issue-2-missing-errors","title":"Issue 2: Missing Errors","text":"<pre><code># Problem: Missing semantic errors\nanalyzer = SemanticAnalyzer()\nast = parser.parse(\"match { case condition := consequence result; }\")\nerrors = analyzer.analyze(ast)\n# Should have error about missing default case\n</code></pre> <p>Solution: Improve semantic validation:</p> <pre><code>def _validate_match_case(self, match: MatchCase):\n    \"\"\"Validate match-case with better checking\"\"\"\n    if not match.cases:\n        self.errors.append(\"Match-case must have at least one case\")\n        return\n\n    has_default = any(case.condition is None for case in match.cases)\n    if not has_default:\n        self.errors.append(\"Match-case must have default case\")\n</code></pre>"},{"location":"api/semantic/#issue-3-performance-issues","title":"Issue 3: Performance Issues","text":"<pre><code># Problem: Slow analysis\nanalyzer = SemanticAnalyzer()\nast = parser.parse(large_source)\nerrors = analyzer.analyze(ast)\n# Takes too long\n</code></pre> <p>Solution: Use optimized analysis:</p> <pre><code>class OptimizedAnalyzer:\n    \"\"\"Optimized analyzer\"\"\"\n\n    def analyze(self, ast: Program) -&gt; List[str]:\n        \"\"\"Optimized analysis\"\"\"\n        # Use incremental analysis\n        # Cache results\n        # Skip redundant checks\n        pass\n</code></pre>"},{"location":"api/semantic/#next-steps","title":"Next Steps","text":"<ul> <li>Lexer API - Tokenization</li> <li>Parser API - Parsing tokens into AST</li> <li>AST API - Abstract Syntax Tree nodes</li> <li>Transpilers API - Code generation</li> </ul>"},{"location":"api/transpilers/","title":"Transpilers API","text":"<p>The Yuho transpilers convert AST into various target formats for visualization and verification.</p>"},{"location":"api/transpilers/#overview","title":"Overview","text":"<p>The transpilers provide:</p> <ul> <li>Mermaid Generation - Create visual diagrams</li> <li>Alloy Generation - Generate formal specifications</li> <li>Code Generation - Convert to target formats</li> <li>Format Validation - Ensure output correctness</li> </ul>"},{"location":"api/transpilers/#base-transpiler","title":"Base Transpiler","text":""},{"location":"api/transpilers/#abstract-base-class","title":"Abstract Base Class","text":"<pre><code>from abc import ABC, abstractmethod\nfrom typing import List, Dict, Any\nfrom ..ast_nodes import *\n\nclass BaseTranspiler(ABC):\n    \"\"\"Base class for all transpilers\"\"\"\n\n    def __init__(self):\n        self.output = []\n        self.node_counter = 0\n\n    @abstractmethod\n    def transpile(self, program: Program) -&gt; str:\n        \"\"\"Transpile program to target format\"\"\"\n        pass\n\n    def _process_statement(self, stmt: Statement):\n        \"\"\"Process individual statement\"\"\"\n        if isinstance(stmt, StructDefinition):\n            self._process_struct_definition(stmt)\n        elif isinstance(stmt, MatchCase):\n            self._process_match_case(stmt)\n        elif isinstance(stmt, Declaration):\n            self._process_declaration(stmt)\n\n    @abstractmethod\n    def _process_struct_definition(self, struct: StructDefinition):\n        \"\"\"Process struct definition\"\"\"\n        pass\n\n    @abstractmethod\n    def _process_match_case(self, match: MatchCase):\n        \"\"\"Process match-case statement\"\"\"\n        pass\n\n    def _process_declaration(self, decl: Declaration):\n        \"\"\"Process variable declaration\"\"\"\n        pass\n</code></pre>"},{"location":"api/transpilers/#mermaid-transpiler","title":"Mermaid Transpiler","text":""},{"location":"api/transpilers/#flowchart-generation","title":"Flowchart Generation","text":"<pre><code>class MermaidTranspiler(BaseTranspiler):\n    \"\"\"Transpiles Yuho AST to Mermaid diagram syntax\"\"\"\n\n    def transpile_to_flowchart(self, program: Program) -&gt; str:\n        \"\"\"Generate Mermaid flowchart from Yuho program\"\"\"\n        self.output = [\"flowchart TD\"]\n        self.node_counter = 0\n\n        for stmt in program.statements:\n            self._process_statement_flowchart(stmt)\n\n        return \"\\n\".join(self.output)\n\n    def _process_statement_flowchart(self, stmt: Statement):\n        \"\"\"Process statement for flowchart generation\"\"\"\n        if isinstance(stmt, StructDefinition):\n            self._add_struct_flowchart(stmt)\n        elif isinstance(stmt, MatchCase):\n            self._add_match_case_flowchart(stmt)\n        elif isinstance(stmt, Declaration):\n            self._add_declaration_flowchart(stmt)\n\n    def _add_struct_flowchart(self, struct: StructDefinition):\n        \"\"\"Add struct definition to flowchart\"\"\"\n        struct_id = f\"S{self.node_counter}\"\n        self.node_counter += 1\n\n        # Main struct node\n        self.output.append(f\"    {struct_id}[{struct.name}]\")\n\n        # Add member nodes\n        for member in struct.members:\n            member_id = f\"M{self.node_counter}\"\n            self.node_counter += 1\n\n            self.output.append(f\"    {member_id}[{member.name}: {self.get_type_from_node(member.type_node)}]\")\n            self.output.append(f\"    {struct_id} --&gt; {member_id}\")\n\n    def _add_match_case_flowchart(self, match: MatchCase):\n        \"\"\"Add match-case to flowchart\"\"\"\n        match_id = f\"MC{self.node_counter}\"\n        self.node_counter += 1\n\n        # Decision diamond\n        condition_text = \"Decision\"\n        if match.expression:\n            condition_text = f\"Match Expression\"\n\n        self.output.append(f\"    {match_id}{{{condition_text}}}\")\n\n        # Add case branches\n        for i, case in enumerate(match.cases):\n            case_id = f\"C{self.node_counter}\"\n            self.node_counter += 1\n\n            if case.condition:\n                case_text = f\"Case {i + 1}\"\n            else:\n                case_text = \"Default\"\n\n            self.output.append(f\"    {case_id}[{case_text}]\")\n            self.output.append(f\"    {match_id} --&gt; {case_id}\")\n\n            # Add consequence\n            if not isinstance(case.consequence, PassStatement):\n                cons_id = f\"CO{self.node_counter}\"\n                self.node_counter += 1\n                self.output.append(f\"    {cons_id}[Consequence]\")\n                self.output.append(f\"    {case_id} --&gt; {cons_id}\")\n</code></pre>"},{"location":"api/transpilers/#mindmap-generation","title":"Mindmap Generation","text":"<pre><code>def transpile_to_mindmap(self, program: Program) -&gt; str:\n    \"\"\"Generate Mermaid mindmap from Yuho program\"\"\"\n    self.output = [\"mindmap\"]\n    self.node_counter = 0\n\n    # Find main structs and their relationships\n    structs = [stmt for stmt in program.statements if isinstance(stmt, StructDefinition)]\n    match_cases = [stmt for stmt in program.statements if isinstance(stmt, MatchCase)]\n\n    if structs:\n        main_struct = structs[0]  # Use first struct as root\n        self.output.append(f\"  root((({main_struct.name})))\")\n\n        # Add struct members as branches\n        for member in main_struct.members:\n            self.output.append(f\"    {member.name}\")\n            self.output.append(f\"      {self.get_type_from_node(member.type_node)}\")\n\n    # Add match cases as decision branches\n    for match_case in match_cases:\n        self.output.append(f\"    Decisions\")\n        for i, case in enumerate(match_case.cases):\n            if case.condition:\n                self.output.append(f\"      Case{i + 1}\")\n            else:\n                self.output.append(f\"      Default\")\n\n    return \"\\n\".join(self.output)\n</code></pre>"},{"location":"api/transpilers/#alloy-transpiler","title":"Alloy Transpiler","text":""},{"location":"api/transpilers/#specification-generation","title":"Specification Generation","text":"<pre><code>class AlloyTranspiler(BaseTranspiler):\n    \"\"\"Transpiles Yuho AST to Alloy specification language\"\"\"\n\n    def __init__(self):\n        self.signatures = []\n        self.facts = []\n        self.predicates = []\n        self.functions = []\n\n    def transpile(self, program: Program) -&gt; str:\n        \"\"\"Generate Alloy specification from Yuho program\"\"\"\n        self.signatures = []\n        self.facts = []\n        self.predicates = []\n        self.functions = []\n\n        # Process all statements\n        for stmt in program.statements:\n            self._process_statement(stmt)\n\n        # Generate final Alloy code\n        return self._generate_alloy_code()\n\n    def _process_struct_definition(self, struct: StructDefinition):\n        \"\"\"Convert struct definition to Alloy signature\"\"\"\n        sig_lines = [f\"sig {struct.name} {{\"]\n\n        # Add fields\n        for member in struct.members:\n            alloy_type = self._get_alloy_type(member.type_node)\n            sig_lines.append(f\"  {member.name}: {alloy_type},\")\n\n        # Remove last comma and close signature\n        if sig_lines[-1].endswith(','):\n            sig_lines[-1] = sig_lines[-1][:-1]\n\n        sig_lines.append(\"}\")\n\n        self.signatures.append(\"\\n\".join(sig_lines))\n\n    def _process_match_case(self, match: MatchCase):\n        \"\"\"Convert match-case to Alloy predicates\"\"\"\n        pred_name = f\"MatchCase{len(self.predicates)}\"\n        pred_lines = [f\"pred {pred_name}[x: univ] {{\"]\n\n        if match.expression:\n            # Add condition for the expression being matched\n            pred_lines.append(\"  // Match expression conditions\")\n\n        # Process each case\n        for i, case in enumerate(match.cases):\n            if case.condition is None:\n                # Default case\n                pred_lines.append(\"  // Default case\")\n                pred_lines.append(\"  else {\")\n            else:\n                # Specific case condition\n                condition_alloy = self._expression_to_alloy(case.condition)\n                if i == 0:\n                    pred_lines.append(f\"  {condition_alloy} =&gt; {{\")\n                else:\n                    pred_lines.append(f\"  else {condition_alloy} =&gt; {{\")\n\n            # Add consequence\n            if not isinstance(case.consequence, PassStatement):\n                consequence_alloy = self._expression_to_alloy(case.consequence)\n                pred_lines.append(f\"    {consequence_alloy}\")\n\n            pred_lines.append(\"  }\")\n\n        pred_lines.append(\"}\")\n        self.predicates.append(\"\\n\".join(pred_lines))\n</code></pre>"},{"location":"api/transpilers/#type-mapping","title":"Type Mapping","text":"<pre><code>def _get_alloy_type(self, type_node: TypeNode) -&gt; str:\n    \"\"\"Convert Yuho type to Alloy type\"\"\"\n    if isinstance(type_node.type_name, YuhoType):\n        mapping = {\n            YuhoType.INT: \"Int\",\n            YuhoType.FLOAT: \"Int\",  # Alloy doesn't have floats\n            YuhoType.BOOL: \"Bool\",\n            YuhoType.STRING: \"String\",\n            YuhoType.PERCENT: \"Int\",\n            YuhoType.MONEY: \"Int\",\n            YuhoType.DATE: \"String\",\n            YuhoType.DURATION: \"String\"\n        }\n        return mapping.get(type_node.type_name, \"univ\")\n    else:\n        # Custom type\n        return str(type_node.type_name)\n\ndef _expression_to_alloy(self, expr: Expression) -&gt; str:\n    \"\"\"Convert expression to Alloy syntax\"\"\"\n    if isinstance(expr, Literal):\n        return self._literal_to_alloy(expr)\n    elif isinstance(expr, Identifier):\n        return expr.name\n    elif isinstance(expr, BinaryOperation):\n        left = self._expression_to_alloy(expr.left)\n        right = self._expression_to_alloy(expr.right)\n        op = self._operator_to_alloy(expr.operator)\n        return f\"({left} {op} {right})\"\n    else:\n        return \"// Expression translation not implemented\"\n</code></pre>"},{"location":"api/transpilers/#custom-transpilers","title":"Custom Transpilers","text":""},{"location":"api/transpilers/#creating-custom-transpiler","title":"Creating Custom Transpiler","text":"<pre><code>class CustomTranspiler(BaseTranspiler):\n    \"\"\"Custom transpiler for specific target\"\"\"\n\n    def transpile(self, program: Program) -&gt; str:\n        \"\"\"Transpile to custom format\"\"\"\n        self.output = []\n        self.node_counter = 0\n\n        # Add header\n        self.output.append(\"// Custom format output\")\n        self.output.append(\"\")\n\n        # Process statements\n        for stmt in program.statements:\n            self._process_statement(stmt)\n\n        return \"\\n\".join(self.output)\n\n    def _process_struct_definition(self, struct: StructDefinition):\n        \"\"\"Process struct for custom format\"\"\"\n        self.output.append(f\"struct {struct.name} {{\")\n        for member in struct.members:\n            self.output.append(f\"  {member.name}: {member.type_node.type_name}\")\n        self.output.append(\"}\")\n        self.output.append(\"\")\n\n    def _process_match_case(self, match: MatchCase):\n        \"\"\"Process match-case for custom format\"\"\"\n        self.output.append(\"match {\")\n        for case in match.cases:\n            if case.condition:\n                self.output.append(f\"  case {case.condition} := consequence {case.consequence};\")\n            else:\n                self.output.append(f\"  case _ := consequence {case.consequence};\")\n        self.output.append(\"}\")\n        self.output.append(\"\")\n</code></pre>"},{"location":"api/transpilers/#transpiler-registry","title":"Transpiler Registry","text":"<pre><code>class TranspilerRegistry:\n    \"\"\"Registry for transpilers\"\"\"\n\n    def __init__(self):\n        self.transpilers = {}\n\n    def register(self, name: str, transpiler_class: type):\n        \"\"\"Register transpiler\"\"\"\n        self.transpilers[name] = transpiler_class\n\n    def get_transpiler(self, name: str) -&gt; BaseTranspiler:\n        \"\"\"Get transpiler by name\"\"\"\n        if name not in self.transpilers:\n            raise ValueError(f\"Unknown transpiler: {name}\")\n        return self.transpilers[name]()\n\n    def list_transpilers(self) -&gt; List[str]:\n        \"\"\"List available transpilers\"\"\"\n        return list(self.transpilers.keys())\n\n# Register transpilers\nregistry = TranspilerRegistry()\nregistry.register(\"mermaid\", MermaidTranspiler)\nregistry.register(\"alloy\", AlloyTranspiler)\nregistry.register(\"custom\", CustomTranspiler)\n</code></pre>"},{"location":"api/transpilers/#transpiler-configuration","title":"Transpiler Configuration","text":""},{"location":"api/transpilers/#configuration-options","title":"Configuration Options","text":"<pre><code>@dataclass\nclass TranspilerConfig:\n    \"\"\"Configuration for transpilers\"\"\"\n    output_format: str = \"default\"\n    include_comments: bool = True\n    optimize_output: bool = False\n    custom_options: Dict[str, Any] = None\n\n    def __post_init__(self):\n        if self.custom_options is None:\n            self.custom_options = {}\n</code></pre>"},{"location":"api/transpilers/#configurable-transpiler","title":"Configurable Transpiler","text":"<pre><code>class ConfigurableTranspiler(BaseTranspiler):\n    \"\"\"Transpiler with configuration options\"\"\"\n\n    def __init__(self, config: TranspilerConfig = None):\n        super().__init__()\n        self.config = config or TranspilerConfig()\n\n    def transpile(self, program: Program) -&gt; str:\n        \"\"\"Transpile with configuration\"\"\"\n        self.output = []\n        self.node_counter = 0\n\n        # Add header if comments enabled\n        if self.config.include_comments:\n            self.output.append(\"// Generated by Yuho transpiler\")\n            self.output.append(\"\")\n\n        # Process statements\n        for stmt in program.statements:\n            self._process_statement(stmt)\n\n        # Optimize if requested\n        if self.config.optimize_output:\n            self._optimize_output()\n\n        return \"\\n\".join(self.output)\n\n    def _optimize_output(self):\n        \"\"\"Optimize output based on configuration\"\"\"\n        # Remove empty lines\n        self.output = [line for line in self.output if line.strip()]\n\n        # Remove duplicate lines\n        self.output = list(dict.fromkeys(self.output))\n</code></pre>"},{"location":"api/transpilers/#error-handling","title":"Error Handling","text":""},{"location":"api/transpilers/#transpiler-errors","title":"Transpiler Errors","text":"<pre><code>class TranspilerError(Exception):\n    \"\"\"Transpiler error exception\"\"\"\n\n    def __init__(self, message: str, line: int = 0, column: int = 0):\n        self.message = message\n        self.line = line\n        self.column = column\n        super().__init__(f\"Transpiler error: {message} at line {line}, column {column}\")\n\nclass UnsupportedFeatureError(TranspilerError):\n    \"\"\"Error for unsupported features\"\"\"\n    pass\n\nclass OutputFormatError(TranspilerError):\n    \"\"\"Error for output format issues\"\"\"\n    pass\n</code></pre>"},{"location":"api/transpilers/#error-handling-in-transpilers","title":"Error Handling in Transpilers","text":"<pre><code>def safe_transpile(transpiler: BaseTranspiler, program: Program) -&gt; str:\n    \"\"\"Safely transpile program\"\"\"\n    try:\n        return transpiler.transpile(program)\n    except TranspilerError as e:\n        return f\"Transpiler error: {e.message}\"\n    except Exception as e:\n        return f\"Unexpected error: {str(e)}\"\n</code></pre>"},{"location":"api/transpilers/#testing","title":"Testing","text":""},{"location":"api/transpilers/#unit-tests","title":"Unit Tests","text":"<pre><code>def test_mermaid_transpiler():\n    \"\"\"Test Mermaid transpiler\"\"\"\n    transpiler = MermaidTranspiler()\n    parser = YuhoParser()\n\n    code = \"\"\"\n    struct Person {\n        string name,\n        int age\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n    result = transpiler.transpile_to_flowchart(ast)\n\n    assert \"flowchart TD\" in result\n    assert \"Person\" in result\n    assert \"name: string\" in result\n    assert \"age: int\" in result\n\ndef test_alloy_transpiler():\n    \"\"\"Test Alloy transpiler\"\"\"\n    transpiler = AlloyTranspiler()\n    parser = YuhoParser()\n\n    code = \"\"\"\n    struct Person {\n        string name,\n        int age\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n    result = transpiler.transpile(ast)\n\n    assert \"sig Person\" in result\n    assert \"name: String\" in result\n    assert \"age: Int\" in result\n    assert \"run {} for 5\" in result\n</code></pre>"},{"location":"api/transpilers/#integration-tests","title":"Integration Tests","text":"<pre><code>def test_transpiler_integration():\n    \"\"\"Test transpiler integration\"\"\"\n    parser = YuhoParser()\n    mermaid_transpiler = MermaidTranspiler()\n    alloy_transpiler = AlloyTranspiler()\n\n    code = \"\"\"\n    struct Test {\n        bool field\n    }\n\n    match {\n        case field := consequence \"true\";\n        case _ := consequence \"false\";\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n\n    # Test Mermaid generation\n    mermaid_result = mermaid_transpiler.transpile_to_flowchart(ast)\n    assert \"flowchart TD\" in mermaid_result\n\n    # Test Alloy generation\n    alloy_result = alloy_transpiler.transpile(ast)\n    assert \"sig Test\" in alloy_result\n</code></pre>"},{"location":"api/transpilers/#performance","title":"Performance","text":""},{"location":"api/transpilers/#optimization-techniques","title":"Optimization Techniques","text":"<pre><code>class OptimizedTranspiler(BaseTranspiler):\n    \"\"\"Optimized transpiler\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.cache = {}\n\n    def transpile(self, program: Program) -&gt; str:\n        \"\"\"Optimized transpilation with caching\"\"\"\n        program_hash = hash(str(program))\n        if program_hash in self.cache:\n            return self.cache[program_hash]\n\n        result = self._transpile_internal(program)\n        self.cache[program_hash] = result\n        return result\n\n    def _transpile_internal(self, program: Program) -&gt; str:\n        \"\"\"Internal transpilation logic\"\"\"\n        # Implementation\n        pass\n</code></pre>"},{"location":"api/transpilers/#memory-management","title":"Memory Management","text":"<pre><code>class MemoryEfficientTranspiler(BaseTranspiler):\n    \"\"\"Memory-efficient transpiler\"\"\"\n\n    def transpile(self, program: Program) -&gt; str:\n        \"\"\"Memory-efficient transpilation\"\"\"\n        # Use generators for large outputs\n        # Stream output instead of storing all\n        # Clear intermediate data\n        pass\n</code></pre>"},{"location":"api/transpilers/#best-practices","title":"Best Practices","text":""},{"location":"api/transpilers/#transpiler-design","title":"Transpiler Design","text":"<ul> <li>Use abstract base classes</li> <li>Implement consistent interfaces</li> <li>Handle errors gracefully</li> <li>Optimize for performance</li> </ul>"},{"location":"api/transpilers/#output-quality","title":"Output Quality","text":"<ul> <li>Generate clean, readable output</li> <li>Include appropriate comments</li> <li>Follow target format conventions</li> <li>Validate output correctness</li> </ul>"},{"location":"api/transpilers/#error-handling_1","title":"Error Handling","text":"<ul> <li>Provide clear error messages</li> <li>Handle edge cases</li> <li>Validate input AST</li> <li>Report unsupported features</li> </ul>"},{"location":"api/transpilers/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/transpilers/#common-issues","title":"Common Issues","text":""},{"location":"api/transpilers/#issue-1-output-format-errors","title":"Issue 1: Output Format Errors","text":"<pre><code># Problem: Invalid output format\ntranspiler = MermaidTranspiler()\nresult = transpiler.transpile_to_flowchart(ast)\n# Invalid Mermaid syntax\n</code></pre> <p>Solution: Validate output format:</p> <pre><code>def validate_mermaid_output(output: str) -&gt; bool:\n    \"\"\"Validate Mermaid output\"\"\"\n    required_elements = [\"flowchart TD\"]\n    return all(element in output for element in required_elements)\n</code></pre>"},{"location":"api/transpilers/#issue-2-type-mapping-errors","title":"Issue 2: Type Mapping Errors","text":"<pre><code># Problem: Incorrect type mapping\nalloy_type = transpiler._get_alloy_type(type_node)\n# Expected: \"Int\", Actual: \"unknown\"\n</code></pre> <p>Solution: Improve type mapping:</p> <pre><code>def _get_alloy_type(self, type_node: TypeNode) -&gt; str:\n    \"\"\"Convert Yuho type to Alloy type with better mapping\"\"\"\n    mapping = {\n        YuhoType.INT: \"Int\",\n        YuhoType.FLOAT: \"Int\",\n        YuhoType.BOOL: \"Bool\",\n        YuhoType.STRING: \"String\",\n        # Add more mappings\n    }\n    return mapping.get(type_node.type_name, \"univ\")\n</code></pre>"},{"location":"api/transpilers/#issue-3-performance-issues","title":"Issue 3: Performance Issues","text":"<pre><code># Problem: Slow transpilation\ntranspiler = MermaidTranspiler()\nresult = transpiler.transpile(large_ast)\n# Takes too long\n</code></pre> <p>Solution: Use optimized transpiler:</p> <pre><code>class OptimizedMermaidTranspiler(MermaidTranspiler):\n    \"\"\"Optimized Mermaid transpiler\"\"\"\n\n    def transpile_to_flowchart(self, program: Program) -&gt; str:\n        \"\"\"Optimized flowchart generation\"\"\"\n        # Use streaming output\n        # Cache intermediate results\n        # Skip unnecessary processing\n        pass\n</code></pre>"},{"location":"api/transpilers/#next-steps","title":"Next Steps","text":"<ul> <li>Lexer API - Tokenization</li> <li>Parser API - Parsing tokens into AST</li> <li>AST API - Abstract Syntax Tree nodes</li> <li>Semantic API - Semantic analysis</li> </ul>"},{"location":"cli/alloy/","title":"Alloy Command","text":"<p>The <code>yuho alloy</code> command generates Alloy specifications from Yuho source files for formal verification.</p>"},{"location":"cli/alloy/#overview","title":"Overview","text":"<p>The <code>alloy</code> command creates formal specifications that can be verified using the Alloy Analyzer:</p> <ul> <li>Formal Verification - Prove logical consistency</li> <li>Model Checking - Find counterexamples</li> <li>Specification Generation - Convert Yuho to Alloy</li> <li>Verification Commands - Ready-to-run Alloy code</li> </ul>"},{"location":"cli/alloy/#basic-usage","title":"Basic Usage","text":"<pre><code>yuho alloy &lt;file_path&gt; [OPTIONS]\n</code></pre>"},{"location":"cli/alloy/#examples","title":"Examples","text":"<pre><code># Generate Alloy spec to stdout\nyuho alloy example.yh\n\n# Save to file\nyuho alloy example.yh -o specification.als\n\n# Generate from legal example\nyuho alloy examples/cheating/cheating_illustration_A.yh -o cheating.als\n</code></pre>"},{"location":"cli/alloy/#command-options","title":"Command Options","text":""},{"location":"cli/alloy/#-output-o","title":"<code>--output</code>, <code>-o</code>","text":"<p>Specify output file path:</p> <pre><code>yuho alloy example.yh -o output.als\n</code></pre> <p>Default: Output to stdout</p>"},{"location":"cli/alloy/#output-format","title":"Output Format","text":""},{"location":"cli/alloy/#generated-alloy-specification","title":"Generated Alloy Specification","text":"<p>The command generates a complete Alloy specification including:</p> <ul> <li>Signatures - From Yuho struct definitions</li> <li>Predicates - From match-case logic</li> <li>Facts - From constraints and relationships</li> <li>Run Commands - For automated verification</li> </ul>"},{"location":"cli/alloy/#example-output","title":"Example Output","text":"<pre><code>// Generated Alloy specification from Yuho\nmodule YuhoGenerated\n\nabstract sig Bool {}\none sig True, False extends Bool {}\n\nsig Cheating {\n  accused: String,\n  deception: Bool,\n  dishonest: Bool,\n  harm: Bool\n}\n\npred MatchCase0[x: univ] {\n  // Match expression conditions\n  (deception = True and harm = True) =&gt; {\n    // Consequence: guilty\n  }\n}\n\nrun {} for 5\n</code></pre>"},{"location":"cli/alloy/#working-with-examples","title":"Working with Examples","text":""},{"location":"cli/alloy/#basic-cheating-example","title":"Basic Cheating Example","text":"<p>Yuho Code: <pre><code>// Section 415 - Cheating\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre></p> <p>Generate Alloy: <pre><code>yuho alloy cheating.yh -o cheating.als\n</code></pre></p> <p>Generated Alloy: <pre><code>// Generated Alloy specification from Yuho\nmodule YuhoGenerated\n\nabstract sig Bool {}\none sig True, False extends Bool {}\n\nsig Cheating {\n  accused: String,\n  deception: Bool,\n  dishonest: Bool,\n  harm: Bool\n}\n\npred MatchCase0[x: univ] {\n  // Match expression conditions\n  (deception = True and dishonest = True and harm = True) =&gt; {\n    // Consequence: guilty of cheating\n  }\n}\n\nrun {} for 5\n</code></pre></p>"},{"location":"cli/alloy/#complex-legal-example","title":"Complex Legal Example","text":"<p>Yuho Code: <pre><code>// Section 378 - Theft\nstruct Theft {\n    bool dishonestIntention,\n    bool movableProperty,\n    bool withoutConsent,\n    bool movedProperty\n}\n\nmatch {\n    case dishonestIntention &amp;&amp; movableProperty &amp;&amp; \n         withoutConsent &amp;&amp; movedProperty :=\n        consequence \"guilty of theft\";\n    case _ :=\n        consequence \"not guilty of theft\";\n}\n</code></pre></p> <p>Generate Alloy: <pre><code>yuho alloy theft.yh -o theft.als\n</code></pre></p> <p>Generated Alloy: <pre><code>// Generated Alloy specification from Yuho\nmodule YuhoGenerated\n\nabstract sig Bool {}\none sig True, False extends Bool {}\n\nsig Theft {\n  dishonestIntention: Bool,\n  movableProperty: Bool,\n  withoutConsent: Bool,\n  movedProperty: Bool\n}\n\npred MatchCase0[x: univ] {\n  // Match expression conditions\n  (dishonestIntention = True and movableProperty = True and \n   withoutConsent = True and movedProperty = True) =&gt; {\n    // Consequence: guilty of theft\n  }\n}\n\nrun {} for 5\n</code></pre></p>"},{"location":"cli/alloy/#alloy-specification-components","title":"Alloy Specification Components","text":""},{"location":"cli/alloy/#signatures","title":"Signatures","text":"<p>Generated from Yuho struct definitions:</p> <pre><code>sig Cheating {\n  accused: String,\n  deception: Bool,\n  dishonest: Bool,\n  harm: Bool\n}\n</code></pre>"},{"location":"cli/alloy/#predicates","title":"Predicates","text":"<p>Generated from match-case logic:</p> <pre><code>pred MatchCase0[x: univ] {\n  // Match expression conditions\n  (deception = True and dishonest = True and harm = True) =&gt; {\n    // Consequence: guilty of cheating\n  }\n}\n</code></pre>"},{"location":"cli/alloy/#facts","title":"Facts","text":"<p>Generated from constraints:</p> <pre><code>fact {\n  // All Cheating instances must have valid boolean values\n  all c: Cheating | c.deception in Bool and c.dishonest in Bool and c.harm in Bool\n}\n</code></pre>"},{"location":"cli/alloy/#run-commands","title":"Run Commands","text":"<p>Generated for verification:</p> <pre><code>// Run command to check satisfiability\nrun {} for 5\n</code></pre>"},{"location":"cli/alloy/#type-mapping","title":"Type Mapping","text":""},{"location":"cli/alloy/#yuho-to-alloy-types","title":"Yuho to Alloy Types","text":"Yuho Type Alloy Type <code>int</code> <code>Int</code> <code>float</code> <code>Int</code> (Alloy has no floats) <code>bool</code> <code>Bool</code> (custom signature) <code>string</code> <code>String</code> <code>percent</code> <code>Int</code> <code>money</code> <code>Int</code> <code>date</code> <code>String</code> <code>duration</code> <code>String</code> Custom struct Custom signature"},{"location":"cli/alloy/#example-type-mapping","title":"Example Type Mapping","text":"<p>Yuho Code: <pre><code>struct Person {\n    string name,\n    int age,\n    bool isMinor\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>sig Person {\n  name: String,\n  age: Int,\n  isMinor: Bool\n}\n</code></pre></p>"},{"location":"cli/alloy/#verification-workflow","title":"Verification Workflow","text":""},{"location":"cli/alloy/#step-1-generate-alloy-specification","title":"Step 1: Generate Alloy Specification","text":"<pre><code>yuho alloy legal_concept.yh -o legal_concept.als\n</code></pre>"},{"location":"cli/alloy/#step-2-verify-with-alloy-analyzer","title":"Step 2: Verify with Alloy Analyzer","text":"<pre><code># Install Alloy Analyzer\n# Download from https://alloytools.org/\n\n# Run verification\njava -jar alloy.jar legal_concept.als\n</code></pre>"},{"location":"cli/alloy/#step-3-analyze-results","title":"Step 3: Analyze Results","text":"<ul> <li>Satisfiable - Model has valid instances</li> <li>Unsatisfiable - Model has no valid instances</li> <li>Counterexamples - Invalid instances found</li> </ul>"},{"location":"cli/alloy/#use-cases","title":"Use Cases","text":""},{"location":"cli/alloy/#use-case-1-legal-logic-verification","title":"Use Case 1: Legal Logic Verification","text":"<p>Problem: Need to verify legal logic is consistent</p> <p>Solution: Generate Alloy specification and verify</p> <pre><code># Generate Alloy spec\nyuho alloy statute.yh -o statute.als\n\n# Verify with Alloy Analyzer\njava -jar alloy.jar statute.als\n</code></pre> <p>Result: Formal verification of legal logic consistency</p>"},{"location":"cli/alloy/#use-case-2-legal-completeness-check","title":"Use Case 2: Legal Completeness Check","text":"<p>Problem: Need to ensure all legal cases are covered</p> <p>Solution: Generate Alloy and check for completeness</p> <pre><code># Generate Alloy spec\nyuho alloy legal_concept.yh -o legal_concept.als\n\n# Check completeness\njava -jar alloy.jar legal_concept.als\n</code></pre> <p>Result: Verification that all legal cases are covered</p>"},{"location":"cli/alloy/#use-case-3-legal-consistency-analysis","title":"Use Case 3: Legal Consistency Analysis","text":"<p>Problem: Need to find contradictions in legal logic</p> <p>Solution: Generate Alloy and analyze for contradictions</p> <pre><code># Generate Alloy spec\nyuho alloy analysis.yh -o analysis.als\n\n# Analyze for contradictions\njava -jar alloy.jar analysis.als\n</code></pre> <p>Result: Identification of legal logic contradictions</p>"},{"location":"cli/alloy/#advanced-usage","title":"Advanced Usage","text":""},{"location":"cli/alloy/#custom-alloy-specifications","title":"Custom Alloy Specifications","text":"<p>Yuho Code: <pre><code>struct LegalConcept {\n    string name,\n    bool isValid,\n    money penalty\n}\n\nmatch {\n    case isValid &amp;&amp; penalty &gt; $1000.00 :=\n        consequence \"severe penalty\";\n    case isValid :=\n        consequence \"standard penalty\";\n    case _ :=\n        consequence \"no penalty\";\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>sig LegalConcept {\n  name: String,\n  isValid: Bool,\n  penalty: Int\n}\n\npred MatchCase0[x: univ] {\n  (isValid = True and penalty &gt; 1000) =&gt; {\n    // Consequence: severe penalty\n  }\n}\n\npred MatchCase1[x: univ] {\n  (isValid = True) =&gt; {\n    // Consequence: standard penalty\n  }\n}\n\npred MatchCase2[x: univ] {\n  else =&gt; {\n    // Consequence: no penalty\n  }\n}\n</code></pre></p>"},{"location":"cli/alloy/#complex-legal-relationships","title":"Complex Legal Relationships","text":"<p>Yuho Code: <pre><code>struct LegalRelationship {\n    string party1,\n    string party2,\n    bool isActive\n}\n\nmatch {\n    case isActive :=\n        consequence \"relationship exists\";\n    case _ :=\n        consequence \"no relationship\";\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>sig LegalRelationship {\n  party1: String,\n  party2: String,\n  isActive: Bool\n}\n\npred MatchCase0[x: univ] {\n  (isActive = True) =&gt; {\n    // Consequence: relationship exists\n  }\n}\n</code></pre></p>"},{"location":"cli/alloy/#best-practices","title":"Best Practices","text":""},{"location":"cli/alloy/#1-validate-yuho-first","title":"1. Validate Yuho First","text":"<pre><code># Check Yuho file is valid\nyuho check legal_concept.yh\n\n# Generate Alloy only if valid\nyuho alloy legal_concept.yh -o legal_concept.als\n</code></pre>"},{"location":"cli/alloy/#2-use-descriptive-output-names","title":"2. Use Descriptive Output Names","text":"<pre><code># Good: Descriptive names\nyuho alloy cheating.yh -o cheating_verification.als\nyuho alloy theft.yh -o theft_analysis.als\n\n# Avoid: Generic names\nyuho alloy example.yh -o output.als\n</code></pre>"},{"location":"cli/alloy/#3-generate-for-multiple-concepts","title":"3. Generate for Multiple Concepts","text":"<pre><code># Generate Alloy for multiple legal concepts\nyuho alloy examples/cheating/cheating_illustration_A.yh -o cheating_A.als\nyuho alloy examples/cheating/cheating_illustration_B.yh -o cheating_B.als\nyuho alloy examples/theft/theft_definition.yh -o theft.als\n</code></pre>"},{"location":"cli/alloy/#4-integrate-with-verification-workflow","title":"4. Integrate with Verification Workflow","text":"<pre><code># Generate and verify in one workflow\nyuho alloy legal_concept.yh -o legal_concept.als\njava -jar alloy.jar legal_concept.als\n</code></pre>"},{"location":"cli/alloy/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/alloy/#common-issues","title":"Common Issues","text":""},{"location":"cli/alloy/#issue-1-invalid-yuho-file","title":"Issue 1: Invalid Yuho File","text":"<pre><code>$ yuho alloy invalid.yh\n\u2717 Error: Invalid Yuho file\n</code></pre> <p>Solution: Check file with <code>yuho check</code> first:</p> <pre><code>yuho check invalid.yh\n# Fix errors, then try again\nyuho alloy invalid.yh\n</code></pre>"},{"location":"cli/alloy/#issue-2-empty-output","title":"Issue 2: Empty Output","text":"<pre><code>$ yuho alloy empty.yh\n# No output generated\n</code></pre> <p>Solution: Ensure file has content:</p> <pre><code>// Add some content\nstruct Test {\n    bool field\n}\n\nmatch {\n    case field := consequence \"result\";\n    case _ := consequence \"default\";\n}\n</code></pre>"},{"location":"cli/alloy/#issue-3-permission-denied","title":"Issue 3: Permission Denied","text":"<pre><code>$ yuho alloy example.yh -o protected.als\n\u2717 Error: Permission denied: protected.als\n</code></pre> <p>Solution: Check file permissions:</p> <pre><code>ls -la protected.als\nchmod 644 protected.als\nyuho alloy example.yh -o protected.als\n</code></pre>"},{"location":"cli/alloy/#performance","title":"Performance","text":""},{"location":"cli/alloy/#generation-speed","title":"Generation Speed","text":"<p>Typical generation times:</p> File Size Statements Time Small 1-10 &lt;10ms Medium 11-100 &lt;50ms Large 101-1000 &lt;500ms Very Large 1000+ &lt;2s"},{"location":"cli/alloy/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Generate to files for repeated use</li> <li>Batch generate multiple specifications</li> <li>Cache results for large files</li> <li>Use appropriate scope for verification</li> </ol>"},{"location":"cli/alloy/#integration-with-alloy-analyzer","title":"Integration with Alloy Analyzer","text":""},{"location":"cli/alloy/#installation","title":"Installation","text":"<ol> <li>Download Alloy Analyzer from alloytools.org</li> <li>Install Java (required for Alloy)</li> <li>Run Alloy Analyzer</li> </ol>"},{"location":"cli/alloy/#basic-verification","title":"Basic Verification","text":"<pre><code># Generate Alloy specification\nyuho alloy legal_concept.yh -o legal_concept.als\n\n# Open in Alloy Analyzer\njava -jar alloy.jar legal_concept.als\n</code></pre>"},{"location":"cli/alloy/#advanced-verification","title":"Advanced Verification","text":"<pre><code># Generate with custom scope\nyuho alloy legal_concept.yh -o legal_concept.als\n\n# Run with specific scope\njava -jar alloy.jar legal_concept.als\n</code></pre>"},{"location":"cli/alloy/#next-steps","title":"Next Steps","text":"<ul> <li>Draw Command - Generate visual diagrams</li> <li>Draft Command - Create new Yuho files</li> <li>REPL - Interactive development</li> <li>Check Command - Validate files before generating Alloy</li> </ul>"},{"location":"cli/check/","title":"Check Command","text":"<p>The <code>yuho check</code> command validates Yuho source files for syntax and semantic correctness.</p>"},{"location":"cli/check/#overview","title":"Overview","text":"<p>The <code>check</code> command performs comprehensive validation of Yuho files:</p> <ul> <li>Syntax Validation - Ensures proper Yuho syntax</li> <li>Semantic Analysis - Validates types and logic</li> <li>Error Reporting - Provides detailed error messages</li> <li>Quick Feedback - Fast validation for development</li> </ul>"},{"location":"cli/check/#basic-usage","title":"Basic Usage","text":"<pre><code>yuho check &lt;file_path&gt;\n</code></pre>"},{"location":"cli/check/#examples","title":"Examples","text":"<pre><code># Check a single file\nyuho check example.yh\n\n# Check with verbose output\nyuho check example.yh --verbose\n\n# Check file in subdirectory\nyuho check examples/cheating/cheating_illustration_A.yh\n</code></pre>"},{"location":"cli/check/#command-options","title":"Command Options","text":""},{"location":"cli/check/#-verbose-v","title":"<code>--verbose</code>, <code>-v</code>","text":"<p>Show detailed output including AST structure:</p> <pre><code>yuho check example.yh --verbose\n</code></pre> <p>Output: <pre><code>Checking example.yh...\n\u2713 Syntax check passed\n\u2713 Semantic check passed\n\u2713 example.yh looks good! Have confidence your Yuho file is correct\nAST Structure:\n  Statements: 3\n</code></pre></p>"},{"location":"cli/check/#validation-process","title":"Validation Process","text":""},{"location":"cli/check/#step-1-syntax-validation","title":"Step 1: Syntax Validation","text":"<p>The parser checks for: - Valid Yuho syntax - Proper struct definitions - Correct match-case syntax - Valid function definitions</p> <p>Example Error: <pre><code>$ yuho check invalid.yh\n\u2717 Error: Syntax error at line 3: expected 'bool' but found 'boolean'\n</code></pre></p>"},{"location":"cli/check/#step-2-semantic-analysis","title":"Step 2: Semantic Analysis","text":"<p>The semantic analyzer checks for: - Type consistency - Variable declarations - Function signatures - Match-case completeness</p> <p>Example Error: <pre><code>$ yuho check invalid.yh\n\u2713 Syntax check passed\n\u2717 Semantic errors found:\n  ERROR: Variable 'age' used before declaration\n  ERROR: Type mismatch: expected 'int' but found 'string'\n</code></pre></p>"},{"location":"cli/check/#common-validation-errors","title":"Common Validation Errors","text":""},{"location":"cli/check/#syntax-errors","title":"Syntax Errors","text":""},{"location":"cli/check/#error-1-invalid-type","title":"Error 1: Invalid Type","text":"<pre><code>// Invalid: 'boolean' should be 'bool'\nstruct Person {\n    string name,\n    boolean age  // Error: should be 'bool'\n}\n</code></pre> <p>Fix: <pre><code>struct Person {\n    string name,\n    bool age  // Correct\n}\n</code></pre></p>"},{"location":"cli/check/#error-2-missing-semicolon","title":"Error 2: Missing Semicolon","text":"<pre><code>// Invalid: Missing semicolon\nint age := 25\nstring name := \"John\"\n\n// Fix: Add semicolons\nint age := 25;\nstring name := \"John\";\n</code></pre>"},{"location":"cli/check/#error-3-invalid-match-case","title":"Error 3: Invalid Match-Case","text":"<pre><code>// Invalid: Missing default case\nmatch {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    // Missing: case _ := consequence default;\n}\n</code></pre> <p>Fix: <pre><code>match {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    case _ := consequence default;\n}\n</code></pre></p>"},{"location":"cli/check/#semantic-errors","title":"Semantic Errors","text":""},{"location":"cli/check/#error-1-type-mismatch","title":"Error 1: Type Mismatch","text":"<pre><code>// Invalid: string cannot be int\nint age := \"25\";  // Error: string cannot be int\n</code></pre> <p>Fix: <pre><code>int age := 25;  // Correct: int value\n</code></pre></p>"},{"location":"cli/check/#error-2-undefined-variable","title":"Error 2: Undefined Variable","text":"<pre><code>// Invalid: variable used before declaration\nmatch {\n    case age &gt; 18 := consequence \"adult\";\n    case _ := consequence \"minor\";\n}\n\nint age := 25;  // Error: age used before declaration\n</code></pre> <p>Fix: <pre><code>int age := 25;\n\nmatch {\n    case age &gt; 18 := consequence \"adult\";\n    case _ := consequence \"minor\";\n}\n</code></pre></p>"},{"location":"cli/check/#error-3-incomplete-match-case","title":"Error 3: Incomplete Match-Case","text":"<pre><code>// Invalid: missing cases for boolean\nbool isGuilty := TRUE;\n\nmatch isGuilty {\n    case TRUE := consequence \"guilty\";\n    // Missing: case FALSE := consequence \"not guilty\";\n}\n</code></pre> <p>Fix: <pre><code>bool isGuilty := TRUE;\n\nmatch isGuilty {\n    case TRUE := consequence \"guilty\";\n    case FALSE := consequence \"not guilty\";\n}\n</code></pre></p>"},{"location":"cli/check/#validation-examples","title":"Validation Examples","text":""},{"location":"cli/check/#valid-file","title":"Valid File","text":"<pre><code>// Section 415 - Cheating\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\nCheating case1 := {\n    deception := TRUE,\n    dishonest := TRUE,\n    harm := TRUE\n};\n\nmatch {\n    case case1.deception &amp;&amp; case1.dishonest &amp;&amp; case1.harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre> <p>Validation Result: <pre><code>$ yuho check cheating.yh\n\u2713 Syntax check passed\n\u2713 Semantic check passed\n\u2713 cheating.yh looks good! Have confidence your Yuho file is correct\n</code></pre></p>"},{"location":"cli/check/#invalid-file","title":"Invalid File","text":"<pre><code>// Section 415 - Cheating\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\nCheating case1 := {\n    deception := TRUE,\n    dishonest := TRUE,\n    harm := TRUE\n};\n\nmatch {\n    case case1.deception &amp;&amp; case1.dishonest &amp;&amp; case1.harm :=\n        consequence \"guilty of cheating\";\n    // Missing default case\n}\n</code></pre> <p>Validation Result: <pre><code>$ yuho check cheating.yh\n\u2713 Syntax check passed\n\u2717 Semantic errors found:\n  ERROR: Match-case must include default case\n</code></pre></p>"},{"location":"cli/check/#best-practices","title":"Best Practices","text":""},{"location":"cli/check/#1-check-early-and-often","title":"1. Check Early and Often","text":"<pre><code># Check during development\nyuho check example.yh\n\n# Check before committing\nyuho check *.yh\n</code></pre>"},{"location":"cli/check/#2-use-verbose-mode-for-debugging","title":"2. Use Verbose Mode for Debugging","text":"<pre><code># Get detailed information\nyuho check example.yh --verbose\n</code></pre>"},{"location":"cli/check/#3-check-all-files","title":"3. Check All Files","text":"<pre><code># Check all .yh files in directory\nfor file in *.yh; do\n    yuho check \"$file\"\ndone\n</code></pre>"},{"location":"cli/check/#4-integrate-with-development-workflow","title":"4. Integrate with Development Workflow","text":"<pre><code># Pre-commit hook\n#!/bin/bash\nfor file in $(git diff --cached --name-only --diff-filter=ACM | grep '\\.yh$'); do\n    yuho check \"$file\" || exit 1\ndone\n</code></pre>"},{"location":"cli/check/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Success - file is valid 1 Syntax error 2 Semantic error 3 File not found 4 Invalid arguments"},{"location":"cli/check/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/check/#common-issues","title":"Common Issues","text":""},{"location":"cli/check/#issue-1-file-not-found","title":"Issue 1: File Not Found","text":"<pre><code>$ yuho check nonexistent.yh\n\u2717 Error: File not found: nonexistent.yh\n</code></pre> <p>Solution: Check file path and ensure file exists:</p> <pre><code>ls -la nonexistent.yh\nyuho check ./nonexistent.yh\n</code></pre>"},{"location":"cli/check/#issue-2-permission-denied","title":"Issue 2: Permission Denied","text":"<pre><code>$ yuho check protected.yh\n\u2717 Error: Permission denied: protected.yh\n</code></pre> <p>Solution: Check file permissions:</p> <pre><code>ls -la protected.yh\nchmod 644 protected.yh\nyuho check protected.yh\n</code></pre>"},{"location":"cli/check/#issue-3-invalid-file-extension","title":"Issue 3: Invalid File Extension","text":"<pre><code>$ yuho check example.txt\n\u2717 Error: Invalid file extension. Expected .yh file\n</code></pre> <p>Solution: Use correct file extension:</p> <pre><code>mv example.txt example.yh\nyuho check example.yh\n</code></pre>"},{"location":"cli/check/#integration-with-ides","title":"Integration with IDEs","text":""},{"location":"cli/check/#vs-code","title":"VS Code","text":"<p>Add to <code>.vscode/tasks.json</code>:</p> <pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Yuho Check\",\n            \"type\": \"shell\",\n            \"command\": \"yuho\",\n            \"args\": [\"check\", \"${file}\"],\n            \"group\": \"build\",\n            \"presentation\": {\n                \"echo\": true,\n                \"reveal\": \"always\",\n                \"focus\": false,\n                \"panel\": \"shared\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"cli/check/#vimneovim","title":"Vim/Neovim","text":"<p>Add to <code>.vimrc</code>:</p> <pre><code>\" Yuho check command\ncommand! YuhoCheck !yuho check %\n</code></pre>"},{"location":"cli/check/#emacs","title":"Emacs","text":"<p>Add to <code>.emacs</code>:</p> <pre><code>(defun yuho-check ()\n  \"Check current Yuho file\"\n  (interactive)\n  (shell-command (concat \"yuho check \" (buffer-file-name))))\n</code></pre>"},{"location":"cli/check/#performance","title":"Performance","text":""},{"location":"cli/check/#validation-speed","title":"Validation Speed","text":"<p>Typical validation times:</p> File Size Statements Time Small 1-10 &lt;10ms Medium 11-100 &lt;50ms Large 101-1000 &lt;500ms Very Large 1000+ &lt;2s"},{"location":"cli/check/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Check individual files during development</li> <li>Batch check multiple files for CI/CD</li> <li>Use verbose mode only when debugging</li> <li>Cache results for repeated checks</li> </ol>"},{"location":"cli/check/#next-steps","title":"Next Steps","text":"<ul> <li>Draw Command - Generate diagrams from valid files</li> <li>Alloy Command - Generate Alloy specifications</li> <li>Draft Command - Create new Yuho files</li> <li>REPL - Interactive development</li> </ul>"},{"location":"cli/commands/","title":"CLI Commands Reference","text":"<p>Complete reference for all Yuho command-line interface commands.</p>"},{"location":"cli/commands/#overview","title":"Overview","text":"<p>Yuho provides a comprehensive CLI for all operations:</p> <pre><code>yuho [COMMAND] [OPTIONS] [ARGUMENTS]\n</code></pre>"},{"location":"cli/commands/#commands","title":"Commands","text":""},{"location":"cli/commands/#yuho-check","title":"<code>yuho check</code>","text":"<p>Validate Yuho source files for syntax and semantic correctness.</p> <p>Usage: <pre><code>yuho check &lt;file_path&gt; [OPTIONS]\n</code></pre></p> <p>Arguments: - <code>file_path</code> - Path to the <code>.yh</code> file to check (required)</p> <p>Options: - <code>--verbose</code>, <code>-v</code> - Show detailed output including AST structure</p> <p>Examples: <pre><code># Basic syntax check\nyuho check example.yh\n\n# Check with verbose output\nyuho check example.yh --verbose\n\n# Check file in subdirectory\nyuho check example/cheating/cheating_illustration_A.yh\n</code></pre></p> <p>Output: - \u2713 Success: Shows syntax and semantic validation passed - \u2717 Error: Shows detailed error messages with suggestions</p>"},{"location":"cli/commands/#yuho-draw","title":"<code>yuho draw</code>","text":"<p>Generate Mermaid diagrams from Yuho source files.</p> <p>Usage: <pre><code>yuho draw &lt;file_path&gt; [OPTIONS]\n</code></pre></p> <p>Arguments: - <code>file_path</code> - Path to the <code>.yh</code> file (required)</p> <p>Options: - <code>--output</code>, <code>-o</code> - Output file path (default: stdout) - <code>--format</code>, <code>-f</code> - Diagram format: <code>flowchart</code> or <code>mindmap</code> (default: <code>flowchart</code>)</p> <p>Examples: <pre><code># Generate flowchart to stdout\nyuho draw example.yh\n\n# Generate flowchart to file\nyuho draw example.yh --format flowchart -o diagram.mmd\n\n# Generate mindmap\nyuho draw example.yh --format mindmap -o mindmap.mmd\n\n# Short form\nyuho draw example.yh -f flowchart -o output.mmd\n</code></pre></p> <p>Output Formats:</p> <p>Flowchart - Shows control flow and logic: <pre><code>yuho draw cheating.yh -f flowchart -o cheating_flow.mmd\n</code></pre></p> <p>Mindmap - Shows hierarchical structure: <pre><code>yuho draw cheating.yh -f mindmap -o cheating_mind.mmd\n</code></pre></p>"},{"location":"cli/commands/#yuho-alloy","title":"<code>yuho alloy</code>","text":"<p>Generate Alloy specifications for formal verification.</p> <p>Usage: <pre><code>yuho alloy &lt;file_path&gt; [OPTIONS]\n</code></pre></p> <p>Arguments: - <code>file_path</code> - Path to the <code>.yh</code> file (required)</p> <p>Options: - <code>--output</code>, <code>-o</code> - Output file path (default: stdout)</p> <p>Examples: <pre><code># Generate Alloy spec to stdout\nyuho alloy example.yh\n\n# Save to file\nyuho alloy example.yh -o specification.als\n\n# Generate from legal example\nyuho alloy example/cheating/s415_cheating_definition.yh -o cheating.als\n</code></pre></p> <p>Output: Generates an Alloy specification including: - Signatures from struct definitions - Predicates from match-case logic - Facts from constraints - Run commands for verification</p>"},{"location":"cli/commands/#yuho-draft","title":"<code>yuho draft</code>","text":"<p>Create a new Yuho file template with basic structure.</p> <p>Usage: <pre><code>yuho draft &lt;struct_name&gt; [OPTIONS]\n</code></pre></p> <p>Arguments: - <code>struct_name</code> - Name of the main struct (required)</p> <p>Options: - <code>--output</code>, <code>-o</code> - Output file path (default: <code>&lt;struct_name&gt;.yh</code>)</p> <p>Examples: <pre><code># Create template with default filename\nyuho draft Theft\n# Creates: theft.yh\n\n# Create with custom filename\nyuho draft Contract -o my_contract.yh\n\n# Create for legal concept\nyuho draft CriminalBreach -o criminal_breach.yh\n</code></pre></p> <p>Generated Template: <pre><code>// Yuho v3.0 - Generated template for StructName\n\nstruct StructName {\n    // Add your fields here\n    // Example:\n    // accused: string,\n    // action: string,\n    // victim: string,\n    // consequence: ConsequenceType,\n}\n\n// Add match-case logic here\n// Example:\n// match {\n//     case condition := consequence result;\n//     case _ := consequence pass;\n// }\n</code></pre></p>"},{"location":"cli/commands/#yuho-how","title":"<code>yuho how</code>","text":"<p>Display help and usage examples.</p> <p>Usage: <pre><code>yuho how\n</code></pre></p> <p>Output: Shows comprehensive help including: - Common usage examples - File structure guidelines - Available types - Links to documentation</p> <p>Example: <pre><code>yuho how\n</code></pre></p>"},{"location":"cli/commands/#yuho-repl","title":"<code>yuho-repl</code>","text":"<p>Start the interactive Yuho REPL (Read-Eval-Print Loop).</p> <p>Usage: <pre><code>yuho-repl\n</code></pre></p> <p>REPL Commands:</p> Command Description <code>help</code> Show REPL help <code>history</code> Show command history <code>clear</code> Clear screen <code>load &lt;file&gt;</code> Load and parse a file <code>mermaid</code> Generate Mermaid from last input <code>alloy</code> Generate Alloy from last input <code>exit</code>, <code>quit</code> Exit REPL <p>Examples: <pre><code># Start REPL\nyuho-repl\n\n# In REPL:\nyuho&gt; struct Person { string name, int age }\n\u2713 Valid Yuho code\n\nyuho&gt; int x := 42;\n\u2713 Valid Yuho code\n\nyuho&gt; load example.yh\n\u2713 Successfully loaded example.yh\n\nyuho&gt; mermaid\n[Shows Mermaid diagram]\n\nyuho&gt; help\n[Shows REPL commands]\n\nyuho&gt; exit\n</code></pre></p>"},{"location":"cli/commands/#yuho-version","title":"<code>yuho --version</code>","text":"<p>Display Yuho version information.</p> <p>Usage: <pre><code>yuho --version\n</code></pre></p> <p>Output: <pre><code>yuho, version 3.0.0\n</code></pre></p>"},{"location":"cli/commands/#yuho-help","title":"<code>yuho --help</code>","text":"<p>Display help information for all commands.</p> <p>Usage: <pre><code>yuho --help\n\n# Or for specific command\nyuho check --help\nyuho draw --help\nyuho alloy --help\n</code></pre></p>"},{"location":"cli/commands/#common-workflows","title":"Common Workflows","text":""},{"location":"cli/commands/#workflow-1-check-and-visualize","title":"Workflow 1: Check and Visualize","text":"<pre><code># 1. Check file is valid\nyuho check offense.yh\n\n# 2. Generate flowchart\nyuho draw offense.yh -f flowchart -o offense_flow.mmd\n\n# 3. Generate mindmap\nyuho draw offense.yh -f mindmap -o offense_mind.mmd\n\n# 4. Generate Alloy spec for verification\nyuho alloy offense.yh -o offense.als\n</code></pre>"},{"location":"cli/commands/#workflow-2-create-new-statute","title":"Workflow 2: Create New Statute","text":"<pre><code># 1. Create template\nyuho draft Theft -o theft.yh\n\n# 2. Edit the file (add fields and logic)\nvim theft.yh\n\n# 3. Check for errors\nyuho check theft.yh\n\n# 4. Generate diagrams\nyuho draw theft.yh -f flowchart -o theft_diagram.mmd\n</code></pre>"},{"location":"cli/commands/#workflow-3-interactive-development","title":"Workflow 3: Interactive Development","text":"<pre><code># 1. Start REPL\nyuho-repl\n\n# 2. Try out syntax interactively\nyuho&gt; struct Test { string field }\n\n# 3. Load a file to test\nyuho&gt; load example.yh\n\n# 4. Generate output\nyuho&gt; mermaid\n</code></pre>"},{"location":"cli/commands/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Success 1 Syntax error 2 Semantic error 3 File not found 4 Invalid arguments"},{"location":"cli/commands/#environment-variables","title":"Environment Variables","text":"<p>Currently, Yuho does not use environment variables, but future versions may support:</p> <ul> <li><code>YUHO_CONFIG</code> - Path to configuration file</li> <li><code>YUHO_LOG_LEVEL</code> - Logging level (DEBUG, INFO, WARNING, ERROR)</li> </ul>"},{"location":"cli/commands/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"cli/commands/#batch-processing","title":"Batch Processing","text":"<pre><code># Check all files in a directory\nfor file in example/cheating/*.yh; do\n    yuho check \"$file\"\ndone\n\n# Generate diagrams for all files\nfor file in *.yh; do\n    yuho draw \"$file\" -f flowchart -o \"${file%.yh}.mmd\"\ndone\n</code></pre>"},{"location":"cli/commands/#piping-output","title":"Piping Output","text":"<pre><code># Check and save results\nyuho check example.yh &gt; check_results.txt 2&gt;&amp;1\n\n# Generate and view immediately\nyuho draw example.yh | less\n</code></pre>"},{"location":"cli/commands/#using-with-git-hooks","title":"Using with Git Hooks","text":"<pre><code># Pre-commit hook to check all .yh files\n#!/bin/bash\nfor file in $(git diff --cached --name-only --diff-filter=ACM | grep '\\.yh$'); do\n    yuho check \"$file\" || exit 1\ndone\n</code></pre>"},{"location":"cli/commands/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/commands/#command-not-found","title":"Command Not Found","text":"<pre><code># Ensure Yuho is installed\npip install -e .\n\n# Check installation\nwhich yuho\nyuho --version\n</code></pre>"},{"location":"cli/commands/#file-not-found-errors","title":"File Not Found Errors","text":"<pre><code># Use absolute paths\nyuho check /full/path/to/file.yh\n\n# Or navigate to directory\ncd /path/to/files\nyuho check file.yh\n</code></pre>"},{"location":"cli/commands/#import-errors","title":"Import Errors","text":"<pre><code># Ensure dependencies are installed\npip install -r requirements.txt\n\n# Reinstall Yuho\npip install -e . --force-reinstall\n</code></pre>"},{"location":"cli/commands/#see-also","title":"See Also","text":"<ul> <li>REPL Guide</li> <li>Quick Start</li> <li>Examples</li> <li>Language Syntax</li> </ul>"},{"location":"cli/draft/","title":"Draft Command","text":"<p>The <code>yuho draft</code> command creates new Yuho file templates with basic structure.</p>"},{"location":"cli/draft/#overview","title":"Overview","text":"<p>The <code>draft</code> command helps you get started with new Yuho files:</p> <ul> <li>Template Generation - Creates structured templates</li> <li>Legal Context - Includes legal documentation placeholders</li> <li>Best Practices - Follows Yuho coding standards</li> <li>Quick Start - Get coding immediately</li> </ul>"},{"location":"cli/draft/#basic-usage","title":"Basic Usage","text":"<pre><code>yuho draft &lt;struct_name&gt; [OPTIONS]\n</code></pre>"},{"location":"cli/draft/#examples","title":"Examples","text":"<pre><code># Create template with default filename\nyuho draft Cheating\n# Creates: cheating.yh\n\n# Create with custom filename\nyuho draft Contract -o my_contract.yh\n\n# Create for legal concept\nyuho draft CriminalBreach -o criminal_breach.yh\n</code></pre>"},{"location":"cli/draft/#command-options","title":"Command Options","text":""},{"location":"cli/draft/#-output-o","title":"<code>--output</code>, <code>-o</code>","text":"<p>Specify output file path:</p> <pre><code>yuho draft Cheating -o custom_cheating.yh\n</code></pre> <p>Default: <code>&lt;struct_name&gt;.yh</code> (lowercase)</p>"},{"location":"cli/draft/#generated-template","title":"Generated Template","text":""},{"location":"cli/draft/#basic-template-structure","title":"Basic Template Structure","text":"<pre><code>// Yuho v3.0 - Generated template for StructName\n\nstruct StructName {\n    // Add your fields here\n    // Example:\n    // accused: string,\n    // action: string,\n    // victim: string,\n    // consequence: ConsequenceType,\n}\n\n// Add match-case logic here\n// Example:\n// match {\n//     case condition := consequence result;\n//     case _ := consequence pass;\n// }\n</code></pre>"},{"location":"cli/draft/#example-cheating-template","title":"Example: Cheating Template","text":"<pre><code>yuho draft Cheating\n</code></pre> <p>Generated File: <code>cheating.yh</code> <pre><code>// Yuho v3.0 - Generated template for Cheating\n\nstruct Cheating {\n    // Add your fields here\n    // Example:\n    // accused: string,\n    // action: string,\n    // victim: string,\n    // consequence: ConsequenceType,\n}\n\n// Add match-case logic here\n// Example:\n// match {\n//     case condition := consequence result;\n//     case _ := consequence pass;\n// }\n</code></pre></p>"},{"location":"cli/draft/#example-custom-filename","title":"Example: Custom Filename","text":"<pre><code>yuho draft Theft -o theft_offense.yh\n</code></pre> <p>Generated File: <code>theft_offense.yh</code> <pre><code>// Yuho v3.0 - Generated template for Theft\n\nstruct Theft {\n    // Add your fields here\n    // Example:\n    // accused: string,\n    // action: string,\n    // victim: string,\n    // consequence: ConsequenceType,\n}\n\n// Add match-case logic here\n// Example:\n// match {\n//     case condition := consequence result;\n//     case _ := consequence pass;\n// }\n</code></pre></p>"},{"location":"cli/draft/#customizing-templates","title":"Customizing Templates","text":""},{"location":"cli/draft/#step-1-add-legal-context","title":"Step 1: Add Legal Context","text":"<pre><code>// Section 415 - Cheating\n// Whoever, by deceiving any person, fraudulently or dishonestly...\nstruct Cheating {\n    // Add your fields here\n}\n</code></pre>"},{"location":"cli/draft/#step-2-define-struct-fields","title":"Step 2: Define Struct Fields","text":"<pre><code>struct Cheating {\n    string accused,\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n</code></pre>"},{"location":"cli/draft/#step-3-add-match-case-logic","title":"Step 3: Add Match-Case Logic","text":"<pre><code>match {\n    case deception &amp;&amp; dishonest &amp;&amp; harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"cli/draft/#step-4-add-variable-declarations","title":"Step 4: Add Variable Declarations","text":"<pre><code>// Example case\nCheating case1 := {\n    accused := \"Alice\",\n    deception := TRUE,\n    dishonest := TRUE,\n    harm := TRUE\n};\n</code></pre>"},{"location":"cli/draft/#legal-examples","title":"Legal Examples","text":""},{"location":"cli/draft/#example-1-cheating-offense","title":"Example 1: Cheating Offense","text":"<pre><code>yuho draft Cheating -o cheating.yh\n</code></pre> <p>Customized Template: <pre><code>// Section 415 - Cheating\n// Whoever, by deceiving any person, fraudulently or dishonestly induces the person so deceived to deliver any property to any person, or to consent that any person shall retain any property, or intentionally induces the person so deceived to do or omit to do anything which he would not do or omit if he were not so deceived, and which act or omission causes or is likely to cause damage or harm to that person in body, mind, reputation or property, is said to \"cheat\".\n\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\n// Example case\nCheating case1 := {\n    accused := \"Alice\",\n    deception := TRUE,\n    dishonest := TRUE,\n    harm := TRUE\n};\n\nmatch {\n    case case1.deception &amp;&amp; case1.dishonest &amp;&amp; case1.harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre></p>"},{"location":"cli/draft/#example-2-theft-offense","title":"Example 2: Theft Offense","text":"<pre><code>yuho draft Theft -o theft.yh\n</code></pre> <p>Customized Template: <pre><code>// Section 378 - Theft\n// Whoever, intending to take dishonestly any movable property out of the possession of any person without that person's consent, moves that property in order to such taking, is said to commit theft.\n\nstruct Theft {\n    string accused,\n    bool dishonestIntention,\n    bool movableProperty,\n    bool withoutConsent,\n    bool movedProperty\n}\n\n// Example case\nTheft case1 := {\n    accused := \"Bob\",\n    dishonestIntention := TRUE,\n    movableProperty := TRUE,\n    withoutConsent := TRUE,\n    movedProperty := TRUE\n};\n\nmatch {\n    case case1.dishonestIntention &amp;&amp; case1.movableProperty &amp;&amp; \n         case1.withoutConsent &amp;&amp; case1.movedProperty :=\n        consequence \"guilty of theft\";\n    case _ :=\n        consequence \"not guilty of theft\";\n}\n</code></pre></p>"},{"location":"cli/draft/#example-3-contract-formation","title":"Example 3: Contract Formation","text":"<pre><code>yuho draft Contract -o contract.yh\n</code></pre> <p>Customized Template: <pre><code>// Contract Formation\n// A contract is formed when there is offer, acceptance, and consideration.\n\nstruct Contract {\n    string offeror,\n    string offeree,\n    bool offer,\n    bool acceptance,\n    bool consideration\n}\n\n// Example contract\nContract contract1 := {\n    offeror := \"Alice\",\n    offeree := \"Bob\",\n    offer := TRUE,\n    acceptance := TRUE,\n    consideration := TRUE\n};\n\nmatch {\n    case contract1.offer &amp;&amp; contract1.acceptance &amp;&amp; contract1.consideration :=\n        consequence \"contract formed\";\n    case _ :=\n        consequence \"no contract\";\n}\n</code></pre></p>"},{"location":"cli/draft/#best-practices","title":"Best Practices","text":""},{"location":"cli/draft/#1-use-descriptive-struct-names","title":"1. Use Descriptive Struct Names","text":"<pre><code># Good: Clear legal context\nyuho draft Cheating\nyuho draft Theft\nyuho draft Contract\n\n# Avoid: Generic names\nyuho draft Thing\nyuho draft Stuff\nyuho draft Example\n</code></pre>"},{"location":"cli/draft/#2-use-appropriate-filenames","title":"2. Use Appropriate Filenames","text":"<pre><code># Good: Descriptive filenames\nyuho draft Cheating -o cheating_offense.yh\nyuho draft Theft -o theft_definition.yh\nyuho draft Contract -o contract_formation.yh\n\n# Avoid: Generic filenames\nyuho draft Cheating -o example.yh\nyuho draft Theft -o test.yh\n</code></pre>"},{"location":"cli/draft/#3-add-legal-context","title":"3. Add Legal Context","text":"<pre><code>// Always include legal source\n// Section 415 - Cheating\nstruct Cheating {\n    // struct definition\n}\n</code></pre>"},{"location":"cli/draft/#4-follow-naming-conventions","title":"4. Follow Naming Conventions","text":"<pre><code># Good: PascalCase for struct names\nyuho draft Cheating\nyuho draft Theft\nyuho draft Contract\n\n# Good: snake_case for filenames\nyuho draft Cheating -o cheating_offense.yh\nyuho draft Theft -o theft_definition.yh\n</code></pre>"},{"location":"cli/draft/#common-patterns","title":"Common Patterns","text":""},{"location":"cli/draft/#pattern-1-criminal-offense","title":"Pattern 1: Criminal Offense","text":"<pre><code>yuho draft CriminalOffense -o criminal_offense.yh\n</code></pre> <p>Template Structure: <pre><code>struct CriminalOffense {\n    string accused,\n    string victim,\n    bool actusReus,\n    bool mensRea,\n    string consequence\n}\n</code></pre></p>"},{"location":"cli/draft/#pattern-2-civil-law","title":"Pattern 2: Civil Law","text":"<pre><code>yuho draft CivilClaim -o civil_claim.yh\n</code></pre> <p>Template Structure: <pre><code>struct CivilClaim {\n    string plaintiff,\n    string defendant,\n    bool breach,\n    bool damages,\n    money amount\n}\n</code></pre></p>"},{"location":"cli/draft/#pattern-3-contract-law","title":"Pattern 3: Contract Law","text":"<pre><code>yuho draft Contract -o contract.yh\n</code></pre> <p>Template Structure: <pre><code>struct Contract {\n    string party1,\n    string party2,\n    bool offer,\n    bool acceptance,\n    bool consideration\n}\n</code></pre></p>"},{"location":"cli/draft/#workflow-integration","title":"Workflow Integration","text":""},{"location":"cli/draft/#step-1-create-template","title":"Step 1: Create Template","text":"<pre><code>yuho draft LegalConcept -o legal_concept.yh\n</code></pre>"},{"location":"cli/draft/#step-2-customize-template","title":"Step 2: Customize Template","text":"<pre><code>// Add legal context\n// Section XXX - Legal Concept\nstruct LegalConcept {\n    // Add fields\n    // Add logic\n}\n</code></pre>"},{"location":"cli/draft/#step-3-validate","title":"Step 3: Validate","text":"<pre><code>yuho check legal_concept.yh\n</code></pre>"},{"location":"cli/draft/#step-4-generate-outputs","title":"Step 4: Generate Outputs","text":"<pre><code># Generate diagrams\nyuho draw legal_concept.yh -f flowchart -o legal_concept_flow.mmd\nyuho draw legal_concept.yh -f mindmap -o legal_concept_mind.mmd\n\n# Generate Alloy spec\nyuho alloy legal_concept.yh -o legal_concept.als\n</code></pre>"},{"location":"cli/draft/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/draft/#common-issues","title":"Common Issues","text":""},{"location":"cli/draft/#issue-1-invalid-struct-name","title":"Issue 1: Invalid Struct Name","text":"<pre><code>$ yuho draft 123Invalid\n\u2717 Error: Invalid struct name\n</code></pre> <p>Solution: Use valid identifier:</p> <pre><code>yuho draft ValidStruct\n</code></pre>"},{"location":"cli/draft/#issue-2-file-already-exists","title":"Issue 2: File Already Exists","text":"<pre><code>$ yuho draft Cheating\n\u2717 Error: File already exists: cheating.yh\n</code></pre> <p>Solution: Use different filename:</p> <pre><code>yuho draft Cheating -o new_cheating.yh\n</code></pre>"},{"location":"cli/draft/#issue-3-permission-denied","title":"Issue 3: Permission Denied","text":"<pre><code>$ yuho draft Cheating -o protected.yh\n\u2717 Error: Permission denied: protected.yh\n</code></pre> <p>Solution: Check file permissions:</p> <pre><code>ls -la protected.yh\nchmod 644 protected.yh\nyuho draft Cheating -o protected.yh\n</code></pre>"},{"location":"cli/draft/#advanced-usage","title":"Advanced Usage","text":""},{"location":"cli/draft/#batch-template-creation","title":"Batch Template Creation","text":"<pre><code># Create multiple templates\nyuho draft Cheating -o cheating.yh\nyuho draft Theft -o theft.yh\nyuho draft Contract -o contract.yh\nyuho draft Tort -o tort.yh\n</code></pre>"},{"location":"cli/draft/#template-customization","title":"Template Customization","text":"<pre><code># Create template\nyuho draft LegalConcept -o legal_concept.yh\n\n# Customize with legal context\n# Add Section reference\n# Add legal definition\n# Add example cases\n</code></pre>"},{"location":"cli/draft/#integration-with-development","title":"Integration with Development","text":"<pre><code># Create template\nyuho draft Cheating -o cheating.yh\n\n# Edit template\nvim cheating.yh\n\n# Validate\nyuho check cheating.yh\n\n# Generate outputs\nyuho draw cheating.yh -f flowchart -o cheating_flow.mmd\nyuho alloy cheating.yh -o cheating.als\n</code></pre>"},{"location":"cli/draft/#performance","title":"Performance","text":""},{"location":"cli/draft/#template-generation-speed","title":"Template Generation Speed","text":"<p>Typical generation times:</p> Template Size Time Basic &lt;10ms Complex &lt;50ms Very Complex &lt;100ms"},{"location":"cli/draft/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Use descriptive names for better organization</li> <li>Create templates in batches for efficiency</li> <li>Customize templates after generation</li> <li>Validate templates before use</li> </ol>"},{"location":"cli/draft/#next-steps","title":"Next Steps","text":"<ul> <li>Check Command - Validate generated templates</li> <li>Draw Command - Generate diagrams from templates</li> <li>Alloy Command - Generate Alloy specifications</li> <li>REPL - Interactive development</li> </ul>"},{"location":"cli/draw/","title":"Draw Command","text":"<p>The <code>yuho draw</code> command generates Mermaid diagrams from Yuho source files.</p>"},{"location":"cli/draw/#overview","title":"Overview","text":"<p>The <code>draw</code> command creates visual representations of Yuho code:</p> <ul> <li>Flowcharts - Show control flow and conditional logic</li> <li>Mindmaps - Show hierarchical structure of legal concepts</li> <li>Mermaid Output - Compatible with Mermaid Live Editor and documentation</li> </ul>"},{"location":"cli/draw/#basic-usage","title":"Basic Usage","text":"<pre><code>yuho draw &lt;file_path&gt; [OPTIONS]\n</code></pre>"},{"location":"cli/draw/#examples","title":"Examples","text":"<pre><code># Generate flowchart to stdout\nyuho draw example.yh\n\n# Generate flowchart to file\nyuho draw example.yh --format flowchart -o diagram.mmd\n\n# Generate mindmap\nyuho draw example.yh --format mindmap -o mindmap.mmd\n</code></pre>"},{"location":"cli/draw/#command-options","title":"Command Options","text":""},{"location":"cli/draw/#-output-o","title":"<code>--output</code>, <code>-o</code>","text":"<p>Specify output file path:</p> <pre><code>yuho draw example.yh -o output.mmd\n</code></pre> <p>Default: Output to stdout</p>"},{"location":"cli/draw/#-format-f","title":"<code>--format</code>, <code>-f</code>","text":"<p>Choose diagram format:</p> <pre><code># Flowchart (default)\nyuho draw example.yh --format flowchart\n\n# Mindmap\nyuho draw example.yh --format mindmap\n</code></pre> <p>Options: - <code>flowchart</code> - Control flow and logic (default) - <code>mindmap</code> - Hierarchical structure</p>"},{"location":"cli/draw/#output-formats","title":"Output Formats","text":""},{"location":"cli/draw/#flowchart-format","title":"Flowchart Format","text":"<p>Shows control flow and conditional logic:</p> <pre><code>yuho draw example.yh --format flowchart -o flowchart.mmd\n</code></pre> <p>Example Output: <pre><code>flowchart TD\n    S0[Cheating]\n    S0 --&gt; M1[accused: string]\n    S0 --&gt; M2[deception: bool]\n    S0 --&gt; M3[harm: bool]\n    MC4{Decision}\n    MC4 --&gt; C5[Case 1]\n    C5 --&gt; CO6[Consequence: guilty]</code></pre></p>"},{"location":"cli/draw/#mindmap-format","title":"Mindmap Format","text":"<p>Shows hierarchical structure of legal concepts:</p> <pre><code>yuho draw example.yh --format mindmap -o mindmap.mmd\n</code></pre> <p>Example Output: <pre><code>mindmap\n  root((Cheating))\n    accused\n      string\n    deception\n      bool\n    harm\n      bool\n    Decisions\n      Case1\n      Default</code></pre></p>"},{"location":"cli/draw/#working-with-examples","title":"Working with Examples","text":""},{"location":"cli/draw/#basic-cheating-example","title":"Basic Cheating Example","text":"<p>Yuho Code: <pre><code>// Section 415 - Cheating\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre></p> <p>Generate Flowchart: <pre><code>yuho draw cheating.yh -f flowchart -o cheating_flow.mmd\n</code></pre></p> <p>Generate Mindmap: <pre><code>yuho draw cheating.yh -f mindmap -o cheating_mind.mmd\n</code></pre></p>"},{"location":"cli/draw/#complex-legal-example","title":"Complex Legal Example","text":"<p>Yuho Code: <pre><code>// Section 378 - Theft\nstruct Theft {\n    bool dishonestIntention,\n    bool movableProperty,\n    bool withoutConsent,\n    bool movedProperty\n}\n\nmatch {\n    case dishonestIntention &amp;&amp; movableProperty &amp;&amp; \n         withoutConsent &amp;&amp; movedProperty :=\n        consequence \"guilty of theft\";\n    case _ :=\n        consequence \"not guilty of theft\";\n}\n</code></pre></p> <p>Generate Diagrams: <pre><code># Flowchart showing decision logic\nyuho draw theft.yh -f flowchart -o theft_flow.mmd\n\n# Mindmap showing elements\nyuho draw theft.yh -f mindmap -o theft_mind.mmd\n</code></pre></p>"},{"location":"cli/draw/#diagram-components","title":"Diagram Components","text":""},{"location":"cli/draw/#flowchart-components","title":"Flowchart Components","text":""},{"location":"cli/draw/#struct-nodes","title":"Struct Nodes","text":"<pre><code>flowchart TD\n    S0[StructName]\n    S0 --&gt; M1[field1: type]\n    S0 --&gt; M2[field2: type]</code></pre>"},{"location":"cli/draw/#decision-nodes","title":"Decision Nodes","text":"<pre><code>flowchart TD\n    MC0{Decision}\n    MC0 --&gt; C1[Case 1]\n    MC0 --&gt; C2[Case 2]</code></pre>"},{"location":"cli/draw/#consequence-nodes","title":"Consequence Nodes","text":"<pre><code>flowchart TD\n    C1[Case 1]\n    C1 --&gt; CO1[Consequence: result]</code></pre>"},{"location":"cli/draw/#mindmap-components","title":"Mindmap Components","text":""},{"location":"cli/draw/#root-node","title":"Root Node","text":"<pre><code>mindmap\n  root((RootConcept))\n    field1\n      type\n    field2\n      type</code></pre>"},{"location":"cli/draw/#decision-branches","title":"Decision Branches","text":"<pre><code>mindmap\n  root((Concept))\n    Decisions\n      Case1\n      Case2\n      Default</code></pre>"},{"location":"cli/draw/#use-cases","title":"Use Cases","text":""},{"location":"cli/draw/#use-case-1-legal-education","title":"Use Case 1: Legal Education","text":"<p>Problem: Students struggle to understand complex legal logic</p> <p>Solution: Generate visual diagrams</p> <pre><code># Create learning materials\nyuho draw statute.yh -f flowchart -o learning_material.mmd\nyuho draw statute.yh -f mindmap -o concept_map.mmd\n</code></pre> <p>Result: Clear visual representation of legal concepts</p>"},{"location":"cli/draw/#use-case-2-legal-documentation","title":"Use Case 2: Legal Documentation","text":"<p>Problem: Need to document legal logic for stakeholders</p> <p>Solution: Generate diagrams for documentation</p> <pre><code># Generate documentation diagrams\nyuho draw legal_concept.yh -f flowchart -o documentation.mmd\n</code></pre> <p>Result: Visual documentation that stakeholders can understand</p>"},{"location":"cli/draw/#use-case-3-legal-analysis","title":"Use Case 3: Legal Analysis","text":"<p>Problem: Need to analyze legal logic for completeness</p> <p>Solution: Generate diagrams to visualize logic flow</p> <pre><code># Analyze legal logic\nyuho draw analysis.yh -f flowchart -o analysis.mmd\n</code></pre> <p>Result: Visual analysis of legal logic completeness</p>"},{"location":"cli/draw/#integration-with-documentation","title":"Integration with Documentation","text":""},{"location":"cli/draw/#markdown-integration","title":"Markdown Integration","text":"<p>Embed diagrams in Markdown:</p> <pre><code># Legal Concept\n\n```mermaid\nflowchart TD\n    S0[Cheating]\n    S0 --&gt; M1[deception: bool]\n    S0 --&gt; M2[dishonest: bool]\n    S0 --&gt; M3[harm: bool]\n</code></pre>"},{"location":"cli/draw/#mermaid-live-editor","title":"Mermaid Live Editor","text":"<ol> <li> <p>Generate diagram: <pre><code>yuho draw example.yh -f flowchart -o diagram.mmd\n</code></pre></p> </li> <li> <p>Copy content to Mermaid Live Editor</p> </li> <li> <p>View and edit diagram</p> </li> </ol>"},{"location":"cli/draw/#github-integration","title":"GitHub Integration","text":"<p>GitHub automatically renders Mermaid diagrams:</p> <p><pre><code># Legal Logic\n\n```mermaid\nflowchart TD\n    S0[Cheating]\n    S0 --&gt; M1[deception: bool]\n    S0 --&gt; M2[dishonest: bool]\n    S0 --&gt; M3[harm: bool]\n</code></pre> <pre><code>## Best Practices\n\n### 1. Choose Appropriate Format\n\n```bash\n# Use flowchart for decision logic\nyuho draw decision_logic.yh -f flowchart -o decision.mmd\n\n# Use mindmap for concept hierarchy\nyuho draw concept_hierarchy.yh -f mindmap -o concepts.mmd\n</code></pre></p>"},{"location":"cli/draw/#2-use-descriptive-filenames","title":"2. Use Descriptive Filenames","text":"<pre><code># Good: Descriptive names\nyuho draw cheating.yh -f flowchart -o cheating_decision_flow.mmd\nyuho draw theft.yh -f mindmap -o theft_elements_mindmap.mmd\n\n# Avoid: Generic names\nyuho draw example.yh -f flowchart -o diagram.mmd\n</code></pre>"},{"location":"cli/draw/#3-generate-both-formats","title":"3. Generate Both Formats","text":"<pre><code># Generate both flowchart and mindmap\nyuho draw legal_concept.yh -f flowchart -o legal_concept_flow.mmd\nyuho draw legal_concept.yh -f mindmap -o legal_concept_mind.mmd\n</code></pre>"},{"location":"cli/draw/#4-integrate-with-workflow","title":"4. Integrate with Workflow","text":"<pre><code># Generate diagrams as part of build process\nyuho draw examples/cheating/cheating_illustration_A.yh -f flowchart -o docs/cheating_flow.mmd\nyuho draw examples/cheating/cheating_illustration_A.yh -f mindmap -o docs/cheating_mind.mmd\n</code></pre>"},{"location":"cli/draw/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/draw/#common-issues","title":"Common Issues","text":""},{"location":"cli/draw/#issue-1-invalid-file","title":"Issue 1: Invalid File","text":"<pre><code>$ yuho draw invalid.yh\n\u2717 Error: Invalid Yuho file\n</code></pre> <p>Solution: Check file with <code>yuho check</code> first:</p> <pre><code>yuho check invalid.yh\n# Fix errors, then try again\nyuho draw invalid.yh\n</code></pre>"},{"location":"cli/draw/#issue-2-empty-output","title":"Issue 2: Empty Output","text":"<pre><code>$ yuho draw empty.yh\n# No output generated\n</code></pre> <p>Solution: Ensure file has content:</p> <pre><code>// Add some content\nstruct Test {\n    bool field\n}\n\nmatch {\n    case field := consequence \"result\";\n    case _ := consequence \"default\";\n}\n</code></pre>"},{"location":"cli/draw/#issue-3-permission-denied","title":"Issue 3: Permission Denied","text":"<pre><code>$ yuho draw example.yh -o protected.mmd\n\u2717 Error: Permission denied: protected.mmd\n</code></pre> <p>Solution: Check file permissions:</p> <pre><code>ls -la protected.mmd\nchmod 644 protected.mmd\nyuho draw example.yh -o protected.mmd\n</code></pre>"},{"location":"cli/draw/#performance","title":"Performance","text":""},{"location":"cli/draw/#generation-speed","title":"Generation Speed","text":"<p>Typical generation times:</p> File Size Statements Flowchart Time Mindmap Time Small 1-10 &lt;10ms &lt;5ms Medium 11-100 &lt;50ms &lt;25ms Large 101-1000 &lt;500ms &lt;250ms Very Large 1000+ &lt;2s &lt;1s"},{"location":"cli/draw/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Use appropriate format for your use case</li> <li>Generate to files for repeated use</li> <li>Batch generate multiple diagrams</li> <li>Cache results for large files</li> </ol>"},{"location":"cli/draw/#advanced-usage","title":"Advanced Usage","text":""},{"location":"cli/draw/#batch-processing","title":"Batch Processing","text":"<pre><code># Generate diagrams for all files\nfor file in examples/cheating/*.yh; do\n    yuho draw \"$file\" -f flowchart -o \"${file%.yh}_flow.mmd\"\n    yuho draw \"$file\" -f mindmap -o \"${file%.yh}_mind.mmd\"\ndone\n</code></pre>"},{"location":"cli/draw/#custom-output","title":"Custom Output","text":"<pre><code># Generate with custom naming\nyuho draw example.yh -f flowchart -o \"legal_concept_$(date +%Y%m%d).mmd\"\n</code></pre>"},{"location":"cli/draw/#integration-with-cicd","title":"Integration with CI/CD","text":"<pre><code># Generate diagrams in CI pipeline\nyuho draw examples/cheating/cheating_illustration_A.yh -f flowchart -o docs/cheating_flow.mmd\nyuho draw examples/cheating/cheating_illustration_A.yh -f mindmap -o docs/cheating_mind.mmd\n</code></pre>"},{"location":"cli/draw/#next-steps","title":"Next Steps","text":"<ul> <li>Alloy Command - Generate Alloy specifications</li> <li>Draft Command - Create new Yuho files</li> <li>REPL - Interactive development</li> <li>Check Command - Validate files before drawing</li> </ul>"},{"location":"cli/repl/","title":"REPL (Read-Eval-Print Loop)","text":"<p>The <code>yuho-repl</code> command starts an interactive Yuho shell for experimentation and development.</p>"},{"location":"cli/repl/#overview","title":"Overview","text":"<p>The Yuho REPL provides:</p> <ul> <li>Interactive Development - Test code snippets immediately</li> <li>Syntax Validation - Check code as you type</li> <li>Output Generation - Generate Mermaid and Alloy from code</li> <li>Learning Tool - Experiment with Yuho syntax</li> </ul>"},{"location":"cli/repl/#starting-the-repl","title":"Starting the REPL","text":""},{"location":"cli/repl/#basic-usage","title":"Basic Usage","text":"<pre><code>yuho-repl\n</code></pre>"},{"location":"cli/repl/#example-session","title":"Example Session","text":"<pre><code>$ yuho-repl\nyuho&gt; struct Person { string name, int age }\n\u2713 Valid Yuho code\n\nyuho&gt; Person alice := { name := \"Alice\", age := 25 }\n\u2713 Valid Yuho code\n\nyuho&gt; match alice.age { case 25 := consequence \"age 25\"; case _ := consequence \"other age\"; }\n\u2713 Valid Yuho code\n\nyuho&gt; help\n[Shows REPL commands]\n\nyuho&gt; exit\n</code></pre>"},{"location":"cli/repl/#repl-commands","title":"REPL Commands","text":""},{"location":"cli/repl/#help","title":"<code>help</code>","text":"<p>Show available REPL commands:</p> <pre><code>yuho&gt; help\nAvailable commands:\n  help     - Show this help message\n  history  - Show command history\n  clear    - Clear screen\n  load     - Load and parse a file\n  mermaid  - Generate Mermaid from last input\n  alloy    - Generate Alloy from last input\n  exit     - Exit REPL\n  quit     - Exit REPL\n</code></pre>"},{"location":"cli/repl/#history","title":"<code>history</code>","text":"<p>Show command history:</p> <pre><code>yuho&gt; history\n1: struct Person { string name, int age }\n2: Person alice := { name := \"Alice\", age := 25 }\n3: match alice.age { case 25 := consequence \"age 25\"; case _ := consequence \"other age\"; }\n4: help\n</code></pre>"},{"location":"cli/repl/#clear","title":"<code>clear</code>","text":"<p>Clear the screen:</p> <pre><code>yuho&gt; clear\n[Screen cleared]\n</code></pre>"},{"location":"cli/repl/#load-file","title":"<code>load &lt;file&gt;</code>","text":"<p>Load and parse a Yuho file:</p> <pre><code>yuho&gt; load examples/cheating/cheating_illustration_A.yh\n\u2713 Successfully loaded examples/cheating/cheating_illustration_A.yh\n</code></pre>"},{"location":"cli/repl/#mermaid","title":"<code>mermaid</code>","text":"<p>Generate Mermaid diagram from last input:</p> <pre><code>yuho&gt; struct Cheating { bool deception, bool dishonest, bool harm }\n\u2713 Valid Yuho code\n\nyuho&gt; mermaid\nflowchart TD\n    S0[Cheating]\n    S0 --&gt; M1[deception: bool]\n    S0 --&gt; M2[dishonest: bool]\n    S0 --&gt; M3[harm: bool]\n</code></pre>"},{"location":"cli/repl/#alloy","title":"<code>alloy</code>","text":"<p>Generate Alloy specification from last input:</p> <pre><code>yuho&gt; struct Cheating { bool deception, bool dishonest, bool harm }\n\u2713 Valid Yuho code\n\nyuho&gt; alloy\n// Generated Alloy specification from Yuho\nmodule YuhoGenerated\n\nabstract sig Bool {}\none sig True, False extends Bool {}\n\nsig Cheating {\n  deception: Bool,\n  dishonest: Bool,\n  harm: Bool\n}\n\nrun {} for 5\n</code></pre>"},{"location":"cli/repl/#exit-quit","title":"<code>exit</code> / <code>quit</code>","text":"<p>Exit the REPL:</p> <pre><code>yuho&gt; exit\nGoodbye!\n</code></pre>"},{"location":"cli/repl/#interactive-development","title":"Interactive Development","text":""},{"location":"cli/repl/#step-1-define-structs","title":"Step 1: Define Structs","text":"<pre><code>yuho&gt; struct Person { string name, int age, bool isMinor }\n\u2713 Valid Yuho code\n</code></pre>"},{"location":"cli/repl/#step-2-create-instances","title":"Step 2: Create Instances","text":"<pre><code>yuho&gt; Person alice := { name := \"Alice\", age := 25, isMinor := FALSE }\n\u2713 Valid Yuho code\n</code></pre>"},{"location":"cli/repl/#step-3-add-logic","title":"Step 3: Add Logic","text":"<pre><code>yuho&gt; match alice.isMinor { case TRUE := consequence \"juvenile\"; case FALSE := consequence \"adult\"; }\n\u2713 Valid Yuho code\n</code></pre>"},{"location":"cli/repl/#step-4-generate-outputs","title":"Step 4: Generate Outputs","text":"<pre><code>yuho&gt; mermaid\n[Shows Mermaid diagram]\n\nyuho&gt; alloy\n[Shows Alloy specification]\n</code></pre>"},{"location":"cli/repl/#legal-examples","title":"Legal Examples","text":""},{"location":"cli/repl/#example-1-cheating-offense","title":"Example 1: Cheating Offense","text":"<pre><code>yuho&gt; struct Cheating { bool deception, bool dishonest, bool harm }\n\u2713 Valid Yuho code\n\nyuho&gt; Cheating case1 := { deception := TRUE, dishonest := TRUE, harm := TRUE }\n\u2713 Valid Yuho code\n\nyuho&gt; match { case case1.deception &amp;&amp; case1.dishonest &amp;&amp; case1.harm := consequence \"guilty\"; case _ := consequence \"not guilty\"; }\n\u2713 Valid Yuho code\n\nyuho&gt; mermaid\nflowchart TD\n    S0[Cheating]\n    S0 --&gt; M1[deception: bool]\n    S0 --&gt; M2[dishonest: bool]\n    S0 --&gt; M3[harm: bool]\n    MC4{Decision}\n    MC4 --&gt; C5[Case 1]\n    C5 --&gt; CO6[Consequence: guilty]\n</code></pre>"},{"location":"cli/repl/#example-2-theft-offense","title":"Example 2: Theft Offense","text":"<pre><code>yuho&gt; struct Theft { bool dishonestIntention, bool movableProperty, bool withoutConsent, bool movedProperty }\n\u2713 Valid Yuho code\n\nyuho&gt; Theft case1 := { dishonestIntention := TRUE, movableProperty := TRUE, withoutConsent := TRUE, movedProperty := TRUE }\n\u2713 Valid Yuho code\n\nyuho&gt; match { case case1.dishonestIntention &amp;&amp; case1.movableProperty &amp;&amp; case1.withoutConsent &amp;&amp; case1.movedProperty := consequence \"guilty of theft\"; case _ := consequence \"not guilty of theft\"; }\n\u2713 Valid Yuho code\n\nyuho&gt; alloy\n// Generated Alloy specification from Yuho\nmodule YuhoGenerated\n\nabstract sig Bool {}\none sig True, False extends Bool {}\n\nsig Theft {\n  dishonestIntention: Bool,\n  movableProperty: Bool,\n  withoutConsent: Bool,\n  movedProperty: Bool\n}\n\npred MatchCase0[x: univ] {\n  (dishonestIntention = True and movableProperty = True and withoutConsent = True and movedProperty = True) =&gt; {\n    // Consequence: guilty of theft\n  }\n}\n\nrun {} for 5\n</code></pre>"},{"location":"cli/repl/#example-3-age-based-logic","title":"Example 3: Age-Based Logic","text":"<pre><code>yuho&gt; int age := 25\n\u2713 Valid Yuho code\n\nyuho&gt; match age { case 18 := consequence \"just became adult\"; case 21 := consequence \"legal drinking age\"; case 65 := consequence \"retirement age\"; case _ := consequence \"other age\"; }\n\u2713 Valid Yuho code\n\nyuho&gt; mermaid\nflowchart TD\n    S0[age: int]\n    MC1{Decision}\n    MC1 --&gt; C2[Case 1]\n    MC1 --&gt; C3[Case 2]\n    MC1 --&gt; C4[Case 3]\n    MC1 --&gt; C5[Default]\n    C2 --&gt; CO6[Consequence: just became adult]\n    C3 --&gt; CO7[Consequence: legal drinking age]\n    C4 --&gt; CO8[Consequence: retirement age]\n    C5 --&gt; CO9[Consequence: other age]\n</code></pre>"},{"location":"cli/repl/#advanced-usage","title":"Advanced Usage","text":""},{"location":"cli/repl/#working-with-files","title":"Working with Files","text":"<pre><code>yuho&gt; load examples/cheating/cheating_illustration_A.yh\n\u2713 Successfully loaded examples/cheating/cheating_illustration_A.yh\n\nyuho&gt; mermaid\n[Shows Mermaid diagram from loaded file]\n\nyuho&gt; alloy\n[Shows Alloy specification from loaded file]\n</code></pre>"},{"location":"cli/repl/#complex-legal-logic","title":"Complex Legal Logic","text":"<pre><code>yuho&gt; struct LegalCase { string caseNumber, bool isGuilty, money penalty }\n\u2713 Valid Yuho code\n\nyuho&gt; LegalCase case1 := { caseNumber := \"CR-2024-001\", isGuilty := TRUE, penalty := $1000.00 }\n\u2713 Valid Yuho code\n\nyuho&gt; match case1.isGuilty { case TRUE := consequence \"guilty\"; case FALSE := consequence \"not guilty\"; }\n\u2713 Valid Yuho code\n\nyuho&gt; match case1.penalty { case penalty &gt; $500.00 := consequence \"high penalty\"; case _ := consequence \"low penalty\"; }\n\u2713 Valid Yuho code\n</code></pre>"},{"location":"cli/repl/#function-development","title":"Function Development","text":"<pre><code>yuho&gt; bool func isEligible(int age) { match age { case 18 := consequence TRUE; case _ := consequence FALSE; } }\n\u2713 Valid Yuho code\n\nyuho&gt; bool result := isEligible(25)\n\u2713 Valid Yuho code\n\nyuho&gt; match result { case TRUE := consequence \"eligible\"; case FALSE := consequence \"not eligible\"; }\n\u2713 Valid Yuho code\n</code></pre>"},{"location":"cli/repl/#best-practices","title":"Best Practices","text":""},{"location":"cli/repl/#1-start-simple","title":"1. Start Simple","text":"<pre><code># Start with basic structs\nyuho&gt; struct Person { string name, int age }\n\u2713 Valid Yuho code\n\n# Add complexity gradually\nyuho&gt; Person alice := { name := \"Alice\", age := 25 }\n\u2713 Valid Yuho code\n</code></pre>"},{"location":"cli/repl/#2-test-incrementally","title":"2. Test Incrementally","text":"<pre><code># Test each piece\nyuho&gt; struct Cheating { bool deception, bool dishonest, bool harm }\n\u2713 Valid Yuho code\n\n# Add logic step by step\nyuho&gt; match { case deception &amp;&amp; dishonest &amp;&amp; harm := consequence \"guilty\"; case _ := consequence \"not guilty\"; }\n\u2713 Valid Yuho code\n</code></pre>"},{"location":"cli/repl/#3-use-help-commands","title":"3. Use Help Commands","text":"<pre><code>yuho&gt; help\n[Shows available commands]\n\nyuho&gt; history\n[Shows command history]\n</code></pre>"},{"location":"cli/repl/#4-generate-outputs","title":"4. Generate Outputs","text":"<pre><code>yuho&gt; mermaid\n[Generate Mermaid diagram]\n\nyuho&gt; alloy\n[Generate Alloy specification]\n</code></pre>"},{"location":"cli/repl/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/repl/#common-issues","title":"Common Issues","text":""},{"location":"cli/repl/#issue-1-syntax-errors","title":"Issue 1: Syntax Errors","text":"<pre><code>yuho&gt; struct Person { string name, int age\n\u2717 Error: Syntax error at line 1: expected '}' but found end of input\n</code></pre> <p>Solution: Fix syntax:</p> <pre><code>yuho&gt; struct Person { string name, int age }\n\u2713 Valid Yuho code\n</code></pre>"},{"location":"cli/repl/#issue-2-type-errors","title":"Issue 2: Type Errors","text":"<pre><code>yuho&gt; int age := \"25\"\n\u2717 Error: Type mismatch: expected 'int' but found 'string'\n</code></pre> <p>Solution: Use correct types:</p> <pre><code>yuho&gt; int age := 25\n\u2713 Valid Yuho code\n</code></pre>"},{"location":"cli/repl/#issue-3-undefined-variables","title":"Issue 3: Undefined Variables","text":"<pre><code>yuho&gt; match age { case 25 := consequence \"age 25\"; case _ := consequence \"other age\"; }\n\u2717 Error: Variable 'age' not defined\n</code></pre> <p>Solution: Define variable first:</p> <pre><code>yuho&gt; int age := 25\n\u2713 Valid Yuho code\n\nyuho&gt; match age { case 25 := consequence \"age 25\"; case _ := consequence \"other age\"; }\n\u2713 Valid Yuho code\n</code></pre>"},{"location":"cli/repl/#performance","title":"Performance","text":""},{"location":"cli/repl/#repl-speed","title":"REPL Speed","text":"<p>Typical response times:</p> Operation Time Simple struct &lt;10ms Complex logic &lt;50ms Mermaid generation &lt;100ms Alloy generation &lt;200ms"},{"location":"cli/repl/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Use simple commands for quick testing</li> <li>Generate outputs only when needed</li> <li>Clear history periodically</li> <li>Exit and restart for fresh session</li> </ol>"},{"location":"cli/repl/#integration-with-development","title":"Integration with Development","text":""},{"location":"cli/repl/#development-workflow","title":"Development Workflow","text":"<pre><code># Start REPL\nyuho-repl\n\n# Experiment with code\nyuho&gt; struct Test { bool field }\nyuho&gt; Test instance := { field := TRUE }\nyuho&gt; match instance.field { case TRUE := consequence \"true\"; case FALSE := consequence \"false\"; }\n\n# Generate outputs\nyuho&gt; mermaid\nyuho&gt; alloy\n\n# Exit and save to file\nyuho&gt; exit\n</code></pre>"},{"location":"cli/repl/#learning-workflow","title":"Learning Workflow","text":"<pre><code># Start REPL\nyuho-repl\n\n# Learn syntax\nyuho&gt; help\nyuho&gt; struct Person { string name, int age }\nyuho&gt; Person alice := { name := \"Alice\", age := 25 }\n\n# Experiment with logic\nyuho&gt; match alice.age { case 25 := consequence \"age 25\"; case _ := consequence \"other age\"; }\n\n# Generate visualizations\nyuho&gt; mermaid\nyuho&gt; alloy\n\n# Exit\nyuho&gt; exit\n</code></pre>"},{"location":"cli/repl/#next-steps","title":"Next Steps","text":"<ul> <li>Check Command - Validate code from REPL</li> <li>Draw Command - Generate diagrams from files</li> <li>Alloy Command - Generate Alloy specifications</li> <li>Draft Command - Create new Yuho files</li> </ul>"},{"location":"development/architecture/","title":"Architecture","text":"<p>This document describes the architecture and design of Yuho v3.0.</p>"},{"location":"development/architecture/#system-overview","title":"System Overview","text":"<p>Yuho is a domain-specific language (DSL) compiler/transpiler that processes legal statute representations and outputs various formats for visualization and verification.</p>"},{"location":"development/architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    A[Yuho Source Code .yh] --&gt; B[Lexer]\n    B --&gt; C[Parser]\n    C --&gt; D[AST]\n    D --&gt; E[Semantic Analyzer]\n    E --&gt; F{Valid?}\n    F --&gt;|Yes| G[Transpilers]\n    F --&gt;|No| H[Error Reporter]\n    G --&gt; I[Mermaid Diagrams]\n    G --&gt; J[Alloy Specifications]\n    H --&gt; K[User Feedback]</code></pre>"},{"location":"development/architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"development/architecture/#1-lexer-lexerpy","title":"1. Lexer (<code>lexer.py</code>)","text":"<p>Purpose: Tokenization and initial parsing using Lark parser</p> <p>Responsibilities: - Read Yuho source code - Tokenize input using grammar rules - Generate parse tree - Report syntax errors</p> <p>Technology: Lark (LALR parser generator)</p> <pre><code>class YuhoLexer:\n    def __init__(self):\n        # Load grammar from grammar.lark\n\n    def parse(self, text: str) -&gt; Tree:\n        # Parse text into Lark parse tree\n</code></pre>"},{"location":"development/architecture/#2-parser-parserpy","title":"2. Parser (<code>parser.py</code>)","text":"<p>Purpose: Transform parse trees into Abstract Syntax Trees (AST)</p> <p>Responsibilities: - Transform Lark parse trees into Yuho AST nodes - Handle all language constructs - Maintain source location information</p> <p>Key Classes: - <code>YuhoTransformer</code>: Lark transformer for AST generation - <code>YuhoParser</code>: Main parser interface</p> <pre><code>class YuhoParser:\n    def parse(self, text: str) -&gt; Program:\n        # Parse text into Yuho AST\n\n    def parse_file(self, filepath: str) -&gt; Program:\n        # Parse file into AST\n</code></pre>"},{"location":"development/architecture/#3-ast-nodes-ast_nodespy","title":"3. AST Nodes (<code>ast_nodes.py</code>)","text":"<p>Purpose: Define all AST node types</p> <p>Node Hierarchy: <pre><code>ASTNode (base)\n\u251c\u2500\u2500 Program\n\u251c\u2500\u2500 Statement\n\u2502   \u251c\u2500\u2500 Declaration\n\u2502   \u251c\u2500\u2500 Assignment\n\u2502   \u251c\u2500\u2500 StructDefinition\n\u2502   \u251c\u2500\u2500 FunctionDefinition\n\u2502   \u251c\u2500\u2500 MatchCase\n\u2502   \u2514\u2500\u2500 PassStatement\n\u251c\u2500\u2500 Expression\n\u2502   \u251c\u2500\u2500 Literal\n\u2502   \u251c\u2500\u2500 Identifier\n\u2502   \u251c\u2500\u2500 BinaryOperation\n\u2502   \u251c\u2500\u2500 UnaryOperation\n\u2502   \u2514\u2500\u2500 FunctionCall\n\u2514\u2500\u2500 TypeNode\n</code></pre></p> <p>Design Pattern: Dataclasses for immutability and clarity</p>"},{"location":"development/architecture/#4-semantic-analyzer-semantic_analyzerpy","title":"4. Semantic Analyzer (<code>semantic_analyzer.py</code>)","text":"<p>Purpose: Type checking, scope analysis, and semantic validation</p> <p>Responsibilities: - Type checking for all expressions - Scope resolution and variable tracking - Struct member validation - Function signature verification - Error collection and reporting</p> <p>Key Classes: - <code>SymbolTable</code>: Manages scopes and symbols - <code>SemanticAnalyzer</code>: Main analysis engine</p> <pre><code>class SemanticAnalyzer:\n    def analyze(self, program: Program) -&gt; List[str]:\n        # Analyze AST and return errors\n</code></pre>"},{"location":"development/architecture/#5-transpilers","title":"5. Transpilers","text":""},{"location":"development/architecture/#mermaid-transpiler-transpilersmermaid_transpilerpy","title":"Mermaid Transpiler (<code>transpilers/mermaid_transpiler.py</code>)","text":"<p>Purpose: Generate Mermaid diagram specifications</p> <p>Output Formats: - Flowcharts: Representing control flow and logic - Mindmaps: Representing hierarchical structure</p> <p>Algorithm: 1. Traverse AST depth-first 2. Generate unique node IDs 3. Build Mermaid syntax for each node type 4. Connect nodes based on relationships</p>"},{"location":"development/architecture/#alloy-transpiler-transpilersalloy_transpilerpy","title":"Alloy Transpiler (<code>transpilers/alloy_transpiler.py</code>)","text":"<p>Purpose: Generate Alloy specifications for formal verification</p> <p>Output Components: - Signatures: From struct definitions - Predicates: From match-case logic - Facts: From constraints - Run commands: For verification</p> <p>Algorithm: 1. Convert structs to Alloy signatures 2. Convert match-case to predicates 3. Map Yuho types to Alloy types 4. Generate verification commands</p>"},{"location":"development/architecture/#6-cli-climainpy","title":"6. CLI (<code>cli/main.py</code>)","text":"<p>Purpose: Command-line interface for all Yuho operations</p> <p>Commands: - <code>check</code>: Validate Yuho files - <code>draw</code>: Generate diagrams - <code>alloy</code>: Generate Alloy specs - <code>draft</code>: Create templates - <code>how</code>: Show examples</p> <p>Technology: Click framework for CLI</p>"},{"location":"development/architecture/#7-repl-replpy","title":"7. REPL (<code>repl.py</code>)","text":"<p>Purpose: Interactive shell for Yuho</p> <p>Features: - Live code evaluation - Command history - File loading - Inline transpilation</p>"},{"location":"development/architecture/#data-flow","title":"Data Flow","text":""},{"location":"development/architecture/#typical-compilation-pipeline","title":"Typical Compilation Pipeline","text":"<pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Lexer\n    participant Parser\n    participant Analyzer\n    participant Transpiler\n\n    User-&gt;&gt;CLI: yuho check file.yh\n    CLI-&gt;&gt;Lexer: Read file\n    Lexer-&gt;&gt;Parser: Parse tree\n    Parser-&gt;&gt;Analyzer: AST\n    Analyzer-&gt;&gt;Analyzer: Type check\n    Analyzer-&gt;&gt;CLI: Errors (if any)\n    CLI-&gt;&gt;User: Results</code></pre>"},{"location":"development/architecture/#transpilation-pipeline","title":"Transpilation Pipeline","text":"<pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Parser\n    participant Transpiler\n\n    User-&gt;&gt;CLI: yuho draw file.yh\n    CLI-&gt;&gt;Parser: Parse file\n    Parser-&gt;&gt;CLI: AST\n    CLI-&gt;&gt;Transpiler: Transpile AST\n    Transpiler-&gt;&gt;CLI: Mermaid code\n    CLI-&gt;&gt;User: Output</code></pre>"},{"location":"development/architecture/#design-principles","title":"Design Principles","text":""},{"location":"development/architecture/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<ul> <li>Each component has a single, well-defined responsibility</li> <li>Clear interfaces between components</li> <li>Minimal coupling</li> </ul>"},{"location":"development/architecture/#2-immutability","title":"2. Immutability","text":"<ul> <li>AST nodes are immutable dataclasses</li> <li>Transformations create new structures</li> <li>Easier reasoning and testing</li> </ul>"},{"location":"development/architecture/#3-type-safety","title":"3. Type Safety","text":"<ul> <li>Strong typing throughout</li> <li>Python type hints</li> <li>Runtime type checking in semantic analyzer</li> </ul>"},{"location":"development/architecture/#4-error-handling","title":"4. Error Handling","text":"<ul> <li>Collect all errors, don't fail fast</li> <li>Provide helpful error messages</li> <li>Include source location information</li> </ul>"},{"location":"development/architecture/#5-extensibility","title":"5. Extensibility","text":"<ul> <li>Easy to add new transpilers</li> <li>Plugin architecture possible</li> <li>Well-documented interfaces</li> </ul>"},{"location":"development/architecture/#testing-strategy","title":"Testing Strategy","text":""},{"location":"development/architecture/#test-pyramid","title":"Test Pyramid","text":"<pre><code>          /\\\n         /  \\    E2E Tests\n        /----\\\n       /      \\  Integration Tests  \n      /--------\\\n     /          \\ Unit Tests\n    /------------\\\n</code></pre> <p>Unit Tests: Individual component testing - Lexer tokenization - Parser AST generation - Semantic analysis rules - Transpiler output</p> <p>Integration Tests: Component interaction - Full parse \u2192 analyze pipeline - Parse \u2192 transpile pipeline - File I/O operations</p> <p>E2E Tests: Complete workflows - Real example files - CLI commands - Error scenarios</p>"},{"location":"development/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"development/architecture/#current-optimizations","title":"Current Optimizations","text":"<ul> <li>LALR parsing (efficient)</li> <li>Single-pass semantic analysis</li> <li>Lazy evaluation where possible</li> </ul>"},{"location":"development/architecture/#future-optimizations","title":"Future Optimizations","text":"<ul> <li>Caching of parsed files</li> <li>Parallel analysis of independent files</li> <li>Incremental compilation</li> </ul>"},{"location":"development/architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"development/architecture/#input-validation","title":"Input Validation","text":"<ul> <li>Grammar enforces syntax constraints</li> <li>Semantic analyzer validates types</li> <li>File path sanitization in CLI</li> </ul>"},{"location":"development/architecture/#resource-limits","title":"Resource Limits","text":"<ul> <li>Parser timeout for large files</li> <li>Memory limits for AST size</li> <li>Stack depth limits for recursion</li> </ul>"},{"location":"development/architecture/#dependency-security","title":"Dependency Security","text":"<ul> <li>Regular vulnerability scanning</li> <li>Minimal dependency surface</li> <li>Pinned versions in production</li> </ul>"},{"location":"development/architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"development/architecture/#standalone-cli","title":"Standalone CLI","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   User System   \u2502\n\u2502                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502   Yuho    \u2502  \u2502\n\u2502  \u2502    CLI    \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                 \u2502\n\u2502  .yh files      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/architecture/#docker-container","title":"Docker Container","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Docker Container   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Yuho Runtime \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502         \u2502           \u2502\n\u2502    \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502    \u2502 Volumes \u2502      \u2502\n\u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/architecture/#future-architecture-enhancements","title":"Future Architecture Enhancements","text":""},{"location":"development/architecture/#language-server-protocol-lsp","title":"Language Server Protocol (LSP)","text":"<ul> <li>Real-time syntax checking</li> <li>Auto-completion</li> <li>Go-to-definition</li> </ul>"},{"location":"development/architecture/#web-interface","title":"Web Interface","text":"<ul> <li>Browser-based editor</li> <li>Live preview</li> <li>Shared examples</li> </ul>"},{"location":"development/architecture/#plugin-system","title":"Plugin System","text":"<ul> <li>Custom transpilers</li> <li>Custom validators</li> <li>Extension hooks</li> </ul>"},{"location":"development/architecture/#references","title":"References","text":"<ul> <li>Lark Parser Documentation</li> <li>AST Design Patterns</li> <li>Compiler Design</li> </ul>"},{"location":"development/contributing/","title":"Contributing to Yuho","text":"<p>Guidelines for contributing to the Yuho project.</p>"},{"location":"development/contributing/#overview","title":"Overview","text":"<p>Yuho is an open-source project that welcomes contributions from the community. This guide explains how to contribute effectively to the project.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git</li> <li>Basic understanding of legal concepts</li> <li>Familiarity with domain-specific languages</li> </ul>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Fork the Repository <pre><code>git clone https://github.com/your-username/yuho.git\ncd yuho\n</code></pre></p> </li> <li> <p>Install Dependencies <pre><code>pip install -r requirements.txt\npip install -r requirements-dev.txt\n</code></pre></p> </li> <li> <p>Install in Development Mode <pre><code>pip install -e .\n</code></pre></p> </li> <li> <p>Run Tests <pre><code>pytest\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#contribution-types","title":"Contribution Types","text":""},{"location":"development/contributing/#code-contributions","title":"Code Contributions","text":"<ul> <li>Bug Fixes - Fix issues in the codebase</li> <li>Feature Additions - Add new functionality</li> <li>Documentation - Improve documentation</li> <li>Tests - Add or improve test coverage</li> </ul>"},{"location":"development/contributing/#legal-contributions","title":"Legal Contributions","text":"<ul> <li>Legal Examples - Add new legal examples</li> <li>Legal Patterns - Create reusable legal patterns</li> <li>Legal Documentation - Improve legal documentation</li> <li>Legal Validation - Ensure legal accuracy</li> </ul>"},{"location":"development/contributing/#documentation-contributions","title":"Documentation Contributions","text":"<ul> <li>User Guides - Improve user documentation</li> <li>API Documentation - Document API functions</li> <li>Tutorials - Create learning materials</li> <li>Examples - Add practical examples</li> </ul>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#1-create-a-branch","title":"1. Create a Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n</code></pre>"},{"location":"development/contributing/#2-make-changes","title":"2. Make Changes","text":"<ul> <li>Write code following the style guide</li> <li>Add tests for new functionality</li> <li>Update documentation as needed</li> </ul>"},{"location":"development/contributing/#3-test-your-changes","title":"3. Test Your Changes","text":"<pre><code># Run all tests\npytest\n\n# Run specific tests\npytest tests/test_parser.py\n\n# Run with coverage\npytest --cov=yuho_v3\n</code></pre>"},{"location":"development/contributing/#4-check-code-quality","title":"4. Check Code Quality","text":"<pre><code># Format code\nblack yuho_v3/\n\n# Check style\nflake8 yuho_v3/\n\n# Type checking\nmypy yuho_v3/\n</code></pre>"},{"location":"development/contributing/#5-commit-changes","title":"5. Commit Changes","text":"<pre><code>git add .\ngit commit -m \"Add feature: brief description\"\n</code></pre>"},{"location":"development/contributing/#6-push-and-create-pull-request","title":"6. Push and Create Pull Request","text":"<pre><code>git push origin feature/your-feature-name\n</code></pre>"},{"location":"development/contributing/#code-style-guide","title":"Code Style Guide","text":""},{"location":"development/contributing/#python-code","title":"Python Code","text":"<ul> <li>Follow PEP 8 style guide</li> <li>Use type hints for function parameters and return values</li> <li>Write docstrings for all public functions</li> <li>Use meaningful variable and function names</li> </ul>"},{"location":"development/contributing/#example","title":"Example","text":"<pre><code>def transpile_to_mermaid(program: Program) -&gt; str:\n    \"\"\"\n    Generate Mermaid diagram from Yuho program.\n\n    Args:\n        program: Yuho Program AST\n\n    Returns:\n        Mermaid diagram syntax\n    \"\"\"\n    # Implementation\n    pass\n</code></pre>"},{"location":"development/contributing/#yuho-code","title":"Yuho Code","text":"<ul> <li>Use descriptive names for structs and variables</li> <li>Include legal context in comments</li> <li>Follow the established patterns</li> <li>Ensure complete case coverage</li> </ul>"},{"location":"development/contributing/#example_1","title":"Example","text":"<pre><code>// Section 415 - Cheating\n// Whoever, by deceiving any person, fraudulently or dishonestly...\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"development/contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development/contributing/#test-structure","title":"Test Structure","text":"<ul> <li>Unit Tests - Test individual functions</li> <li>Integration Tests - Test complete workflows</li> <li>Legal Tests - Test legal accuracy</li> <li>Performance Tests - Test performance characteristics</li> </ul>"},{"location":"development/contributing/#writing-tests","title":"Writing Tests","text":"<pre><code>def test_cheating_offense():\n    \"\"\"Test cheating offense validation\"\"\"\n    parser = YuhoParser()\n    code = \"\"\"\n    struct Cheating {\n        bool deception,\n        bool dishonest,\n        bool harm\n    }\n\n    match {\n        case deception &amp;&amp; dishonest &amp;&amp; harm :=\n            consequence \"guilty\";\n        case _ :=\n            consequence \"not guilty\";\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n    assert ast is not None\n    assert len(ast.statements) == 2\n</code></pre>"},{"location":"development/contributing/#legal-test-examples","title":"Legal Test Examples","text":"<pre><code>def test_legal_accuracy():\n    \"\"\"Test legal accuracy of examples\"\"\"\n    # Test that cheating examples match Section 415\n    # Test that theft examples match Section 378\n    # Test that legal logic is correct\n    pass\n</code></pre>"},{"location":"development/contributing/#documentation-guidelines","title":"Documentation Guidelines","text":""},{"location":"development/contributing/#user-documentation","title":"User Documentation","text":"<ul> <li>Write for legal professionals and students</li> <li>Include legal context and sources</li> <li>Provide practical examples</li> <li>Use clear, accessible language</li> </ul>"},{"location":"development/contributing/#api-documentation","title":"API Documentation","text":"<ul> <li>Document all public functions</li> <li>Include parameter and return type information</li> <li>Provide usage examples</li> <li>Explain legal implications</li> </ul>"},{"location":"development/contributing/#example-documentation","title":"Example Documentation","text":"<pre><code># Cheating Offense\n\n## Legal Source\n\nSection 415 of the Penal Code defines cheating as...\n\n## Yuho Representation\n\n```yh\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n</code></pre>"},{"location":"development/contributing/#usage","title":"Usage","text":"<p><pre><code>yuho check cheating.yh\nyuho draw cheating.yh -f flowchart -o cheating.mmd\n</code></pre> <pre><code>## Legal Contribution Guidelines\n\n### Legal Accuracy\n\n- Ensure all legal examples are accurate\n- Include proper legal citations\n- Verify legal logic is correct\n- Test with legal professionals\n\n### Legal Examples\n\n- Use real legal cases when possible\n- Include proper legal context\n- Explain legal reasoning\n- Provide legal sources\n\n### Legal Validation\n\n- Test legal examples for accuracy\n- Verify legal logic is sound\n- Ensure legal completeness\n- Check legal consistency\n\n## Pull Request Process\n\n### Before Submitting\n\n1. **Run Tests** - Ensure all tests pass\n2. **Check Style** - Follow code style guidelines\n3. **Update Documentation** - Update relevant documentation\n4. **Test Legal Examples** - Verify legal accuracy\n\n### Pull Request Template\n\n```markdown\n## Description\n\nBrief description of changes\n\n## Type of Change\n\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n- [ ] Legal example addition\n- [ ] Other (please describe)\n\n## Legal Impact\n\n- [ ] No legal impact\n- [ ] Legal example added\n- [ ] Legal logic changed\n- [ ] Legal documentation updated\n\n## Testing\n\n- [ ] Tests pass\n- [ ] Legal examples validated\n- [ ] Documentation updated\n- [ ] Style guidelines followed\n\n## Checklist\n\n- [ ] Code follows style guidelines\n- [ ] Tests added/updated\n- [ ] Documentation updated\n- [ ] Legal accuracy verified\n- [ ] Ready for review\n</code></pre></p>"},{"location":"development/contributing/#review-process","title":"Review Process","text":""},{"location":"development/contributing/#code-review","title":"Code Review","text":"<ul> <li>Review code quality and style</li> <li>Check test coverage</li> <li>Verify functionality</li> <li>Ensure legal accuracy</li> </ul>"},{"location":"development/contributing/#legal-review","title":"Legal Review","text":"<ul> <li>Verify legal examples are accurate</li> <li>Check legal logic is sound</li> <li>Ensure legal completeness</li> <li>Validate legal sources</li> </ul>"},{"location":"development/contributing/#documentation-review","title":"Documentation Review","text":"<ul> <li>Check documentation clarity</li> <li>Verify examples work</li> <li>Ensure completeness</li> <li>Validate legal context</li> </ul>"},{"location":"development/contributing/#issue-reporting","title":"Issue Reporting","text":""},{"location":"development/contributing/#bug-reports","title":"Bug Reports","text":"<p>When reporting bugs, include:</p> <ul> <li>Description - Clear description of the issue</li> <li>Steps to Reproduce - How to reproduce the bug</li> <li>Expected Behavior - What should happen</li> <li>Actual Behavior - What actually happens</li> <li>Environment - Python version, OS, etc.</li> </ul>"},{"location":"development/contributing/#feature-requests","title":"Feature Requests","text":"<p>When requesting features, include:</p> <ul> <li>Description - Clear description of the feature</li> <li>Use Case - Why this feature is needed</li> <li>Legal Context - How it relates to legal reasoning</li> <li>Implementation Ideas - Suggestions for implementation</li> </ul>"},{"location":"development/contributing/#legal-issues","title":"Legal Issues","text":"<p>When reporting legal issues, include:</p> <ul> <li>Legal Source - Relevant legal text</li> <li>Current Implementation - How it's currently implemented</li> <li>Legal Problem - What's legally incorrect</li> <li>Suggested Fix - How to fix the legal issue</li> </ul>"},{"location":"development/contributing/#community-guidelines","title":"Community Guidelines","text":""},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<ul> <li>Be respectful and inclusive</li> <li>Focus on constructive feedback</li> <li>Help others learn and grow</li> <li>Maintain professional standards</li> </ul>"},{"location":"development/contributing/#communication","title":"Communication","text":"<ul> <li>Use clear, professional language</li> <li>Provide constructive feedback</li> <li>Ask questions when needed</li> <li>Share knowledge and experience</li> </ul>"},{"location":"development/contributing/#legal-discussion","title":"Legal Discussion","text":"<ul> <li>Respect legal expertise</li> <li>Provide legal sources</li> <li>Engage in constructive legal debate</li> <li>Maintain legal accuracy</li> </ul>"},{"location":"development/contributing/#development-tools","title":"Development Tools","text":""},{"location":"development/contributing/#ide-setup","title":"IDE Setup","text":"<ul> <li>VS Code - Recommended editor</li> <li>Python Extension - For Python development</li> <li>Markdown Extension - For documentation</li> <li>Git Extension - For version control</li> </ul>"},{"location":"development/contributing/#useful-commands","title":"Useful Commands","text":"<pre><code># Development setup\npip install -e .\n\n# Run tests\npytest\n\n# Format code\nblack yuho_v3/\n\n# Check style\nflake8 yuho_v3/\n\n# Type checking\nmypy yuho_v3/\n\n# Generate documentation\nmkdocs serve\n</code></pre>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":""},{"location":"development/contributing/#documentation","title":"Documentation","text":"<ul> <li>Check the documentation first</li> <li>Look for existing examples</li> <li>Review the language guide</li> <li>Check the API reference</li> </ul>"},{"location":"development/contributing/#community","title":"Community","text":"<ul> <li>Ask questions on GitHub Issues</li> <li>Join discussions on GitHub Discussions</li> <li>Connect with other contributors</li> <li>Share your experience</li> </ul>"},{"location":"development/contributing/#legal-questions","title":"Legal Questions","text":"<ul> <li>Consult legal professionals</li> <li>Review legal sources</li> <li>Check legal accuracy</li> <li>Validate legal logic</li> </ul>"},{"location":"development/contributing/#recognition","title":"Recognition","text":""},{"location":"development/contributing/#contributors","title":"Contributors","text":"<ul> <li>All contributors are recognized</li> <li>Legal contributors are especially valued</li> <li>Documentation contributors are appreciated</li> <li>Code contributors are essential</li> </ul>"},{"location":"development/contributing/#legal-contributors","title":"Legal Contributors","text":"<ul> <li>Legal accuracy is crucial</li> <li>Legal examples are valuable</li> <li>Legal documentation is important</li> <li>Legal validation is essential</li> </ul>"},{"location":"development/contributing/#next-steps","title":"Next Steps","text":"<ul> <li>Testing Guide - How to test Yuho</li> <li>Docker Guide - Container development</li> <li>Architecture Guide - Understanding Yuho's architecture</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"development/docker/","title":"Docker Development","text":"<p>Guide to using Docker for Yuho development and deployment.</p>"},{"location":"development/docker/#overview","title":"Overview","text":"<p>Docker provides a consistent development environment for Yuho across different platforms and simplifies deployment.</p>"},{"location":"development/docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on your system</li> <li>Basic understanding of Docker concepts</li> <li>Familiarity with containerization</li> </ul>"},{"location":"development/docker/#development-setup","title":"Development Setup","text":""},{"location":"development/docker/#dockerfile","title":"Dockerfile","text":"<pre><code># Use Python 3.11 as base image\nFROM python:3.11-slim\n\n# Set working directory\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    g++ \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements files\nCOPY requirements.txt requirements-dev.txt ./\n\n# Install Python dependencies\nRUN pip install --no-cache-dir -r requirements.txt\nRUN pip install --no-cache-dir -r requirements-dev.txt\n\n# Copy source code\nCOPY . .\n\n# Install Yuho in development mode\nRUN pip install -e .\n\n# Set default command\nCMD [\"yuho\", \"--help\"]\n</code></pre>"},{"location":"development/docker/#docker-composeyml","title":"docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  yuho-dev:\n    build: .\n    volumes:\n      - .:/app\n      - /app/__pycache__\n    working_dir: /app\n    command: bash\n    stdin_open: true\n    tty: true\n    environment:\n      - PYTHONPATH=/app\n      - YUHO_ENV=development\n\n  yuho-test:\n    build: .\n    volumes:\n      - .:/app\n    working_dir: /app\n    command: pytest\n    environment:\n      - PYTHONPATH=/app\n      - YUHO_ENV=testing\n\n  yuho-docs:\n    build: .\n    volumes:\n      - .:/app\n    working_dir: /app\n    command: mkdocs serve\n    ports:\n      - \"8000:8000\"\n    environment:\n      - PYTHONPATH=/app\n      - YUHO_ENV=documentation\n</code></pre>"},{"location":"development/docker/#development-workflow","title":"Development Workflow","text":""},{"location":"development/docker/#building-the-image","title":"Building the Image","text":"<pre><code># Build development image\ndocker build -t yuho-dev .\n\n# Build with specific tag\ndocker build -t yuho-dev:latest .\n</code></pre>"},{"location":"development/docker/#running-development-container","title":"Running Development Container","text":"<pre><code># Run interactive container\ndocker run -it --rm yuho-dev bash\n\n# Run with volume mounting\ndocker run -it --rm -v $(pwd):/app yuho-dev bash\n\n# Run specific command\ndocker run --rm yuho-dev yuho --help\n</code></pre>"},{"location":"development/docker/#using-docker-compose","title":"Using Docker Compose","text":"<pre><code># Start development environment\ndocker-compose up yuho-dev\n\n# Run tests\ndocker-compose run yuho-test\n\n# Start documentation server\ndocker-compose up yuho-docs\n</code></pre>"},{"location":"development/docker/#development-commands","title":"Development Commands","text":""},{"location":"development/docker/#basic-development","title":"Basic Development","text":"<pre><code># Enter development container\ndocker-compose run --rm yuho-dev bash\n\n# Install dependencies\npip install -r requirements.txt\npip install -r requirements-dev.txt\n\n# Install in development mode\npip install -e .\n\n# Run tests\npytest\n</code></pre>"},{"location":"development/docker/#code-quality","title":"Code Quality","text":"<pre><code># Format code\nblack yuho_v3/\n\n# Check style\nflake8 yuho_v3/\n\n# Type checking\nmypy yuho_v3/\n</code></pre>"},{"location":"development/docker/#documentation","title":"Documentation","text":"<pre><code># Start documentation server\nmkdocs serve\n\n# Build documentation\nmkdocs build\n\n# Deploy documentation\nmkdocs gh-deploy\n</code></pre>"},{"location":"development/docker/#testing-with-docker","title":"Testing with Docker","text":""},{"location":"development/docker/#test-container","title":"Test Container","text":"<pre><code># Test-specific Dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    g++ \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements\nCOPY requirements.txt requirements-dev.txt ./\n\n# Install dependencies\nRUN pip install --no-cache-dir -r requirements.txt\nRUN pip install --no-cache-dir -r requirements-dev.txt\n\n# Copy source code\nCOPY . .\n\n# Install in development mode\nRUN pip install -e .\n\n# Set test command\nCMD [\"pytest\", \"--cov=yuho_v3\", \"--cov-report=html\"]\n</code></pre>"},{"location":"development/docker/#running-tests","title":"Running Tests","text":"<pre><code># Run tests in container\ndocker run --rm yuho-test\n\n# Run tests with coverage\ndocker run --rm yuho-test pytest --cov=yuho_v3\n\n# Run specific tests\ndocker run --rm yuho-test pytest tests/test_parser.py\n</code></pre>"},{"location":"development/docker/#test-coverage","title":"Test Coverage","text":"<pre><code># Generate coverage report\ndocker run --rm -v $(pwd)/coverage:/app/coverage yuho-test pytest --cov=yuho_v3 --cov-report=html\n\n# View coverage report\nopen coverage/htmlcov/index.html\n</code></pre>"},{"location":"development/docker/#documentation-with-docker","title":"Documentation with Docker","text":""},{"location":"development/docker/#documentation-container","title":"Documentation Container","text":"<pre><code># Documentation-specific Dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    g++ \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements\nCOPY requirements.txt requirements-dev.txt ./\n\n# Install dependencies\nRUN pip install --no-cache-dir -r requirements.txt\nRUN pip install --no-cache-dir -r requirements-dev.txt\n\n# Copy source code\nCOPY . .\n\n# Install in development mode\nRUN pip install -e .\n\n# Install MkDocs\nRUN pip install mkdocs mkdocs-material\n\n# Set documentation command\nCMD [\"mkdocs\", \"serve\", \"--dev-addr=0.0.0.0:8000\"]\n</code></pre>"},{"location":"development/docker/#running-documentation","title":"Running Documentation","text":"<pre><code># Start documentation server\ndocker run -p 8000:8000 yuho-docs\n\n# Build documentation\ndocker run --rm yuho-docs mkdocs build\n\n# Deploy documentation\ndocker run --rm yuho-docs mkdocs gh-deploy\n</code></pre>"},{"location":"development/docker/#production-deployment","title":"Production Deployment","text":""},{"location":"development/docker/#production-dockerfile","title":"Production Dockerfile","text":"<pre><code># Multi-stage build for production\nFROM python:3.11-slim as builder\n\n# Set working directory\nWORKDIR /app\n\n# Install build dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    g++ \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements\nCOPY requirements.txt .\n\n# Install Python dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy source code\nCOPY . .\n\n# Install Yuho\nRUN pip install .\n\n# Production stage\nFROM python:3.11-slim\n\n# Set working directory\nWORKDIR /app\n\n# Copy installed packages\nCOPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages\nCOPY --from=builder /usr/local/bin /usr/local/bin\n\n# Create non-root user\nRUN useradd -m -u 1000 yuho\n\n# Switch to non-root user\nUSER yuho\n\n# Set default command\nCMD [\"yuho\", \"--help\"]\n</code></pre>"},{"location":"development/docker/#production-docker-composeyml","title":"Production docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  yuho:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - YUHO_ENV=production\n    volumes:\n      - ./data:/app/data\n    restart: unless-stopped\n</code></pre>"},{"location":"development/docker/#docker-best-practices","title":"Docker Best Practices","text":""},{"location":"development/docker/#image-optimization","title":"Image Optimization","text":"<pre><code># Use specific Python version\nFROM python:3.11-slim\n\n# Use multi-stage builds\nFROM python:3.11-slim as builder\n# ... build stage\nFROM python:3.11-slim as production\n# ... production stage\n\n# Minimize layers\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    g++ \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Use .dockerignore\n# __pycache__\n# *.pyc\n# .git\n# .pytest_cache\n# coverage\n</code></pre>"},{"location":"development/docker/#security","title":"Security","text":"<pre><code># Create non-root user\nRUN useradd -m -u 1000 yuho\nUSER yuho\n\n# Use specific versions\nFROM python:3.11-slim\n\n# Remove unnecessary packages\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    g++ \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre>"},{"location":"development/docker/#performance","title":"Performance","text":"<pre><code># Use build cache\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy source code after dependencies\nCOPY . .\n\n# Use specific Python version\nFROM python:3.11-slim\n</code></pre>"},{"location":"development/docker/#environment-variables","title":"Environment Variables","text":""},{"location":"development/docker/#development-environment","title":"Development Environment","text":"<pre><code># Development environment variables\nexport YUHO_ENV=development\nexport PYTHONPATH=/app\nexport YUHO_LOG_LEVEL=DEBUG\n</code></pre>"},{"location":"development/docker/#production-environment","title":"Production Environment","text":"<pre><code># Production environment variables\nexport YUHO_ENV=production\nexport YUHO_LOG_LEVEL=INFO\nexport YUHO_CONFIG=/app/config.yaml\n</code></pre>"},{"location":"development/docker/#docker-environment","title":"Docker Environment","text":"<pre><code># docker-compose.yml environment\nenvironment:\n  - YUHO_ENV=development\n  - PYTHONPATH=/app\n  - YUHO_LOG_LEVEL=DEBUG\n</code></pre>"},{"location":"development/docker/#volume-management","title":"Volume Management","text":""},{"location":"development/docker/#development-volumes","title":"Development Volumes","text":"<pre><code># docker-compose.yml volumes\nvolumes:\n  - .:/app\n  - /app/__pycache__\n  - /app/.pytest_cache\n</code></pre>"},{"location":"development/docker/#production-volumes","title":"Production Volumes","text":"<pre><code># docker-compose.yml volumes\nvolumes:\n  - ./data:/app/data\n  - ./logs:/app/logs\n  - ./config:/app/config\n</code></pre>"},{"location":"development/docker/#volume-permissions","title":"Volume Permissions","text":"<pre><code># Set volume permissions\ndocker run --rm -v $(pwd):/app yuho-dev chown -R 1000:1000 /app\n</code></pre>"},{"location":"development/docker/#networking","title":"Networking","text":""},{"location":"development/docker/#development-networking","title":"Development Networking","text":"<pre><code># docker-compose.yml networking\nservices:\n  yuho-dev:\n    networks:\n      - yuho-network\n\nnetworks:\n  yuho-network:\n    driver: bridge\n</code></pre>"},{"location":"development/docker/#production-networking","title":"Production Networking","text":"<pre><code># docker-compose.yml networking\nservices:\n  yuho:\n    networks:\n      - yuho-network\n    ports:\n      - \"8000:8000\"\n\nnetworks:\n  yuho-network:\n    driver: bridge\n</code></pre>"},{"location":"development/docker/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"development/docker/#logging-configuration","title":"Logging Configuration","text":"<pre><code># logging.conf\n[loggers]\nkeys=root,yuho\n\n[handlers]\nkeys=console,file\n\n[formatters]\nkeys=standard\n\n[logger_root]\nlevel=INFO\nhandlers=console\n\n[logger_yuho]\nlevel=DEBUG\nhandlers=console,file\nqualname=yuho\npropagate=0\n\n[handler_console]\nclass=StreamHandler\nlevel=DEBUG\nformatter=standard\nargs=(sys.stdout,)\n\n[handler_file]\nclass=FileHandler\nlevel=DEBUG\nformatter=standard\nargs=('yuho.log',)\n\n[formatter_standard]\nformat=%(asctime)s - %(name)s - %(levelname)s - %(message)s\n</code></pre>"},{"location":"development/docker/#monitoring","title":"Monitoring","text":"<pre><code># docker-compose.yml monitoring\nservices:\n  yuho:\n    healthcheck:\n      test: [\"CMD\", \"yuho\", \"--version\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n</code></pre>"},{"location":"development/docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/docker/#common-issues","title":"Common Issues","text":""},{"location":"development/docker/#issue-1-permission-denied","title":"Issue 1: Permission Denied","text":"<pre><code># Problem: Permission denied when mounting volumes\ndocker run -v $(pwd):/app yuho-dev\n# Permission denied\n</code></pre> <p>Solution: Fix volume permissions:</p> <pre><code># Fix volume permissions\ndocker run --rm -v $(pwd):/app yuho-dev chown -R 1000:1000 /app\n</code></pre>"},{"location":"development/docker/#issue-2-import-errors","title":"Issue 2: Import Errors","text":"<pre><code># Problem: Import errors in container\ndocker run yuho-dev python -c \"import yuho_v3\"\n# ImportError: No module named 'yuho_v3'\n</code></pre> <p>Solution: Set PYTHONPATH:</p> <pre><code># Set PYTHONPATH\ndocker run -e PYTHONPATH=/app yuho-dev python -c \"import yuho_v3\"\n</code></pre>"},{"location":"development/docker/#issue-3-port-conflicts","title":"Issue 3: Port Conflicts","text":"<pre><code># Problem: Port already in use\ndocker run -p 8000:8000 yuho-docs\n# Port 8000 is already in use\n</code></pre> <p>Solution: Use different port:</p> <pre><code># Use different port\ndocker run -p 8001:8000 yuho-docs\n</code></pre>"},{"location":"development/docker/#debugging","title":"Debugging","text":"<pre><code># Debug container\ndocker run -it --rm yuho-dev bash\n\n# Check container logs\ndocker logs yuho-container\n\n# Inspect container\ndocker inspect yuho-container\n</code></pre>"},{"location":"development/docker/#advanced-usage","title":"Advanced Usage","text":""},{"location":"development/docker/#multi-architecture-builds","title":"Multi-Architecture Builds","text":"<pre><code># Build for multiple architectures\ndocker buildx build --platform linux/amd64,linux/arm64 -t yuho:latest .\n</code></pre>"},{"location":"development/docker/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># .github/workflows/docker.yml\nname: Docker Build\n\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build Docker image\n      run: docker build -t yuho:latest .\n\n    - name: Run tests\n      run: docker run --rm yuho:latest pytest\n\n    - name: Push to registry\n      run: docker push yuho:latest\n</code></pre>"},{"location":"development/docker/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code># kubernetes.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: yuho\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: yuho\n  template:\n    metadata:\n      labels:\n        app: yuho\n    spec:\n      containers:\n      - name: yuho\n        image: yuho:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: YUHO_ENV\n          value: production\n</code></pre>"},{"location":"development/docker/#next-steps","title":"Next Steps","text":"<ul> <li>Contributing Guide - How to contribute to Yuho</li> <li>Testing Guide - How to test Yuho</li> <li>Architecture Guide - Understanding Yuho's architecture</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>Comprehensive guide to testing Yuho code and ensuring legal accuracy.</p>"},{"location":"development/testing/#overview","title":"Overview","text":"<p>Testing in Yuho involves multiple layers:</p> <ul> <li>Unit Tests - Test individual components</li> <li>Integration Tests - Test complete workflows</li> <li>Legal Tests - Test legal accuracy</li> <li>Performance Tests - Test performance characteristics</li> </ul>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":""},{"location":"development/testing/#test-organization","title":"Test Organization","text":"<pre><code>yuho_v3/tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 conftest.py\n\u251c\u2500\u2500 test_lexer.py\n\u251c\u2500\u2500 test_parser.py\n\u251c\u2500\u2500 test_semantic_analyzer.py\n\u251c\u2500\u2500 test_transpilers.py\n\u251c\u2500\u2500 test_integration.py\n\u2514\u2500\u2500 test_legal.py\n</code></pre>"},{"location":"development/testing/#test-categories","title":"Test Categories","text":"<ul> <li>Parser Tests - Test syntax parsing</li> <li>Semantic Tests - Test semantic analysis</li> <li>Transpiler Tests - Test code generation</li> <li>Integration Tests - Test complete workflows</li> <li>Legal Tests - Test legal accuracy</li> </ul>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#basic-test-execution","title":"Basic Test Execution","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/test_parser.py\n\n# Run specific test\npytest tests/test_parser.py::test_basic_parsing\n\n# Run with verbose output\npytest -v\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<pre><code># Run with coverage\npytest --cov=yuho_v3\n\n# Generate coverage report\npytest --cov=yuho_v3 --cov-report=html\n\n# View coverage report\nopen htmlcov/index.html\n</code></pre>"},{"location":"development/testing/#test-options","title":"Test Options","text":"<pre><code># Run tests in parallel\npytest -n auto\n\n# Run tests with specific markers\npytest -m \"not slow\"\n\n# Run tests with specific pattern\npytest -k \"test_parser\"\n</code></pre>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/testing/#basic-test-structure","title":"Basic Test Structure","text":"<pre><code>import pytest\nfrom yuho_v3.parser import YuhoParser\nfrom yuho_v3.semantic_analyzer import SemanticAnalyzer\n\ndef test_basic_parsing():\n    \"\"\"Test basic parsing functionality\"\"\"\n    parser = YuhoParser()\n    code = \"\"\"\n    struct Person {\n        string name,\n        int age\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n    assert ast is not None\n    assert len(ast.statements) == 1\n    assert ast.statements[0].name == \"Person\"\n</code></pre>"},{"location":"development/testing/#test-fixtures","title":"Test Fixtures","text":"<pre><code>import pytest\n\n@pytest.fixture\ndef parser():\n    \"\"\"Create parser instance for testing\"\"\"\n    return YuhoParser()\n\n@pytest.fixture\ndef semantic_analyzer():\n    \"\"\"Create semantic analyzer for testing\"\"\"\n    return SemanticAnalyzer()\n\n@pytest.fixture\ndef sample_code():\n    \"\"\"Sample Yuho code for testing\"\"\"\n    return \"\"\"\n    struct Test {\n        bool field\n    }\n\n    match {\n        case field := consequence \"true\";\n        case _ := consequence \"false\";\n    }\n    \"\"\"\n</code></pre>"},{"location":"development/testing/#parametrized-tests","title":"Parametrized Tests","text":"<pre><code>import pytest\n\n@pytest.mark.parametrize(\"code,expected\", [\n    (\"int x := 42;\", True),\n    (\"string s := \\\"hello\\\";\", True),\n    (\"bool b := TRUE;\", True),\n    (\"invalid syntax\", False),\n])\ndef test_variable_declaration(parser, code, expected):\n    \"\"\"Test variable declaration parsing\"\"\"\n    try:\n        ast = parser.parse(code)\n        result = ast is not None\n    except:\n        result = False\n\n    assert result == expected\n</code></pre>"},{"location":"development/testing/#parser-tests","title":"Parser Tests","text":""},{"location":"development/testing/#basic-parsing-tests","title":"Basic Parsing Tests","text":"<pre><code>def test_struct_parsing():\n    \"\"\"Test struct definition parsing\"\"\"\n    parser = YuhoParser()\n    code = \"\"\"\n    struct Person {\n        string name,\n        int age\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n    assert ast is not None\n    assert len(ast.statements) == 1\n\n    struct = ast.statements[0]\n    assert struct.name == \"Person\"\n    assert len(struct.members) == 2\n    assert struct.members[0].name == \"name\"\n    assert struct.members[1].name == \"age\"\n</code></pre>"},{"location":"development/testing/#error-handling-tests","title":"Error Handling Tests","text":"<pre><code>def test_syntax_error():\n    \"\"\"Test syntax error handling\"\"\"\n    parser = YuhoParser()\n    code = \"struct Person { string name, int age\"  # Missing closing brace\n\n    with pytest.raises(SyntaxError):\n        parser.parse(code)\n</code></pre>"},{"location":"development/testing/#complex-parsing-tests","title":"Complex Parsing Tests","text":"<pre><code>def test_match_case_parsing():\n    \"\"\"Test match-case statement parsing\"\"\"\n    parser = YuhoParser()\n    code = \"\"\"\n    match {\n        case condition1 := consequence \"result1\";\n        case condition2 := consequence \"result2\";\n        case _ := consequence \"default\";\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n    assert ast is not None\n    assert len(ast.statements) == 1\n\n    match_case = ast.statements[0]\n    assert len(match_case.cases) == 3\n    assert match_case.cases[0].condition is not None\n    assert match_case.cases[1].condition is not None\n    assert match_case.cases[2].condition is None  # Default case\n</code></pre>"},{"location":"development/testing/#semantic-tests","title":"Semantic Tests","text":""},{"location":"development/testing/#type-checking-tests","title":"Type Checking Tests","text":"<pre><code>def test_type_checking():\n    \"\"\"Test type checking functionality\"\"\"\n    analyzer = SemanticAnalyzer()\n    code = \"\"\"\n    struct Person {\n        string name,\n        int age\n    }\n\n    Person person := {\n        name := \"Alice\",\n        age := 25\n    }\n    \"\"\"\n\n    parser = YuhoParser()\n    ast = parser.parse(code)\n    errors = analyzer.analyze(ast)\n\n    assert len(errors) == 0\n</code></pre>"},{"location":"development/testing/#error-detection-tests","title":"Error Detection Tests","text":"<pre><code>def test_type_mismatch():\n    \"\"\"Test type mismatch detection\"\"\"\n    analyzer = SemanticAnalyzer()\n    code = \"\"\"\n    int age := \"25\";  # Type mismatch\n    \"\"\"\n\n    parser = YuhoParser()\n    ast = parser.parse(code)\n    errors = analyzer.analyze(ast)\n\n    assert len(errors) &gt; 0\n    assert \"type mismatch\" in str(errors[0]).lower()\n</code></pre>"},{"location":"development/testing/#completeness-tests","title":"Completeness Tests","text":"<pre><code>def test_match_case_completeness():\n    \"\"\"Test match-case completeness\"\"\"\n    analyzer = SemanticAnalyzer()\n    code = \"\"\"\n    bool flag := TRUE;\n\n    match flag {\n        case TRUE := consequence \"true\";\n        # Missing FALSE case\n    }\n    \"\"\"\n\n    parser = YuhoParser()\n    ast = parser.parse(code)\n    errors = analyzer.analyze(ast)\n\n    assert len(errors) &gt; 0\n    assert \"incomplete\" in str(errors[0]).lower()\n</code></pre>"},{"location":"development/testing/#transpiler-tests","title":"Transpiler Tests","text":""},{"location":"development/testing/#mermaid-transpiler-tests","title":"Mermaid Transpiler Tests","text":"<pre><code>def test_mermaid_flowchart():\n    \"\"\"Test Mermaid flowchart generation\"\"\"\n    from yuho_v3.transpilers.mermaid_transpiler import MermaidTranspiler\n\n    parser = YuhoParser()\n    transpiler = MermaidTranspiler()\n\n    code = \"\"\"\n    struct Test {\n        bool field\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n    result = transpiler.transpile_to_flowchart(ast)\n\n    assert \"flowchart TD\" in result\n    assert \"Test\" in result\n    assert \"field: bool\" in result\n</code></pre>"},{"location":"development/testing/#alloy-transpiler-tests","title":"Alloy Transpiler Tests","text":"<pre><code>def test_alloy_generation():\n    \"\"\"Test Alloy specification generation\"\"\"\n    from yuho_v3.transpilers.alloy_transpiler import AlloyTranspiler\n\n    parser = YuhoParser()\n    transpiler = AlloyTranspiler()\n\n    code = \"\"\"\n    struct Test {\n        bool field\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n    result = transpiler.transpile(ast)\n\n    assert \"sig Test\" in result\n    assert \"field: Bool\" in result\n    assert \"run {} for 5\" in result\n</code></pre>"},{"location":"development/testing/#legal-tests","title":"Legal Tests","text":""},{"location":"development/testing/#legal-accuracy-tests","title":"Legal Accuracy Tests","text":"<pre><code>def test_cheating_offense():\n    \"\"\"Test cheating offense legal accuracy\"\"\"\n    parser = YuhoParser()\n    code = \"\"\"\n    // Section 415 - Cheating\n    struct Cheating {\n        bool deception,\n        bool dishonest,\n        bool harm\n    }\n\n    match {\n        case deception &amp;&amp; dishonest &amp;&amp; harm :=\n            consequence \"guilty of cheating\";\n        case _ :=\n            consequence \"not guilty of cheating\";\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n    assert ast is not None\n\n    # Verify legal elements are present\n    struct = ast.statements[0]\n    assert struct.name == \"Cheating\"\n    assert len(struct.members) == 3\n    assert any(member.name == \"deception\" for member in struct.members)\n    assert any(member.name == \"dishonest\" for member in struct.members)\n    assert any(member.name == \"harm\" for member in struct.members)\n</code></pre>"},{"location":"development/testing/#legal-logic-tests","title":"Legal Logic Tests","text":"<pre><code>def test_legal_logic_completeness():\n    \"\"\"Test legal logic completeness\"\"\"\n    parser = YuhoParser()\n    code = \"\"\"\n    struct LegalOffense {\n        bool element1,\n        bool element2,\n        bool element3\n    }\n\n    match {\n        case element1 &amp;&amp; element2 &amp;&amp; element3 :=\n            consequence \"guilty\";\n        case _ :=\n            consequence \"not guilty\";\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n    assert ast is not None\n\n    # Verify all elements are required\n    match_case = ast.statements[1]\n    assert len(match_case.cases) == 2\n    assert match_case.cases[0].condition is not None\n    assert match_case.cases[1].condition is None  # Default case\n</code></pre>"},{"location":"development/testing/#legal-validation-tests","title":"Legal Validation Tests","text":"<pre><code>def test_legal_validation():\n    \"\"\"Test legal validation functionality\"\"\"\n    parser = YuhoParser()\n    code = \"\"\"\n    struct Cheating {\n        bool deception,\n        bool dishonest,\n        bool harm\n    }\n    \"\"\"\n\n    ast = parser.parse(code)\n\n    # Verify legal structure\n    struct = ast.statements[0]\n    assert struct.name == \"Cheating\"\n\n    # Verify required elements\n    required_elements = [\"deception\", \"dishonest\", \"harm\"]\n    actual_elements = [member.name for member in struct.members]\n\n    for element in required_elements:\n        assert element in actual_elements\n</code></pre>"},{"location":"development/testing/#integration-tests","title":"Integration Tests","text":""},{"location":"development/testing/#complete-workflow-tests","title":"Complete Workflow Tests","text":"<pre><code>def test_complete_workflow():\n    \"\"\"Test complete Yuho workflow\"\"\"\n    parser = YuhoParser()\n    analyzer = SemanticAnalyzer()\n    transpiler = MermaidTranspiler()\n\n    code = \"\"\"\n    struct Test {\n        bool field\n    }\n\n    match {\n        case field := consequence \"true\";\n        case _ := consequence \"false\";\n    }\n    \"\"\"\n\n    # Parse\n    ast = parser.parse(code)\n    assert ast is not None\n\n    # Analyze\n    errors = analyzer.analyze(ast)\n    assert len(errors) == 0\n\n    # Transpile\n    result = transpiler.transpile_to_flowchart(ast)\n    assert \"flowchart TD\" in result\n</code></pre>"},{"location":"development/testing/#cli-integration-tests","title":"CLI Integration Tests","text":"<pre><code>def test_cli_integration():\n    \"\"\"Test CLI integration\"\"\"\n    import subprocess\n    import tempfile\n    import os\n\n    code = \"\"\"\n    struct Test {\n        bool field\n    }\n    \"\"\"\n\n    with tempfile.NamedTemporaryFile(mode='w', suffix='.yh', delete=False) as f:\n        f.write(code)\n        f.flush()\n\n        try:\n            # Test check command\n            result = subprocess.run(['yuho', 'check', f.name], \n                                  capture_output=True, text=True)\n            assert result.returncode == 0\n\n            # Test draw command\n            result = subprocess.run(['yuho', 'draw', f.name], \n                                  capture_output=True, text=True)\n            assert result.returncode == 0\n            assert \"flowchart TD\" in result.stdout\n\n        finally:\n            os.unlink(f.name)\n</code></pre>"},{"location":"development/testing/#performance-tests","title":"Performance Tests","text":""},{"location":"development/testing/#parsing-performance","title":"Parsing Performance","text":"<pre><code>import time\n\ndef test_parsing_performance():\n    \"\"\"Test parsing performance\"\"\"\n    parser = YuhoParser()\n    code = \"\"\"\n    struct Test {\n        bool field\n    }\n    \"\"\" * 100  # Repeat 100 times\n\n    start_time = time.time()\n    ast = parser.parse(code)\n    end_time = time.time()\n\n    assert ast is not None\n    assert (end_time - start_time) &lt; 1.0  # Should complete in under 1 second\n</code></pre>"},{"location":"development/testing/#transpilation-performance","title":"Transpilation Performance","text":"<pre><code>def test_transpilation_performance():\n    \"\"\"Test transpilation performance\"\"\"\n    parser = YuhoParser()\n    transpiler = MermaidTranspiler()\n\n    code = \"\"\"\n    struct Test {\n        bool field\n    }\n    \"\"\" * 100  # Repeat 100 times\n\n    ast = parser.parse(code)\n\n    start_time = time.time()\n    result = transpiler.transpile_to_flowchart(ast)\n    end_time = time.time()\n\n    assert result is not None\n    assert (end_time - start_time) &lt; 2.0  # Should complete in under 2 seconds\n</code></pre>"},{"location":"development/testing/#test-data","title":"Test Data","text":""},{"location":"development/testing/#sample-legal-code","title":"Sample Legal Code","text":"<pre><code>SAMPLE_CHEATING_CODE = \"\"\"\n// Section 415 - Cheating\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\nCheating case1 := {\n    accused := \"Alice\",\n    deception := TRUE,\n    dishonest := TRUE,\n    harm := TRUE\n};\n\nmatch {\n    case case1.deception &amp;&amp; case1.dishonest &amp;&amp; case1.harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n\"\"\"\n\nSAMPLE_THEFT_CODE = \"\"\"\n// Section 378 - Theft\nstruct Theft {\n    bool dishonestIntention,\n    bool movableProperty,\n    bool withoutConsent,\n    bool movedProperty\n}\n\nmatch {\n    case dishonestIntention &amp;&amp; movableProperty &amp;&amp; \n         withoutConsent &amp;&amp; movedProperty :=\n        consequence \"guilty of theft\";\n    case _ :=\n        consequence \"not guilty of theft\";\n}\n\"\"\"\n</code></pre>"},{"location":"development/testing/#test-fixtures_1","title":"Test Fixtures","text":"<pre><code>@pytest.fixture\ndef sample_legal_codes():\n    \"\"\"Sample legal codes for testing\"\"\"\n    return {\n        \"cheating\": SAMPLE_CHEATING_CODE,\n        \"theft\": SAMPLE_THEFT_CODE\n    }\n\n@pytest.fixture\ndef parser():\n    \"\"\"Parser instance for testing\"\"\"\n    return YuhoParser()\n\n@pytest.fixture\ndef analyzer():\n    \"\"\"Semantic analyzer for testing\"\"\"\n    return SemanticAnalyzer()\n</code></pre>"},{"location":"development/testing/#test-configuration","title":"Test Configuration","text":""},{"location":"development/testing/#pytestini","title":"pytest.ini","text":"<pre><code>[tool:pytest]\ntestpaths = yuho_v3/tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts = -ra -q --strict-markers --cov=yuho_v3 --cov-report=html --cov-report=term-missing\nmarkers =\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    legal: marks tests as legal tests\n    integration: marks tests as integration tests\n</code></pre>"},{"location":"development/testing/#conftestpy","title":"conftest.py","text":"<pre><code>import pytest\nimport sys\nfrom pathlib import Path\n\n# Add parent directory to path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\n@pytest.fixture(scope=\"session\")\ndef parser():\n    \"\"\"Create parser instance for testing\"\"\"\n    from yuho_v3.parser import YuhoParser\n    return YuhoParser()\n\n@pytest.fixture(scope=\"session\")\ndef analyzer():\n    \"\"\"Create semantic analyzer for testing\"\"\"\n    from yuho_v3.semantic_analyzer import SemanticAnalyzer\n    return SemanticAnalyzer()\n</code></pre>"},{"location":"development/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"development/testing/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install -r requirements-dev.txt\n\n    - name: Run tests\n      run: |\n        pytest --cov=yuho_v3 --cov-report=xml\n\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n</code></pre>"},{"location":"development/testing/#best-practices","title":"Best Practices","text":""},{"location":"development/testing/#test-organization_1","title":"Test Organization","text":"<ul> <li>Group related tests together</li> <li>Use descriptive test names</li> <li>Keep tests focused and simple</li> <li>Use fixtures for common setup</li> </ul>"},{"location":"development/testing/#test-data_1","title":"Test Data","text":"<ul> <li>Use realistic test data</li> <li>Include edge cases</li> <li>Test both valid and invalid inputs</li> <li>Use legal examples when appropriate</li> </ul>"},{"location":"development/testing/#test-coverage_1","title":"Test Coverage","text":"<ul> <li>Aim for high test coverage</li> <li>Test all public functions</li> <li>Test error conditions</li> <li>Test legal accuracy</li> </ul>"},{"location":"development/testing/#performance","title":"Performance","text":"<ul> <li>Test performance characteristics</li> <li>Use appropriate timeouts</li> <li>Test with realistic data sizes</li> <li>Monitor performance regressions</li> </ul>"},{"location":"development/testing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/testing/#common-issues","title":"Common Issues","text":""},{"location":"development/testing/#issue-1-import-errors","title":"Issue 1: Import Errors","text":"<pre><code># Problem: Import errors in tests\nfrom yuho_v3.parser import YuhoParser  # ImportError\n</code></pre> <p>Solution: Add parent directory to path:</p> <pre><code>import sys\nfrom pathlib import Path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n</code></pre>"},{"location":"development/testing/#issue-2-test-failures","title":"Issue 2: Test Failures","text":"<pre><code># Problem: Tests failing unexpectedly\ndef test_parsing():\n    parser = YuhoParser()\n    ast = parser.parse(\"invalid syntax\")\n    assert ast is not None  # Fails\n</code></pre> <p>Solution: Handle exceptions properly:</p> <pre><code>def test_parsing():\n    parser = YuhoParser()\n    with pytest.raises(SyntaxError):\n        parser.parse(\"invalid syntax\")\n</code></pre>"},{"location":"development/testing/#issue-3-coverage-issues","title":"Issue 3: Coverage Issues","text":"<pre><code># Problem: Low test coverage\npytest --cov=yuho_v3\n# Coverage: 45%\n</code></pre> <p>Solution: Add more tests:</p> <pre><code>def test_missing_function():\n    \"\"\"Test previously untested function\"\"\"\n    # Add test for missing function\n    pass\n</code></pre>"},{"location":"development/testing/#next-steps","title":"Next Steps","text":"<ul> <li>Contributing Guide - How to contribute to Yuho</li> <li>Docker Guide - Container development</li> <li>Architecture Guide - Understanding Yuho's architecture</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"examples/cheating/","title":"Cheating Offenses","text":"<p>Real-world examples of representing cheating offenses in Yuho, based on Section 415 of the Singapore Penal Code.</p>"},{"location":"examples/cheating/#overview","title":"Overview","text":"<p>This page demonstrates how Yuho represents the offense of cheating under Section 415 of the Penal Code. Each example shows the progression from legal text to Yuho code to visual diagrams.</p>"},{"location":"examples/cheating/#legal-source","title":"Legal Source","text":"<p>Section 415 of the Penal Code:</p> <p>Whoever, by deceiving any person, fraudulently or dishonestly induces the person so deceived to deliver any property to any person, or to consent that any person shall retain any property, or intentionally induces the person so deceived to do or omit to do anything which he would not do or omit if he were not so deceived, and which act or omission causes or is likely to cause damage or harm to that person in body, mind, reputation or property, is said to \"cheat\".</p>"},{"location":"examples/cheating/#basic-cheating-definition","title":"Basic Cheating Definition","text":""},{"location":"examples/cheating/#yuho-representation","title":"Yuho Representation","text":"<pre><code>// Section 415 - Cheating\nstruct Cheating {\n    string accused,\n    string victim,\n    bool deception,\n    bool fraudulent,\n    bool dishonest,\n    bool inducedDeliveryOfProperty,\n    bool inducedConsentToRetain,\n    bool inducedActionOrOmission,\n    bool causesDamageOrHarm,\n    string damageType  // body, mind, reputation, or property\n}\n\nmatch {\n    case deception &amp;&amp; (fraudulent || dishonest) &amp;&amp; \n         (inducedDeliveryOfProperty || inducedConsentToRetain || inducedActionOrOmission) &amp;&amp;\n         causesDamageOrHarm := \n        consequence \"guilty of cheating under Section 415\";\n\n    case _ := \n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"examples/cheating/#breaking-down-the-elements","title":"Breaking Down the Elements","text":"<p>The offense of cheating requires:</p> <ol> <li>Deception: The accused must deceive someone</li> <li>Mental Element: Either fraudulent OR dishonest</li> <li>Inducement (any one of):</li> <li>Deliver property</li> <li>Consent to retain property</li> <li>Do or omit to do something</li> <li>Harm: Causes or likely to cause damage/harm</li> </ol>"},{"location":"examples/cheating/#illustration-a-false-government-service","title":"Illustration A: False Government Service","text":""},{"location":"examples/cheating/#legal-text","title":"Legal Text","text":"<p>\"A, by falsely pretending to be in the Government service, intentionally deceives Z, and thus dishonestly induces Z to let him have on credit goods for which he does not mean to pay. A cheats.\"</p>"},{"location":"examples/cheating/#yuho-code","title":"Yuho Code","text":"<pre><code>/*\nIllustration A - Cheating by false pretense\nA falsely claims to be in government service to get goods on credit\n*/\n\nstruct CheatingIllustrationA {\n    string accused := \"A\",\n    string victim := \"Z\",\n    string action := \"falsely pretending to be in Government service\",\n    bool deception := TRUE,\n    bool dishonest := TRUE,\n    bool inducedConsentToRetain := TRUE,\n    bool causesDamageOrHarm := TRUE,\n    string damageType := \"property\"\n}\n\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; inducedConsentToRetain &amp;&amp; causesDamageOrHarm :=\n        consequence \"A cheats\";\n    case _ :=\n        consequence \"not cheating\";\n}\n</code></pre>"},{"location":"examples/cheating/#key-points","title":"Key Points","text":"<ul> <li>A deceived Z by false pretense</li> <li>A acted dishonestly (no intention to pay)</li> <li>Z was induced to give goods on credit</li> <li>Z suffered property damage (goods without payment)</li> </ul>"},{"location":"examples/cheating/#illustration-b-false-promise","title":"Illustration B: False Promise","text":""},{"location":"examples/cheating/#legal-text_1","title":"Legal Text","text":"<p>\"A, by putting a counterfeit mark on an article, intentionally deceives Z into a belief that this article was made by a certain celebrated manufacturer, and thus dishonestly induces Z to buy and pay for the article. A cheats.\"</p>"},{"location":"examples/cheating/#yuho-code_1","title":"Yuho Code","text":"<pre><code>/*\nIllustration B - Cheating by false promise\nA uses counterfeit mark to deceive Z into buying article\n*/\n\nstruct CheatingIllustrationB {\n    string accused := \"A\",\n    string victim := \"Z\",\n    string action := \"putting counterfeit mark on article\",\n    bool deception := TRUE,\n    bool dishonest := TRUE,\n    bool inducedDeliveryOfProperty := TRUE,\n    bool causesDamageOrHarm := TRUE,\n    string damageType := \"property\"\n}\n\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; inducedDeliveryOfProperty &amp;&amp; causesDamageOrHarm :=\n        consequence \"A cheats\";\n    case _ :=\n        consequence \"not cheating\";\n}\n</code></pre>"},{"location":"examples/cheating/#key-points_1","title":"Key Points","text":"<ul> <li>A deceived Z by counterfeit mark</li> <li>A acted dishonestly (intentional deception)</li> <li>Z was induced to buy and pay for article</li> <li>Z suffered property damage (paid for counterfeit goods)</li> </ul>"},{"location":"examples/cheating/#illustration-c-false-representation","title":"Illustration C: False Representation","text":""},{"location":"examples/cheating/#legal-text_2","title":"Legal Text","text":"<p>\"A, by exhibiting to Z a false sample of an article, intentionally deceives Z into believing that the article which A offers to sell to Z corresponds to the sample, and thus dishonestly induces Z to buy and pay for the article. A cheats.\"</p>"},{"location":"examples/cheating/#yuho-code_2","title":"Yuho Code","text":"<pre><code>/*\nIllustration C - Cheating by false representation\nA shows false sample to deceive Z into buying article\n*/\n\nstruct CheatingIllustrationC {\n    string accused := \"A\",\n    string victim := \"Z\",\n    string action := \"exhibiting false sample of article\",\n    bool deception := TRUE,\n    bool dishonest := TRUE,\n    bool inducedDeliveryOfProperty := TRUE,\n    bool causesDamageOrHarm := TRUE,\n    string damageType := \"property\"\n}\n\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; inducedDeliveryOfProperty &amp;&amp; causesDamageOrHarm :=\n        consequence \"A cheats\";\n    case _ :=\n        consequence \"not cheating\";\n}\n</code></pre>"},{"location":"examples/cheating/#key-points_2","title":"Key Points","text":"<ul> <li>A deceived Z by false sample</li> <li>A acted dishonestly (intentional deception)</li> <li>Z was induced to buy and pay for article</li> <li>Z suffered property damage (paid for misrepresented goods)</li> </ul>"},{"location":"examples/cheating/#working-with-examples","title":"Working with Examples","text":""},{"location":"examples/cheating/#check-an-example","title":"Check an Example","text":"<pre><code># Validate the cheating example\nyuho check examples/cheating/cheating_illustration_A.yh\n</code></pre>"},{"location":"examples/cheating/#visualize-an-example","title":"Visualize an Example","text":"<pre><code># Generate flowchart\nyuho draw examples/cheating/cheating_illustration_A.yh -f flowchart -o cheating_flow.mmd\n\n# Generate mindmap\nyuho draw examples/cheating/cheating_illustration_A.yh -f mindmap -o cheating_mind.mmd\n</code></pre>"},{"location":"examples/cheating/#verify-an-example","title":"Verify an Example","text":"<pre><code># Generate Alloy specification\nyuho alloy examples/cheating/cheating_illustration_A.yh -o cheating.als\n\n# Verify with Alloy Analyzer (if installed)\njava -jar alloy.jar cheating.als\n</code></pre>"},{"location":"examples/cheating/#legal-reasoning-patterns","title":"Legal Reasoning Patterns","text":""},{"location":"examples/cheating/#pattern-1-conjunctive-requirements","title":"Pattern 1: Conjunctive Requirements","text":"<p>When ALL elements must be present:</p> <pre><code>match {\n    case element1 &amp;&amp; element2 &amp;&amp; element3 := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>Example: Cheating requires ALL of: deception, dishonesty, inducement, harm.</p>"},{"location":"examples/cheating/#pattern-2-disjunctive-requirements","title":"Pattern 2: Disjunctive Requirements","text":"<p>When ANY element is sufficient:</p> <pre><code>match {\n    case element1 || element2 || element3 := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>Example: Cheating can involve delivery of property OR consent to retain OR induced action/omission.</p>"},{"location":"examples/cheating/#pattern-3-nested-conditions","title":"Pattern 3: Nested Conditions","text":"<p>Complex combinations:</p> <pre><code>match {\n    case baseElement &amp;&amp; (option1 || option2 || option3) &amp;&amp; finalElement :=\n        consequence \"guilty\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre> <p>Example: Cheating = deception + (fraudulent OR dishonest) + (one of three inducement types) + harm.</p>"},{"location":"examples/cheating/#pattern-4-multiple-consequences","title":"Pattern 4: Multiple Consequences","text":"<p>Different outcomes based on conditions:</p> <pre><code>match {\n    case severeCondition := consequence \"severe punishment\";\n    case moderateCondition := consequence \"moderate punishment\";\n    case minorCondition := consequence \"minor punishment\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"examples/cheating/#best-practices","title":"Best Practices","text":""},{"location":"examples/cheating/#1-clear-naming","title":"1. Clear Naming","text":"<pre><code>// Good: Descriptive names\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool harm\n}\n\n// Avoid: Unclear abbreviations\nstruct C {\n    string a,\n    bool d,\n    bool h\n}\n</code></pre>"},{"location":"examples/cheating/#2-comments-for-context","title":"2. Comments for Context","text":"<pre><code>// Always include the legal source\n// Section 415 - Cheating\n\n// Explain complex conditions\ncase deception &amp;&amp; dishonest :=\n    // Both deception and dishonesty are required\n    consequence \"guilty\";\n</code></pre>"},{"location":"examples/cheating/#3-complete-case-coverage","title":"3. Complete Case Coverage","text":"<pre><code>match {\n    case condition1 := consequence \"result1\";\n    case condition2 := consequence \"result2\";\n    // Always include default case\n    case _ := consequence \"default\";\n}\n</code></pre>"},{"location":"examples/cheating/#4-type-safety","title":"4. Type Safety","text":"<pre><code>// Use appropriate types\nstruct Offense {\n    string accused,        // Names are strings\n    int age,              // Age is integer\n    bool guilty,          // Guilt is boolean\n    money fine := $500.00 // Fines are money type\n}\n</code></pre>"},{"location":"examples/cheating/#advanced-examples","title":"Advanced Examples","text":""},{"location":"examples/cheating/#complex-cheating-scenario","title":"Complex Cheating Scenario","text":"<pre><code>// Complex cheating with multiple elements\nstruct ComplexCheating {\n    string accused,\n    string victim,\n    bool deception,\n    bool fraudulent,\n    bool dishonest,\n    bool inducedDeliveryOfProperty,\n    bool inducedConsentToRetain,\n    bool inducedActionOrOmission,\n    bool causesDamageOrHarm,\n    string damageType,\n    money amount\n}\n\nmatch {\n    case deception &amp;&amp; (fraudulent || dishonest) &amp;&amp; \n         (inducedDeliveryOfProperty || inducedConsentToRetain || inducedActionOrOmission) &amp;&amp;\n         causesDamageOrHarm &amp;&amp; amount &gt; $1000.00 :=\n        consequence \"guilty of aggravated cheating\";\n\n    case deception &amp;&amp; (fraudulent || dishonest) &amp;&amp; \n         (inducedDeliveryOfProperty || inducedConsentToRetain || inducedActionOrOmission) &amp;&amp;\n         causesDamageOrHarm :=\n        consequence \"guilty of cheating\";\n\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"examples/cheating/#cheating-with-defenses","title":"Cheating with Defenses","text":"<pre><code>// Cheating with possible defenses\nstruct CheatingWithDefenses {\n    string accused,\n    string victim,\n    bool deception,\n    bool dishonest,\n    bool harm,\n    bool consent,\n    bool mistake,\n    bool duress\n}\n\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; harm &amp;&amp; not consent &amp;&amp; not mistake &amp;&amp; not duress :=\n        consequence \"guilty of cheating\";\n\n    case consent :=\n        consequence \"not guilty - victim consented\";\n\n    case mistake :=\n        consequence \"not guilty - honest mistake\";\n\n    case duress :=\n        consequence \"not guilty - under duress\";\n\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"examples/cheating/#common-mistakes","title":"Common Mistakes","text":""},{"location":"examples/cheating/#mistake-1-missing-elements","title":"Mistake 1: Missing Elements","text":"<pre><code>// Wrong: Missing required elements\nmatch {\n    case deception := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>Fix: Include all required elements:</p> <pre><code>match {\n    case deception &amp;&amp; dishonest &amp;&amp; harm := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"examples/cheating/#mistake-2-incorrect-logic","title":"Mistake 2: Incorrect Logic","text":"<pre><code>// Wrong: Using OR instead of AND\nmatch {\n    case deception || dishonest || harm := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>Fix: Use correct logic:</p> <pre><code>match {\n    case deception &amp;&amp; dishonest &amp;&amp; harm := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"examples/cheating/#mistake-3-missing-default-case","title":"Mistake 3: Missing Default Case","text":"<pre><code>// Wrong: No default case\nmatch {\n    case condition1 := consequence \"result1\";\n    case condition2 := consequence \"result2\";\n}\n</code></pre> <p>Fix: Always include default case:</p> <pre><code>match {\n    case condition1 := consequence \"result1\";\n    case condition2 := consequence \"result2\";\n    case _ := consequence \"default\";\n}\n</code></pre>"},{"location":"examples/cheating/#resources","title":"Resources","text":"<ul> <li>Penal Code of Singapore</li> <li>Language Syntax</li> <li>CLI Commands</li> <li>Transpilers</li> </ul>"},{"location":"examples/cheating/#next-steps","title":"Next Steps","text":"<ul> <li>Custom Patterns - Advanced legal patterns</li> <li>Language Guide - Complete Yuho reference</li> <li>CLI Commands - Command-line tools</li> <li>Transpilers - Generate diagrams and specifications</li> </ul>"},{"location":"examples/criminal-law/","title":"Criminal Law Examples","text":"<p>Real-world examples of representing Singapore Criminal Law statutes in Yuho.</p>"},{"location":"examples/criminal-law/#overview","title":"Overview","text":"<p>These examples demonstrate how Yuho represents actual legal statutes from Singapore's Penal Code. Each example shows the progression from legal text to Yuho code to visual diagrams.</p>"},{"location":"examples/criminal-law/#example-1-cheating-section-415","title":"Example 1: Cheating (Section 415)","text":""},{"location":"examples/criminal-law/#legal-text","title":"Legal Text","text":"<p>Section 415 of the Penal Code:</p> <p>Whoever, by deceiving any person, fraudulently or dishonestly induces the person so deceived to deliver any property to any person, or to consent that any person shall retain any property, or intentionally induces the person so deceived to do or omit to do anything which he would not do or omit if he were not so deceived, and which act or omission causes or is likely to cause damage or harm to that person in body, mind, reputation or property, is said to \"cheat\".</p>"},{"location":"examples/criminal-law/#yuho-representation","title":"Yuho Representation","text":"<pre><code>// Section 415 - Cheating\nstruct Cheating {\n    string accused,\n    string victim,\n    string action,\n    bool deception,\n    bool fraudulent,\n    bool dishonest,\n    bool inducedDeliveryOfProperty,\n    bool inducedConsentToRetain,\n    bool inducedActionOrOmission,\n    bool causesDamageOrHarm,\n    string damageType  // body, mind, reputation, or property\n}\n\nmatch {\n    case deception &amp;&amp; (fraudulent || dishonest) &amp;&amp; \n         (inducedDeliveryOfProperty || inducedConsentToRetain || inducedActionOrOmission) &amp;&amp;\n         causesDamageOrHarm := \n        consequence \"guilty of cheating under Section 415\";\n\n    case _ := \n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#breaking-down-the-elements","title":"Breaking Down the Elements","text":"<p>The offense of cheating requires:</p> <ol> <li>Deception: The accused must deceive someone</li> <li>Mental Element: Either fraudulent OR dishonest</li> <li>Inducement (any one of):</li> <li>Deliver property</li> <li>Consent to retain property</li> <li>Do or omit to do something</li> <li>Harm: Causes or likely to cause damage/harm</li> </ol>"},{"location":"examples/criminal-law/#illustration-a-false-government-service","title":"Illustration A: False Government Service","text":"<p>Legal Text:</p> <p>\"A, by falsely pretending to be in the Government service, intentionally deceives Z, and thus dishonestly induces Z to let him have on credit goods for which he does not mean to pay. A cheats.\"</p> <p>Yuho Code: <pre><code>/*\nIllustration A - Cheating by false pretense\nA falsely claims to be in government service to get goods on credit\n*/\n\nstruct CheatingIllustrationA {\n    string accused := \"A\",\n    string victim := \"Z\",\n    string action := \"falsely pretending to be in Government service\",\n    bool deception := TRUE,\n    bool dishonest := TRUE,\n    bool inducedConsentToRetain := TRUE,\n    bool causesDamageOrHarm := TRUE,\n    string damageType := \"property\"\n}\n\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; inducedConsentToRetain &amp;&amp; causesDamageOrHarm :=\n        consequence \"A cheats\";\n    case _ :=\n        consequence \"not cheating\";\n}\n</code></pre></p> <p>Key Points: - A deceived Z by false pretense - A acted dishonestly (no intention to pay) - Z was induced to give goods on credit - Z suffered property damage (goods without payment)</p>"},{"location":"examples/criminal-law/#example-2-theft-section-378","title":"Example 2: Theft (Section 378)","text":""},{"location":"examples/criminal-law/#legal-text_1","title":"Legal Text","text":"<p>Section 378 of the Penal Code:</p> <p>Whoever, intending to take dishonestly any movable property out of the possession of any person without that person's consent, moves that property in order to such taking, is said to commit theft.</p>"},{"location":"examples/criminal-law/#yuho-representation_1","title":"Yuho Representation","text":"<pre><code>// Section 378 - Theft\nstruct Theft {\n    string accused,\n    string victim,\n    string property,\n    bool dishonestIntention,\n    bool movableProperty,\n    bool outOfPossession,\n    bool withoutConsent,\n    bool movedProperty\n}\n\nmatch {\n    case dishonestIntention &amp;&amp; movableProperty &amp;&amp; \n         outOfPossession &amp;&amp; withoutConsent &amp;&amp; movedProperty :=\n        consequence \"guilty of theft under Section 378\";\n\n    case _ :=\n        consequence \"not guilty of theft\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#elements-of-theft","title":"Elements of Theft","text":"<ol> <li>Dishonest Intention: Intent to take dishonestly</li> <li>Movable Property: Property must be movable</li> <li>Out of Possession: Takes from another's possession</li> <li>Without Consent: No permission from owner</li> <li>Movement: Actually moves the property</li> </ol>"},{"location":"examples/criminal-law/#simple-example","title":"Simple Example","text":"<pre><code>// Simple theft example\nstruct SimpleTheft {\n    string accused := \"John\",\n    string victim := \"Shop Owner\",\n    string property := \"Mobile phone\",\n    bool dishonestIntention := TRUE,\n    bool movableProperty := TRUE,\n    bool withoutConsent := TRUE,\n    bool movedProperty := TRUE\n}\n\nmatch {\n    case dishonestIntention &amp;&amp; movableProperty &amp;&amp; withoutConsent &amp;&amp; movedProperty :=\n        consequence \"John commits theft\";\n    case _ :=\n        consequence \"not theft\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#example-3-criminal-trespass-section-441","title":"Example 3: Criminal Trespass (Section 441)","text":""},{"location":"examples/criminal-law/#legal-text_2","title":"Legal Text","text":"<p>Section 441 of the Penal Code:</p> <p>Whoever enters into or upon property in the possession of another with intent to commit an offence or to intimidate, insult or annoy any person in possession of such property, or having lawfully entered into or upon such property, unlawfully remains there with intent thereby to intimidate, insult or annoy any such person, or with intent to commit an offence, is said to commit \"criminal trespass\".</p>"},{"location":"examples/criminal-law/#yuho-representation_2","title":"Yuho Representation","text":"<pre><code>// Section 441 - Criminal Trespass\nstruct CriminalTrespass {\n    string accused,\n    string victim,\n    string property,\n    bool enteredProperty,\n    bool unlawfulEntry,\n    bool unlawfulRemaining,\n    bool intentToCommitOffence,\n    bool intentToIntimidate,\n    bool intentToInsult,\n    bool intentToAnnoy\n}\n\nmatch {\n    case (enteredProperty &amp;&amp; \n         (intentToCommitOffence || intentToIntimidate || intentToInsult || intentToAnnoy)) :=\n        consequence \"guilty of criminal trespass - unlawful entry\";\n\n    case (unlawfulRemaining &amp;&amp; \n         (intentToCommitOffence || intentToIntimidate || intentToInsult || intentToAnnoy)) :=\n        consequence \"guilty of criminal trespass - unlawful remaining\";\n\n    case _ :=\n        consequence \"not guilty of criminal trespass\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#two-forms-of-criminal-trespass","title":"Two Forms of Criminal Trespass","text":"<p>Form 1: Unlawful Entry - Enters property - With specific intent (offence/intimidate/insult/annoy)</p> <p>Form 2: Unlawful Remaining - Lawfully entered initially - Unlawfully remains - With specific intent</p>"},{"location":"examples/criminal-law/#example-4-extortion-section-383","title":"Example 4: Extortion (Section 383)","text":""},{"location":"examples/criminal-law/#legal-text_3","title":"Legal Text","text":"<p>Section 383 of the Penal Code:</p> <p>Whoever intentionally puts any person in fear of any harm to that person or to any other, and thereby dishonestly induces the person so put in fear to deliver to any person any property or valuable security, or anything signed or sealed which may be converted into a valuable security, commits \"extortion\".</p>"},{"location":"examples/criminal-law/#yuho-representation_3","title":"Yuho Representation","text":"<pre><code>// Section 383 - Extortion\nstruct Extortion {\n    string accused,\n    string victim,\n    bool intentionallyPutInFear,\n    bool fearOfHarm,\n    bool dishonestlyInduced,\n    bool deliveredProperty,\n    bool deliveredValuableSecurity\n}\n\nmatch {\n    case intentionallyPutInFear &amp;&amp; fearOfHarm &amp;&amp; dishonestlyInduced &amp;&amp;\n         (deliveredProperty || deliveredValuableSecurity) :=\n        consequence \"guilty of extortion under Section 383\";\n\n    case _ :=\n        consequence \"not guilty of extortion\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#elements-of-extortion","title":"Elements of Extortion","text":"<ol> <li>Intentional Fear: Intentionally puts person in fear</li> <li>Fear of Harm: Fear of harm to that person or another</li> <li>Dishonest Inducement: Dishonestly induces the frightened person</li> <li>Delivery: Victim delivers property or valuable security</li> </ol>"},{"location":"examples/criminal-law/#example-scenario","title":"Example Scenario","text":"<pre><code>// Extortion example\nstruct ExtortionCase {\n    string accused := \"Gangster\",\n    string victim := \"Shopkeeper\",\n    bool intentionallyPutInFear := TRUE,\n    bool fearOfHarm := TRUE,\n    bool dishonestlyInduced := TRUE,\n    bool deliveredProperty := TRUE  // Protection money\n}\n\nmatch {\n    case intentionallyPutInFear &amp;&amp; fearOfHarm &amp;&amp; \n         dishonestlyInduced &amp;&amp; deliveredProperty :=\n        consequence \"guilty of extortion\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#working-with-examples","title":"Working with Examples","text":""},{"location":"examples/criminal-law/#check-an-example","title":"Check an Example","text":"<pre><code># Validate the cheating example\nyuho check example/cheating/cheating_illustration_A.yh\n</code></pre>"},{"location":"examples/criminal-law/#visualize-an-example","title":"Visualize an Example","text":"<pre><code># Generate flowchart\nyuho draw example/cheating/s415_cheating_definition.yh -f flowchart -o cheating_flow.mmd\n\n# Generate mindmap\nyuho draw example/cheating/s415_cheating_definition.yh -f mindmap -o cheating_mind.mmd\n</code></pre>"},{"location":"examples/criminal-law/#verify-an-example","title":"Verify an Example","text":"<pre><code># Generate Alloy specification\nyuho alloy example/cheating/s415_cheating_definition.yh -o cheating.als\n\n# Verify with Alloy Analyzer (if installed)\njava -jar alloy.jar cheating.als\n</code></pre>"},{"location":"examples/criminal-law/#legal-reasoning-patterns","title":"Legal Reasoning Patterns","text":""},{"location":"examples/criminal-law/#pattern-1-conjunctive-requirements","title":"Pattern 1: Conjunctive Requirements","text":"<p>When ALL elements must be present:</p> <pre><code>match {\n    case element1 &amp;&amp; element2 &amp;&amp; element3 := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>Example: Theft requires ALL of: dishonest intention, movable property, without consent, movement.</p>"},{"location":"examples/criminal-law/#pattern-2-disjunctive-requirements","title":"Pattern 2: Disjunctive Requirements","text":"<p>When ANY element is sufficient:</p> <pre><code>match {\n    case element1 || element2 || element3 := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>Example: Cheating can involve delivery of property OR consent to retain OR induced action/omission.</p>"},{"location":"examples/criminal-law/#pattern-3-nested-conditions","title":"Pattern 3: Nested Conditions","text":"<p>Complex combinations:</p> <pre><code>match {\n    case baseElement &amp;&amp; (option1 || option2 || option3) &amp;&amp; finalElement :=\n        consequence \"guilty\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre> <p>Example: Cheating = deception + (fraudulent OR dishonest) + (one of three inducement types) + harm.</p>"},{"location":"examples/criminal-law/#pattern-4-multiple-consequences","title":"Pattern 4: Multiple Consequences","text":"<p>Different outcomes based on conditions:</p> <pre><code>match {\n    case severeCondition := consequence \"severe punishment\";\n    case moderateCondition := consequence \"moderate punishment\";\n    case minorCondition := consequence \"minor punishment\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#best-practices","title":"Best Practices","text":""},{"location":"examples/criminal-law/#1-clear-naming","title":"1. Clear Naming","text":"<pre><code>// Good: Descriptive names\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool causedHarm\n}\n\n// Avoid: Unclear abbreviations\nstruct Ch {\n    string a,\n    bool d,\n    bool h\n}\n</code></pre>"},{"location":"examples/criminal-law/#2-comments-for-context","title":"2. Comments for Context","text":"<pre><code>// Always include the legal source\n// Section 415 - Cheating\n\n// Explain complex conditions\ncase deception &amp;&amp; dishonest :=\n    // Both deception and dishonesty are required\n    consequence \"guilty\";\n</code></pre>"},{"location":"examples/criminal-law/#3-complete-case-coverage","title":"3. Complete Case Coverage","text":"<pre><code>match {\n    case condition1 := consequence \"result1\";\n    case condition2 := consequence \"result2\";\n    // Always include default case\n    case _ := consequence \"default\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#4-type-safety","title":"4. Type Safety","text":"<pre><code>// Use appropriate types\nstruct Offense {\n    string accused,        // Names are strings\n    int age,              // Age is integer\n    bool guilty,          // Guilt is boolean\n    money fine := $500.00 // Fines are money type\n}\n</code></pre>"},{"location":"examples/criminal-law/#additional-examples","title":"Additional Examples","text":"<p>Explore more examples in the repository:</p> <ul> <li><code>example/cheating/</code> - Multiple cheating scenarios (A through K)</li> <li>See GitHub Repository</li> </ul>"},{"location":"examples/criminal-law/#resources","title":"Resources","text":"<ul> <li>Penal Code of Singapore</li> <li>Language Syntax</li> <li>CLI Commands</li> <li>Transpilers</li> </ul>"},{"location":"examples/criminal-law/#next-steps","title":"Next Steps","text":"<ul> <li>Learn the full syntax</li> <li>Try the quickstart guide</li> <li>Explore match-case patterns</li> <li>Use the CLI effectively</li> </ul>"},{"location":"examples/patterns/","title":"Custom Patterns","text":"<p>Advanced legal patterns and reusable code structures for complex legal reasoning.</p>"},{"location":"examples/patterns/#overview","title":"Overview","text":"<p>This page demonstrates advanced patterns for representing complex legal concepts in Yuho:</p> <ul> <li>Hierarchical Patterns - Multi-level legal structures</li> <li>Conditional Patterns - Complex decision logic</li> <li>Reusable Patterns - Modular legal components</li> <li>Integration Patterns - Combining multiple legal concepts</li> </ul>"},{"location":"examples/patterns/#pattern-1-hierarchical-legal-structure","title":"Pattern 1: Hierarchical Legal Structure","text":""},{"location":"examples/patterns/#multi-level-offense-classification","title":"Multi-Level Offense Classification","text":"<pre><code>// Base offense structure\nstruct BaseOffense {\n    string name,\n    string section,\n    bool isIndictable,\n    money maxFine,\n    int maxSentence\n}\n\n// Specific offense types\nstruct PropertyOffense {\n    BaseOffense base,\n    bool involvesTheft,\n    bool involvesDamage,\n    money value\n}\n\nstruct ViolentOffense {\n    BaseOffense base,\n    bool involvesInjury,\n    bool involvesWeapon,\n    string injuryType\n}\n\n// Offense classification logic\nmatch {\n    case offense.base.isIndictable &amp;&amp; offense.base.maxSentence &gt; 7 :=\n        consequence \"serious offense\";\n\n    case offense.base.isIndictable :=\n        consequence \"indictable offense\";\n\n    case _ :=\n        consequence \"summary offense\";\n}\n</code></pre>"},{"location":"examples/patterns/#legal-hierarchy","title":"Legal Hierarchy","text":"<pre><code>// Legal system hierarchy\nstruct LegalSystem {\n    string jurisdiction,\n    string courtLevel,\n    string offenseType\n}\n\nmatch {\n    case courtLevel == \"Supreme Court\" :=\n        consequence \"highest court\";\n\n    case courtLevel == \"High Court\" :=\n        consequence \"superior court\";\n\n    case courtLevel == \"District Court\" :=\n        consequence \"inferior court\";\n\n    case _ :=\n        consequence \"unknown court level\";\n}\n</code></pre>"},{"location":"examples/patterns/#pattern-2-conditional-legal-logic","title":"Pattern 2: Conditional Legal Logic","text":""},{"location":"examples/patterns/#age-based-legal-treatment","title":"Age-Based Legal Treatment","text":"<pre><code>struct Person {\n    string name,\n    int age,\n    bool isMinor,\n    bool isEligible\n}\n\n// Age-based legal treatment\nmatch {\n    case age &lt; 18 :=\n        consequence \"juvenile treatment\";\n\n    case age &gt;= 18 &amp;&amp; age &lt; 21 :=\n        consequence \"young adult treatment\";\n\n    case age &gt;= 21 :=\n        consequence \"adult treatment\";\n\n    case _ :=\n        consequence \"unknown age treatment\";\n}\n</code></pre>"},{"location":"examples/patterns/#offense-severity-classification","title":"Offense Severity Classification","text":"<pre><code>struct OffenseSeverity {\n    string offenseType,\n    bool isViolent,\n    bool isRepeat,\n    money damageAmount\n}\n\nmatch {\n    case isViolent &amp;&amp; isRepeat :=\n        consequence \"severe punishment\";\n\n    case isViolent :=\n        consequence \"moderate punishment\";\n\n    case isRepeat :=\n        consequence \"enhanced punishment\";\n\n    case _ :=\n        consequence \"standard punishment\";\n}\n</code></pre>"},{"location":"examples/patterns/#pattern-3-reusable-legal-components","title":"Pattern 3: Reusable Legal Components","text":""},{"location":"examples/patterns/#legal-element-validation","title":"Legal Element Validation","text":"<pre><code>// Reusable validation function\nbool func validateLegalElements(bool element1, bool element2, bool element3) {\n    match {\n        case element1 &amp;&amp; element2 &amp;&amp; element3 :=\n            consequence TRUE;\n        case _ :=\n            consequence FALSE;\n    }\n}\n\n// Use in different contexts\nstruct Theft {\n    bool dishonestIntention,\n    bool movableProperty,\n    bool withoutConsent,\n    bool movedProperty\n}\n\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\n// Apply validation\nbool theftValid := validateLegalElements(\n    theft.dishonestIntention,\n    theft.movableProperty,\n    theft.withoutConsent\n);\n\nbool cheatingValid := validateLegalElements(\n    cheating.deception,\n    cheating.dishonest,\n    cheating.harm\n);\n</code></pre>"},{"location":"examples/patterns/#legal-relationship-patterns","title":"Legal Relationship Patterns","text":"<pre><code>// Legal relationship structure\nstruct LegalRelationship {\n    string relationshipType,\n    string party1,\n    string party2,\n    date startDate,\n    bool isActive\n}\n\n// Relationship validation\nbool func isValidRelationship(LegalRelationship rel) {\n    match {\n        case rel.isActive &amp;&amp; rel.startDate != pass :=\n            consequence TRUE;\n        case _ :=\n            consequence FALSE;\n    }\n}\n\n// Use in different contexts\nLegalRelationship marriage := {\n    relationshipType := \"marriage\",\n    party1 := \"Alice\",\n    party2 := \"Bob\",\n    startDate := 15-06-2020,\n    isActive := TRUE\n};\n\nLegalRelationship contract := {\n    relationshipType := \"contract\",\n    party1 := \"Company A\",\n    party2 := \"Company B\",\n    startDate := 01-01-2024,\n    isActive := TRUE\n};\n</code></pre>"},{"location":"examples/patterns/#pattern-4-integration-patterns","title":"Pattern 4: Integration Patterns","text":""},{"location":"examples/patterns/#multi-offense-scenarios","title":"Multi-Offense Scenarios","text":"<pre><code>// Multiple offenses in one case\nstruct MultiOffenseCase {\n    string caseNumber,\n    bool hasTheft,\n    bool hasCheating,\n    bool hasAssault,\n    bool isRepeatOffender\n}\n\nmatch {\n    case hasTheft &amp;&amp; hasCheating &amp;&amp; hasAssault :=\n        consequence \"multiple serious offenses\";\n\n    case hasTheft &amp;&amp; hasCheating :=\n        consequence \"property offenses\";\n\n    case hasAssault :=\n        consequence \"violent offense\";\n\n    case _ :=\n        consequence \"single offense\";\n}\n</code></pre>"},{"location":"examples/patterns/#legal-process-flow","title":"Legal Process Flow","text":"<pre><code>// Legal process stages\nstruct LegalProcess {\n    string stage,\n    bool isComplete,\n    string nextStage\n}\n\nmatch {\n    case stage == \"investigation\" &amp;&amp; isComplete :=\n        consequence \"proceed to charging\";\n\n    case stage == \"charging\" &amp;&amp; isComplete :=\n        consequence \"proceed to trial\";\n\n    case stage == \"trial\" &amp;&amp; isComplete :=\n        consequence \"proceed to sentencing\";\n\n    case stage == \"sentencing\" &amp;&amp; isComplete :=\n        consequence \"case concluded\";\n\n    case _ :=\n        consequence \"continue current stage\";\n}\n</code></pre>"},{"location":"examples/patterns/#pattern-5-temporal-legal-logic","title":"Pattern 5: Temporal Legal Logic","text":""},{"location":"examples/patterns/#time-based-legal-rules","title":"Time-Based Legal Rules","text":"<pre><code>struct TemporalCase {\n    date offenseDate,\n    date currentDate,\n    duration timeSinceOffense,\n    bool isWithinLimitation\n}\n\n// Limitation period logic\nmatch {\n    case timeSinceOffense &lt; 6 months :=\n        consequence \"recent offense\";\n\n    case timeSinceOffense &lt; 2 years :=\n        consequence \"recent offense\";\n\n    case timeSinceOffense &lt; 7 years :=\n        consequence \"old offense\";\n\n    case _ :=\n        consequence \"very old offense\";\n}\n</code></pre>"},{"location":"examples/patterns/#legal-deadlines","title":"Legal Deadlines","text":"<pre><code>struct LegalDeadline {\n    date deadline,\n    date currentDate,\n    bool isOverdue,\n    string consequence\n}\n\nmatch {\n    case isOverdue :=\n        consequence \"deadline missed\";\n\n    case deadline - currentDate &lt; 7 days :=\n        consequence \"deadline approaching\";\n\n    case _ :=\n        consequence \"deadline on track\";\n}\n</code></pre>"},{"location":"examples/patterns/#pattern-6-complex-decision-trees","title":"Pattern 6: Complex Decision Trees","text":""},{"location":"examples/patterns/#legal-decision-matrix","title":"Legal Decision Matrix","text":"<pre><code>struct LegalDecision {\n    bool element1,\n    bool element2,\n    bool element3,\n    bool element4,\n    string result\n}\n\nmatch {\n    case element1 &amp;&amp; element2 &amp;&amp; element3 &amp;&amp; element4 :=\n        consequence \"all elements present - guilty\";\n\n    case element1 &amp;&amp; element2 &amp;&amp; element3 :=\n        consequence \"three elements present - likely guilty\";\n\n    case element1 &amp;&amp; element2 :=\n        consequence \"two elements present - possibly guilty\";\n\n    case element1 :=\n        consequence \"one element present - unlikely guilty\";\n\n    case _ :=\n        consequence \"no elements present - not guilty\";\n}\n</code></pre>"},{"location":"examples/patterns/#legal-precedent-application","title":"Legal Precedent Application","text":"<pre><code>struct LegalPrecedent {\n    string caseName,\n    string legalPrinciple,\n    bool isApplicable,\n    string outcome\n}\n\nmatch {\n    case isApplicable &amp;&amp; legalPrinciple == \"strict liability\" :=\n        consequence \"apply strict liability\";\n\n    case isApplicable &amp;&amp; legalPrinciple == \"negligence\" :=\n        consequence \"apply negligence standard\";\n\n    case isApplicable &amp;&amp; legalPrinciple == \"intent\" :=\n        consequence \"apply intent requirement\";\n\n    case _ :=\n        consequence \"no applicable precedent\";\n}\n</code></pre>"},{"location":"examples/patterns/#pattern-7-modular-legal-components","title":"Pattern 7: Modular Legal Components","text":""},{"location":"examples/patterns/#legal-module-system","title":"Legal Module System","text":"<pre><code>// Base legal module\nscope LegalBase {\n    struct LegalEntity {\n        string name,\n        string type,\n        bool isActive\n    }\n\n    bool func isActive(LegalEntity entity) {\n        match entity.isActive {\n            case TRUE := consequence TRUE;\n            case FALSE := consequence FALSE;\n        }\n    }\n}\n\n// Criminal law module\nscope CriminalLaw {\n    referencing LegalBase\n\n    struct CriminalOffense {\n        string name,\n        string section,\n        bool isIndictable,\n        money maxFine,\n        int maxSentence\n    }\n\n    bool func isSeriousOffense(CriminalOffense offense) {\n        match {\n            case offense.isIndictable &amp;&amp; offense.maxSentence &gt; 7 :=\n                consequence TRUE;\n            case _ :=\n                consequence FALSE;\n        }\n    }\n}\n\n// Civil law module\nscope CivilLaw {\n    referencing LegalBase\n\n    struct CivilClaim {\n        string claimType,\n        money amount,\n        bool isSettled\n    }\n\n    bool func isHighValue(CivilClaim claim) {\n        match {\n            case claim.amount &gt; $10000.00 :=\n                consequence TRUE;\n            case _ :=\n                consequence FALSE;\n        }\n    }\n}\n</code></pre>"},{"location":"examples/patterns/#pattern-8-legal-validation-patterns","title":"Pattern 8: Legal Validation Patterns","text":""},{"location":"examples/patterns/#comprehensive-legal-validation","title":"Comprehensive Legal Validation","text":"<pre><code>struct LegalValidation {\n    bool syntaxValid,\n    bool semanticValid,\n    bool logicValid,\n    bool completeValid\n}\n\nbool func validateLegalCode(LegalValidation validation) {\n    match {\n        case validation.syntaxValid &amp;&amp; validation.semanticValid &amp;&amp; \n             validation.logicValid &amp;&amp; validation.completeValid :=\n            consequence TRUE;\n        case _ :=\n            consequence FALSE;\n    }\n}\n\n// Use in different contexts\nLegalValidation theftValidation := {\n    syntaxValid := TRUE,\n    semanticValid := TRUE,\n    logicValid := TRUE,\n    completeValid := TRUE\n};\n\nLegalValidation cheatingValidation := {\n    syntaxValid := TRUE,\n    semanticValid := TRUE,\n    logicValid := TRUE,\n    completeValid := TRUE\n};\n</code></pre>"},{"location":"examples/patterns/#best-practices-for-patterns","title":"Best Practices for Patterns","text":""},{"location":"examples/patterns/#1-use-descriptive-names","title":"1. Use Descriptive Names","text":"<pre><code>// Good: Clear pattern names\nstruct LegalDecisionMatrix {\n    bool element1,\n    bool element2,\n    bool element3\n}\n\n// Avoid: Generic names\nstruct Pattern {\n    bool a,\n    bool b,\n    bool c\n}\n</code></pre>"},{"location":"examples/patterns/#2-document-legal-context","title":"2. Document Legal Context","text":"<pre><code>// Good: Include legal source\n// Based on Section 415 - Cheating\nstruct CheatingPattern {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n</code></pre>"},{"location":"examples/patterns/#3-use-modular-design","title":"3. Use Modular Design","text":"<pre><code>// Good: Modular components\nscope LegalBase {\n    // Base legal structures\n}\n\nscope CriminalLaw {\n    referencing LegalBase\n    // Criminal law specific structures\n}\n</code></pre>"},{"location":"examples/patterns/#4-validate-patterns","title":"4. Validate Patterns","text":"<pre><code>// Good: Include validation\nbool func validatePattern(Pattern pattern) {\n    match {\n        case pattern.element1 &amp;&amp; pattern.element2 :=\n            consequence TRUE;\n        case _ :=\n            consequence FALSE;\n    }\n}\n</code></pre>"},{"location":"examples/patterns/#common-pattern-mistakes","title":"Common Pattern Mistakes","text":""},{"location":"examples/patterns/#mistake-1-overly-complex-patterns","title":"Mistake 1: Overly Complex Patterns","text":"<pre><code>// Wrong: Too complex\nstruct OverlyComplex {\n    bool a, bool b, bool c, bool d, bool e, bool f, bool g, bool h\n}\n\nmatch {\n    case a &amp;&amp; b &amp;&amp; c &amp;&amp; d &amp;&amp; e &amp;&amp; f &amp;&amp; g &amp;&amp; h :=\n        consequence \"result\";\n    case _ :=\n        consequence \"default\";\n}\n</code></pre> <p>Fix: Break into smaller patterns:</p> <pre><code>struct SimplePattern1 {\n    bool a, bool b, bool c, bool d\n}\n\nstruct SimplePattern2 {\n    bool e, bool f, bool g, bool h\n}\n</code></pre>"},{"location":"examples/patterns/#mistake-2-missing-validation","title":"Mistake 2: Missing Validation","text":"<pre><code>// Wrong: No validation\nstruct Pattern {\n    bool element1,\n    bool element2\n}\n\nmatch {\n    case element1 &amp;&amp; element2 :=\n        consequence \"result\";\n    case _ :=\n        consequence \"default\";\n}\n</code></pre> <p>Fix: Include validation:</p> <pre><code>bool func validatePattern(Pattern pattern) {\n    match {\n        case pattern.element1 &amp;&amp; pattern.element2 :=\n            consequence TRUE;\n        case _ :=\n            consequence FALSE;\n    }\n}\n</code></pre>"},{"location":"examples/patterns/#mistake-3-inconsistent-naming","title":"Mistake 3: Inconsistent Naming","text":"<pre><code>// Wrong: Inconsistent naming\nstruct LegalPattern {\n    bool element1,\n    bool element2,\n    bool element3\n}\n\nmatch {\n    case element1 &amp;&amp; element2 &amp;&amp; element3 :=\n        consequence \"result\";\n    case _ :=\n        consequence \"default\";\n}\n</code></pre> <p>Fix: Use consistent naming:</p> <pre><code>struct LegalPattern {\n    bool isElement1,\n    bool isElement2,\n    bool isElement3\n}\n\nmatch {\n    case isElement1 &amp;&amp; isElement2 &amp;&amp; isElement3 :=\n        consequence \"result\";\n    case _ :=\n        consequence \"default\";\n}\n</code></pre>"},{"location":"examples/patterns/#resources","title":"Resources","text":"<ul> <li>Language Syntax - Complete Yuho reference</li> <li>CLI Commands - Command-line tools</li> <li>Transpilers - Generate diagrams and specifications</li> <li>Cheating Examples - Specific legal examples</li> </ul>"},{"location":"examples/patterns/#next-steps","title":"Next Steps","text":"<ul> <li>Language Guide - Complete Yuho reference</li> <li>CLI Commands - Command-line tools</li> <li>Transpilers - Generate diagrams and specifications</li> <li>Development Guide - Contributing to Yuho</li> </ul>"},{"location":"getting-started/first-program/","title":"Your First Yuho Program","text":"<p>This tutorial will guide you through writing your first Yuho program step by step.</p>"},{"location":"getting-started/first-program/#hello-yuho","title":"Hello, Yuho!","text":"<p>Let's start with a simple example that demonstrates the core concepts.</p>"},{"location":"getting-started/first-program/#step-1-create-the-file","title":"Step 1: Create the File","text":"<p>Create a new file called <code>hello.yh</code>:</p> <pre><code>touch hello.yh\n</code></pre>"},{"location":"getting-started/first-program/#step-2-define-a-struct","title":"Step 2: Define a Struct","text":"<p>Structs are Yuho's primary data structure. Let's define a simple person:</p> <pre><code>// Define a Person struct\nstruct Person {\n    string name,\n    int age,\n    bool isStudent\n}\n</code></pre>"},{"location":"getting-started/first-program/#step-3-create-variables","title":"Step 3: Create Variables","text":"<p>Let's create some variables:</p> <pre><code>// Simple variable declarations\nstring greeting := \"Hello, Yuho!\";\nint year := 2024;\nbool learning := TRUE;\n</code></pre>"},{"location":"getting-started/first-program/#step-4-add-logic-with-match-case","title":"Step 4: Add Logic with Match-Case","text":"<p>Yuho uses match-case for conditional logic:</p> <pre><code>// Check if learning\nmatch {\n    case learning == TRUE := consequence \"Keep learning!\";\n    case _ := consequence \"Start learning!\";\n}\n</code></pre>"},{"location":"getting-started/first-program/#step-5-complete-program","title":"Step 5: Complete Program","text":"<p>Here's the complete <code>hello.yh</code>:</p> <pre><code>// Your first Yuho program\n\n// Define a Person struct\nstruct Person {\n    string name,\n    int age,\n    bool isStudent\n}\n\n// Create variables\nstring greeting := \"Hello, Yuho!\";\nint year := 2024;\nbool learning := TRUE;\n\n// Conditional logic\nmatch {\n    case learning == TRUE := consequence \"Keep learning!\";\n    case _ := consequence \"Start learning!\";\n}\n</code></pre>"},{"location":"getting-started/first-program/#step-6-check-your-program","title":"Step 6: Check Your Program","text":"<p>Validate your program:</p> <pre><code>yuho check hello.yh\n</code></pre> <p>Expected output: <pre><code>\u2713 Syntax check passed\n\u2713 Semantic check passed\n\u2713 hello.yh looks good!\n</code></pre></p>"},{"location":"getting-started/first-program/#step-7-visualize-your-program","title":"Step 7: Visualize Your Program","text":"<p>Generate a flowchart:</p> <pre><code>yuho draw hello.yh --format flowchart -o hello_flow.mmd\n</code></pre> <p>Generate a mindmap:</p> <pre><code>yuho draw hello.yh --format mindmap -o hello_mind.mmd\n</code></pre>"},{"location":"getting-started/first-program/#understanding-the-concepts","title":"Understanding the Concepts","text":""},{"location":"getting-started/first-program/#structs","title":"Structs","text":"<p>Structs define custom data types with named fields:</p> <pre><code>struct StructName {\n    type fieldName,\n    type anotherField\n}\n</code></pre>"},{"location":"getting-started/first-program/#variables","title":"Variables","text":"<p>Variables are declared with type and immutably assigned:</p> <pre><code>type variableName := value;\n</code></pre>"},{"location":"getting-started/first-program/#match-case","title":"Match-Case","text":"<p>Pattern matching for conditional logic:</p> <pre><code>match {\n    case condition := consequence result;\n    case _ := consequence defaultResult;\n}\n</code></pre>"},{"location":"getting-started/first-program/#a-legal-example","title":"A Legal Example","text":"<p>Let's create a more practical legal example in <code>theft.yh</code>:</p> <pre><code>// Simple representation of theft offense\n\nstruct Theft {\n    string accused,\n    string property,\n    bool dishonest,\n    bool movable,\n    bool withoutConsent\n}\n\n// Define the logical requirements\nmatch {\n    case dishonest &amp;&amp; movable &amp;&amp; withoutConsent :=\n        consequence \"guilty of theft\";\n    case dishonest &amp;&amp; movable :=\n        consequence \"additional investigation required\";\n    case _ :=\n        consequence \"not guilty of theft\";\n}\n</code></pre> <p>Check this program:</p> <pre><code>yuho check theft.yh\nyuho draw theft.yh -f flowchart -o theft.mmd\n</code></pre>"},{"location":"getting-started/first-program/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/first-program/#boolean-logic","title":"Boolean Logic","text":"<pre><code>bool conditionA := TRUE;\nbool conditionB := FALSE;\n\nmatch {\n    case conditionA &amp;&amp; conditionB := consequence \"Both true\";\n    case conditionA || conditionB := consequence \"At least one true\";\n    case _ := consequence \"Both false\";\n}\n</code></pre>"},{"location":"getting-started/first-program/#numeric-comparisons","title":"Numeric Comparisons","text":"<pre><code>int age := 25;\n\nmatch {\n    case age &gt;= 18 := consequence \"Adult\";\n    case age &gt;= 13 := consequence \"Teenager\";\n    case _ := consequence \"Child\";\n}\n</code></pre>"},{"location":"getting-started/first-program/#multiple-conditions","title":"Multiple Conditions","text":"<pre><code>bool cond1 := TRUE;\nbool cond2 := TRUE;\nbool cond3 := FALSE;\n\nmatch {\n    case cond1 &amp;&amp; cond2 &amp;&amp; cond3 := consequence \"All true\";\n    case cond1 &amp;&amp; cond2 := consequence \"First two true\";\n    case cond1 := consequence \"Only first true\";\n    case _ := consequence \"None or other combinations\";\n}\n</code></pre>"},{"location":"getting-started/first-program/#next-steps","title":"Next Steps","text":"<p>Now that you've written your first Yuho program:</p> <ol> <li>Learn more about syntax</li> <li>Explore Yuho types</li> <li>Master match-case patterns</li> <li>See real examples</li> </ol>"},{"location":"getting-started/first-program/#exercises","title":"Exercises","text":"<p>Try these exercises to practice:</p> <ol> <li>Create a struct representing a contract with relevant fields</li> <li>Write a match-case that checks multiple conditions</li> <li>Generate both flowchart and mindmap for your program</li> <li>Experiment with different types (money, date, duration)</li> </ol>"},{"location":"getting-started/first-program/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/first-program/#syntax-errors","title":"Syntax Errors","text":"<p>Common mistakes:</p> <pre><code>// Wrong: Using = instead of :=\nint x = 42;  // \u274c\n\n// Correct:\nint x := 42;  // \u2713\n\n// Wrong: Missing semicolon\nint y := 10  // \u274c\n\n// Correct:\nint y := 10;  // \u2713\n\n// Wrong: Wrong struct syntax\nstruct Test {\n    string name: \"value\"  // \u274c\n}\n\n// Correct:\nstruct Test {\n    string name  // \u2713\n}\n</code></pre>"},{"location":"getting-started/first-program/#type-errors","title":"Type Errors","text":"<pre><code>// Wrong: Type mismatch\nint x := \"string\";  // \u274c\n\n// Correct:\nint x := 42;  // \u2713\nstring s := \"string\";  // \u2713\n</code></pre>"},{"location":"getting-started/first-program/#resources","title":"Resources","text":"<ul> <li>Language Reference</li> <li>CLI Commands</li> <li>More Examples</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install Yuho on your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing Yuho, ensure you have:</p> <ul> <li>Python 3.8 or higher</li> <li>pip (Python package manager)</li> <li>Git (for development installation)</li> </ul>"},{"location":"getting-started/installation/#check-python-version","title":"Check Python Version","text":"<pre><code>python --version\n# or\npython3 --version\n</code></pre> <p>You should see output like <code>Python 3.11.x</code> or higher.</p>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":"Production (pip)Development (source)Docker"},{"location":"getting-started/installation/#install-from-pypi-recommended","title":"Install from PyPI (Recommended)","text":"<p>Once published, you can install Yuho directly from PyPI:</p> <pre><code>pip install yuho\n</code></pre> <p>Verify the installation:</p> <pre><code>yuho --version\n</code></pre>"},{"location":"getting-started/installation/#install-from-source","title":"Install from Source","text":"<p>For development or to get the latest features:</p> <ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/gongahkia/yuho.git\ncd yuho\n</code></pre> <ol> <li>Install in editable mode:</li> </ol> <pre><code>pip install -e .\n</code></pre> <p>Or with development dependencies:</p> <pre><code>pip install -r requirements-dev.txt\npip install -e .\n</code></pre> <ol> <li>Verify installation:</li> </ol> <pre><code>yuho --version\n</code></pre>"},{"location":"getting-started/installation/#using-docker","title":"Using Docker","text":"<p>The easiest way to run Yuho without installing Python:</p> <ol> <li>Pull the image (once available):</li> </ol> <pre><code>docker pull yuho:latest\n</code></pre> <p>Or build locally:</p> <pre><code>git clone https://github.com/gongahkia/yuho.git\ncd yuho\ndocker build -t yuho:latest .\n</code></pre> <ol> <li>Run Yuho:</li> </ol> <pre><code># Check a file\ndocker run --rm -v $(pwd):/workspace yuho:latest check example.yh\n\n# Start REPL\ndocker run --rm -it yuho:latest yuho-repl\n</code></pre> <ol> <li>Using docker-compose:</li> </ol> <pre><code># Development environment\ndocker-compose up yuho-dev\n\n# Run tests\ndocker-compose up yuho-test\n\n# Interactive REPL\ndocker-compose run --rm yuho-repl\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify Yuho is working:</p> <pre><code># Check version\nyuho --version\n\n# Get help\nyuho --help\n\n# Try the REPL\nyuho-repl\n</code></pre> <p>You should see output indicating Yuho v3.0.0 or later.</p>"},{"location":"getting-started/installation/#development-setup","title":"Development Setup","text":"<p>If you plan to contribute to Yuho:</p> <ol> <li>Clone and install:</li> </ol> <pre><code>git clone https://github.com/gongahkia/yuho.git\ncd yuho\npip install -r requirements-dev.txt\npip install -e .\n</code></pre> <ol> <li>Install pre-commit hooks:</li> </ol> <pre><code>pre-commit install\n</code></pre> <ol> <li>Run tests:</li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Check code quality:</li> </ol> <pre><code>black yuho_v3/\nflake8 yuho_v3/\nmypy yuho_v3/\n</code></pre>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#linux","title":"Linux","text":"<p>Installation should work out of the box on most distributions.</p>"},{"location":"getting-started/installation/#macos","title":"macOS","text":"<p>Use Homebrew to install Python if needed:</p> <pre><code>brew install python@3.11\n</code></pre>"},{"location":"getting-started/installation/#windows","title":"Windows","text":"<ol> <li>Install Python from python.org</li> <li>Ensure \"Add Python to PATH\" is checked during installation</li> <li>Use PowerShell or Command Prompt for commands</li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#command-not-found","title":"Command not found","text":"<p>If <code>yuho</code> command is not found after installation:</p> <ol> <li>Check if Python scripts directory is in PATH:</li> </ol> <pre><code>python -m site --user-base\n</code></pre> <ol> <li>Add the scripts directory to your PATH</li> </ol>"},{"location":"getting-started/installation/#permission-errors","title":"Permission errors","text":"<p>On Linux/macOS, you might need:</p> <pre><code>pip install --user yuho\n</code></pre> <p>Or use a virtual environment:</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install yuho\n</code></pre>"},{"location":"getting-started/installation/#docker-issues","title":"Docker issues","text":"<p>Ensure Docker is running:</p> <pre><code>docker --version\ndocker ps\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Get started with Yuho</li> <li>Your First Program - Write your first Yuho program</li> <li>CLI Commands - Learn the command-line interface</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>Get up and running with Yuho in 5 minutes!</p>"},{"location":"getting-started/quickstart/#installation","title":"Installation","text":"<p>First, install Yuho:</p> <pre><code>pip install -e .\n</code></pre> <p>Verify installation:</p> <pre><code>yuho --version\n</code></pre>"},{"location":"getting-started/quickstart/#your-first-yuho-program","title":"Your First Yuho Program","text":"<p>Create a file called <code>first.yh</code>:</p> <pre><code>// Define a simple struct\nstruct Person {\n    string name,\n    int age\n}\n\n// Create a variable\nint x := 42;\n\n// Use match-case for logic\nmatch {\n    case x &gt; 0 := consequence TRUE;\n    case _ := consequence FALSE;\n}\n</code></pre>"},{"location":"getting-started/quickstart/#check-your-code","title":"Check Your Code","text":"<p>Validate syntax and semantics:</p> <pre><code>yuho check first.yh\n</code></pre> <p>You should see: <pre><code>\u2713 Syntax check passed\n\u2713 Semantic check passed\n\u2713 first.yh looks good!\n</code></pre></p>"},{"location":"getting-started/quickstart/#generate-visualizations","title":"Generate Visualizations","text":"<p>Create a flowchart diagram:</p> <pre><code>yuho draw first.yh --format flowchart -o first.mmd\n</code></pre> <p>Create a mindmap:</p> <pre><code>yuho draw first.yh --format mindmap -o first_mindmap.mmd\n</code></pre>"},{"location":"getting-started/quickstart/#generate-formal-specification","title":"Generate Formal Specification","text":"<p>Create an Alloy specification for verification:</p> <pre><code>yuho alloy first.yh -o first.als\n</code></pre>"},{"location":"getting-started/quickstart/#interactive-repl","title":"Interactive REPL","text":"<p>Start the interactive shell:</p> <pre><code>yuho-repl\n</code></pre> <p>Try some commands:</p> <pre><code>yuho&gt; struct Test { string name }\n\u2713 Valid Yuho code\n\nyuho&gt; int x := 42;\n\u2713 Valid Yuho code\n\nyuho&gt; help\n[Shows available commands]\n\nyuho&gt; exit\n</code></pre>"},{"location":"getting-started/quickstart/#legal-example","title":"Legal Example","text":"<p>Let's create a real legal statute representation. Create <code>cheating.yh</code>:</p> <pre><code>// Section 415 of the Penal Code - Cheating\nstruct Cheating {\n    string accused,\n    string victim,\n    string action,\n    bool deception,\n    bool dishonest,\n    bool inducedAction,\n    bool causedHarm\n}\n\n// Logical requirements for cheating offense\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; inducedAction &amp;&amp; causedHarm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre> <p>Check it:</p> <pre><code>yuho check cheating.yh\n</code></pre> <p>Generate flowchart:</p> <pre><code>yuho draw cheating.yh --format flowchart -o cheating_flow.mmd\n</code></pre>"},{"location":"getting-started/quickstart/#common-cli-commands","title":"Common CLI Commands","text":"Command Purpose Example <code>check</code> Validate syntax and semantics <code>yuho check file.yh</code> <code>draw</code> Generate Mermaid diagrams <code>yuho draw file.yh -f flowchart</code> <code>alloy</code> Generate Alloy specification <code>yuho alloy file.yh -o spec.als</code> <code>draft</code> Create template file <code>yuho draft MyStruct -o file.yh</code> <code>how</code> Show usage examples <code>yuho how</code>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've got the basics:</p> <ol> <li>Learn the full syntax</li> <li>Explore more examples</li> <li>Understand match-case patterns</li> <li>Use the CLI effectively</li> </ol>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quickstart/#syntax-error","title":"Syntax Error","text":"<p>If you get a syntax error:</p> <ul> <li>Check that you're using <code>:=</code> for assignment (not <code>=</code>)</li> <li>Ensure all statements end with <code>;</code></li> <li>Verify struct field syntax uses <code>,</code> between fields</li> </ul>"},{"location":"getting-started/quickstart/#file-not-found","title":"File Not Found","text":"<ul> <li>Ensure you're in the correct directory</li> <li>Use absolute or relative paths correctly</li> <li>Check file has <code>.yh</code> extension</li> </ul>"},{"location":"getting-started/quickstart/#import-errors","title":"Import Errors","text":"<p>If Python import errors occur:</p> <pre><code>pip install -r requirements.txt\npip install -e .\n</code></pre>"},{"location":"getting-started/quickstart/#getting-help","title":"Getting Help","text":"<ul> <li>Use <code>yuho --help</code> for command-line help</li> <li>Use <code>yuho how</code> for usage examples</li> <li>Check FAQ for common questions</li> <li>Visit GitHub Issues for support</li> </ul>"},{"location":"language/comments/","title":"Comments","text":"<p>Comments in Yuho provide documentation and context for legal code.</p>"},{"location":"language/comments/#overview","title":"Overview","text":"<p>Comments in Yuho serve several purposes:</p> <ul> <li>Legal Context - Explain the legal source and reasoning</li> <li>Code Documentation - Describe what the code does</li> <li>Clarity - Make complex legal logic understandable</li> <li>Maintenance - Help future developers understand the code</li> </ul>"},{"location":"language/comments/#comment-types","title":"Comment Types","text":""},{"location":"language/comments/#single-line-comments","title":"Single-Line Comments","text":"<p>Use <code>//</code> for single-line comments:</p> <pre><code>// This is a single-line comment\nstring name := \"John Doe\";\n\n// Section 415 - Cheating\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n</code></pre>"},{"location":"language/comments/#multi-line-comments","title":"Multi-Line Comments","text":"<p>Use <code>/* */</code> for multi-line comments:</p> <pre><code>/*\nThis is a multi-line comment\nthat can span multiple lines\nand is useful for longer explanations\n*/\n\nstruct LegalConcept {\n    string name,\n    bool isValid\n}\n</code></pre>"},{"location":"language/comments/#legal-documentation","title":"Legal Documentation","text":""},{"location":"language/comments/#legal-source-attribution","title":"Legal Source Attribution","text":"<p>Always include the legal source:</p> <pre><code>// Section 415 - Cheating\n// Whoever, by deceiving any person, fraudulently or dishonestly...\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n</code></pre>"},{"location":"language/comments/#legal-context","title":"Legal Context","text":"<p>Explain the legal reasoning:</p> <pre><code>// Cheating requires three elements:\n// 1. Deception - the accused must deceive someone\n// 2. Dishonesty - the accused must act dishonestly\n// 3. Harm - the deception must cause harm\nstruct Cheating {\n    bool deception,    // Element 1: Deception\n    bool dishonest,    // Element 2: Dishonesty\n    bool harm          // Element 3: Harm\n}\n</code></pre>"},{"location":"language/comments/#legal-precedents","title":"Legal Precedents","text":"<p>Reference relevant cases:</p> <pre><code>// Based on R v. Ghosh [1982] QB 1053\n// Dishonesty is determined by the objective test\nstruct DishonestyTest {\n    bool objectiveTest,  // Would reasonable person consider it dishonest?\n    bool subjectiveTest  // Did accused know it was dishonest?\n}\n</code></pre>"},{"location":"language/comments/#code-documentation","title":"Code Documentation","text":""},{"location":"language/comments/#function-documentation","title":"Function Documentation","text":"<pre><code>// Determines if a person is guilty of cheating\n// Parameters:\n//   - case: Cheating struct with all elements\n// Returns:\n//   - TRUE if all elements are present, FALSE otherwise\nbool func isCheating(Cheating case) {\n    match {\n        case case.deception &amp;&amp; case.dishonest &amp;&amp; case.harm :=\n            consequence TRUE;\n        case _ :=\n            consequence FALSE;\n    }\n}\n</code></pre>"},{"location":"language/comments/#struct-documentation","title":"Struct Documentation","text":"<pre><code>// Represents the elements of theft under Section 378\n// All elements must be present for theft to be established\nstruct Theft {\n    bool dishonestIntention,  // Intention to take dishonestly\n    bool movableProperty,     // Property must be movable\n    bool withoutConsent,      // Taken without owner's consent\n    bool movedProperty        // Property must be moved\n}\n</code></pre>"},{"location":"language/comments/#variable-documentation","title":"Variable Documentation","text":"<pre><code>// The maximum fine for theft offenses\nmoney maxFine := $5000.00;\n\n// The minimum age for adult court jurisdiction\nint adultAge := 18;\n\n// Whether the case involves a minor\nbool isMinor := FALSE;\n</code></pre>"},{"location":"language/comments/#complex-logic-documentation","title":"Complex Logic Documentation","text":""},{"location":"language/comments/#match-case-documentation","title":"Match-Case Documentation","text":"<pre><code>match {\n    // Cheating requires: deception + (fraudulent OR dishonest) + harm\n    case deception &amp;&amp; (fraudulent || dishonest) &amp;&amp; harm :=\n        consequence \"guilty of cheating\";\n\n    // If any element is missing, not guilty\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"language/comments/#conditional-logic","title":"Conditional Logic","text":"<pre><code>match {\n    // Juvenile cases go to juvenile court\n    case age &lt; 18 := consequence \"juvenile court\";\n\n    // Adult cases go to adult court\n    case age &gt;= 18 := consequence \"adult court\";\n\n    // Invalid age (should not happen)\n    case _ := consequence \"unknown court\";\n}\n</code></pre>"},{"location":"language/comments/#nested-conditions","title":"Nested Conditions","text":"<pre><code>match {\n    // Severe punishment for violent offenses by repeat offenders\n    case violentOffense &amp;&amp; repeatOffender := consequence \"life imprisonment\";\n\n    // Moderate punishment for violent offenses\n    case violentOffender := consequence \"10 years imprisonment\";\n\n    // Light punishment for property offenses\n    case propertyOffense := consequence \"2 years imprisonment\";\n\n    // Default case\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/comments/#best-practices","title":"Best Practices","text":""},{"location":"language/comments/#1-always-include-legal-source","title":"1. Always Include Legal Source","text":"<pre><code>// Good: Includes legal source\n// Section 415 - Cheating\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\n// Avoid: No legal context\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n</code></pre>"},{"location":"language/comments/#2-explain-complex-logic","title":"2. Explain Complex Logic","text":"<pre><code>// Good: Explains complex condition\n// Cheating requires: deception + (fraudulent OR dishonest) + harm\nmatch {\n    case deception &amp;&amp; (fraudulent || dishonest) &amp;&amp; harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n\n// Avoid: No explanation\nmatch {\n    case a &amp;&amp; (b || c) &amp;&amp; d :=\n        consequence \"guilty\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/comments/#3-document-field-purposes","title":"3. Document Field Purposes","text":"<pre><code>// Good: Explains each field\nstruct Theft {\n    bool dishonestIntention,  // Intention to take dishonestly\n    bool movableProperty,     // Property must be movable\n    bool withoutConsent,      // Taken without owner's consent\n    bool movedProperty        // Property must be moved\n}\n\n// Avoid: No field documentation\nstruct Theft {\n    bool dishonestIntention,\n    bool movableProperty,\n    bool withoutConsent,\n    bool movedProperty\n}\n</code></pre>"},{"location":"language/comments/#4-use-clear-legal-language","title":"4. Use Clear, Legal Language","text":"<pre><code>// Good: Clear legal language\n// The accused must have the intention to permanently deprive the owner\nbool dishonestIntention := TRUE;\n\n// Avoid: Informal language\n// The guy needs to want to keep the stuff\nbool dishonestIntention := TRUE;\n</code></pre>"},{"location":"language/comments/#comment-styles","title":"Comment Styles","text":""},{"location":"language/comments/#legal-style","title":"Legal Style","text":"<pre><code>// Section 378 - Theft\n// Whoever, intending to take dishonestly any movable property out of the possession of any person without that person's consent, moves that property in order to such taking, is said to commit theft.\nstruct Theft {\n    bool dishonestIntention,  // Intention to take dishonestly\n    bool movableProperty,      // Property must be movable\n    bool withoutConsent,       // Taken without consent\n    bool movedProperty         // Property must be moved\n}\n</code></pre>"},{"location":"language/comments/#technical-style","title":"Technical Style","text":"<pre><code>// Theft offense validation\n// Checks if all required elements are present\nbool func isTheft(Theft case) {\n    match {\n        case case.dishonestIntention &amp;&amp; case.movableProperty &amp;&amp; \n             case.withoutConsent &amp;&amp; case.movedProperty :=\n            consequence TRUE;\n        case _ :=\n            consequence FALSE;\n    }\n}\n</code></pre>"},{"location":"language/comments/#educational-style","title":"Educational Style","text":"<pre><code>// This example demonstrates the elements of cheating\n// Students should understand that ALL elements must be present\nstruct CheatingExample {\n    bool deception,    // Did the accused deceive someone?\n    bool dishonest,    // Did the accused act dishonestly?\n    bool harm          // Did the deception cause harm?\n}\n</code></pre>"},{"location":"language/comments/#common-patterns","title":"Common Patterns","text":""},{"location":"language/comments/#pattern-1-legal-definition","title":"Pattern 1: Legal Definition","text":"<pre><code>// Section 415 - Cheating\n// Whoever, by deceiving any person, fraudulently or dishonestly induces the person so deceived to deliver any property to any person, or to consent that any person shall retain any property, or intentionally induces the person so deceived to do or omit to do anything which he would not do or omit if he were not so deceived, and which act or omission causes or is likely to cause damage or harm to that person in body, mind, reputation or property, is said to \"cheat\".\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n</code></pre>"},{"location":"language/comments/#pattern-2-case-study","title":"Pattern 2: Case Study","text":"<pre><code>// Case Study: R v. Ghosh [1982] QB 1053\n// This case established the two-stage test for dishonesty:\n// 1. Objective test: Would reasonable person consider it dishonest?\n// 2. Subjective test: Did accused know it was dishonest?\nstruct DishonestyTest {\n    bool objectiveTest,  // Stage 1: Objective test\n    bool subjectiveTest  // Stage 2: Subjective test\n}\n</code></pre>"},{"location":"language/comments/#pattern-3-legal-reasoning","title":"Pattern 3: Legal Reasoning","text":"<pre><code>// Legal Reasoning: Cheating requires three elements\n// 1. Deception - the accused must deceive someone\n// 2. Dishonesty - the accused must act dishonestly  \n// 3. Harm - the deception must cause harm\n// All three elements must be present for cheating to be established\nstruct Cheating {\n    bool deception,    // Element 1: Deception\n    bool dishonest,    // Element 2: Dishonesty\n    bool harm          // Element 3: Harm\n}\n</code></pre>"},{"location":"language/comments/#documentation-standards","title":"Documentation Standards","text":""},{"location":"language/comments/#file-header","title":"File Header","text":"<pre><code>/*\nYuho v3.0 - Legal Domain-Specific Language\nFile: cheating.yh\nPurpose: Represents the offense of cheating under Section 415\nAuthor: Legal Team\nDate: 2024-01-01\nLegal Source: Section 415, Penal Code of Singapore\n*/\n</code></pre>"},{"location":"language/comments/#function-header","title":"Function Header","text":"<pre><code>// Determines if a person is guilty of cheating\n// Legal Basis: Section 415, Penal Code\n// Parameters:\n//   - case: Cheating struct containing all elements\n// Returns:\n//   - TRUE if all elements are present (guilty)\n//   - FALSE if any element is missing (not guilty)\nbool func isCheating(Cheating case) {\n    // Implementation\n}\n</code></pre>"},{"location":"language/comments/#struct-header","title":"Struct Header","text":"<pre><code>// Represents the elements of cheating under Section 415\n// Legal Requirements: All elements must be present\n// Elements:\n//   - deception: The accused must deceive someone\n//   - dishonest: The accused must act dishonestly\n//   - harm: The deception must cause harm\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n</code></pre>"},{"location":"language/comments/#troubleshooting","title":"Troubleshooting","text":""},{"location":"language/comments/#common-issues","title":"Common Issues","text":""},{"location":"language/comments/#issue-1-missing-legal-context","title":"Issue 1: Missing Legal Context","text":"<pre><code>// Problem: No legal source\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n</code></pre> <p>Solution: Add legal source:</p> <pre><code>// Section 415 - Cheating\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n</code></pre>"},{"location":"language/comments/#issue-2-unclear-field-names","title":"Issue 2: Unclear Field Names","text":"<pre><code>// Problem: Unclear field names\nstruct Cheating {\n    bool a,\n    bool b,\n    bool c\n}\n</code></pre> <p>Solution: Use descriptive names and comments:</p> <pre><code>// Section 415 - Cheating\nstruct Cheating {\n    bool deception,    // Element 1: Deception\n    bool dishonest,    // Element 2: Dishonesty\n    bool harm          // Element 3: Harm\n}\n</code></pre>"},{"location":"language/comments/#issue-3-complex-logic-without-explanation","title":"Issue 3: Complex Logic Without Explanation","text":"<pre><code>// Problem: Complex logic without explanation\nmatch {\n    case a &amp;&amp; (b || c) &amp;&amp; d := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>Solution: Add explanatory comments:</p> <pre><code>// Cheating requires: deception + (fraudulent OR dishonest) + harm\nmatch {\n    case deception &amp;&amp; (fraudulent || dishonest) &amp;&amp; harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"language/comments/#next-steps","title":"Next Steps","text":"<ul> <li>Syntax Reference - Complete syntax guide</li> <li>Type System - Understanding Yuho's type system</li> <li>Structs - Working with data structures</li> <li>Match-Case - Pattern matching patterns</li> </ul>"},{"location":"language/functions/","title":"Functions","text":"<p>Functions in Yuho provide a way to encapsulate legal logic and create reusable code patterns.</p>"},{"location":"language/functions/#overview","title":"Overview","text":"<p>Functions in Yuho are:</p> <ul> <li>Pure - No side effects, same input always produces same output</li> <li>Type-Safe - All parameters and return types are explicit</li> <li>Immutable - Cannot modify external state</li> <li>Legal-Focused - Designed for legal reasoning patterns</li> </ul>"},{"location":"language/functions/#basic-syntax","title":"Basic Syntax","text":"<pre><code>returnType func functionName(parameterType parameterName) {\n    // function body\n    := returnExpression\n}\n</code></pre>"},{"location":"language/functions/#example","title":"Example","text":"<pre><code>int func add(int a, int b) {\n    := a + b\n}\n\nint result := add(5, 3);  // result is 8\n</code></pre>"},{"location":"language/functions/#function-parameters","title":"Function Parameters","text":""},{"location":"language/functions/#single-parameter","title":"Single Parameter","text":"<pre><code>bool func isAdult(int age) {\n    match age {\n        case 18 := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n\nbool adult := isAdult(25);  // adult is TRUE\n</code></pre>"},{"location":"language/functions/#multiple-parameters","title":"Multiple Parameters","text":"<pre><code>string func formatName(string firstName, string lastName) {\n    := firstName + \" \" + lastName\n}\n\nstring fullName := formatName(\"John\", \"Doe\");  // fullName is \"John Doe\"\n</code></pre>"},{"location":"language/functions/#complex-parameters","title":"Complex Parameters","text":"<pre><code>struct Person {\n    string name,\n    int age,\n    bool isMinor\n}\n\nbool func canVote(Person person) {\n    match {\n        case person.age &gt;= 18 := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n\nPerson voter := {\n    name := \"Alice\",\n    age := 25,\n    isMinor := FALSE\n};\n\nbool eligible := canVote(voter);  // eligible is TRUE\n</code></pre>"},{"location":"language/functions/#return-types","title":"Return Types","text":""},{"location":"language/functions/#simple-return-types","title":"Simple Return Types","text":"<pre><code>// Boolean return\nbool func isGuilty(bool deception, bool dishonest, bool harm) {\n    match {\n        case deception &amp;&amp; dishonest &amp;&amp; harm := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n\n// String return\nstring func getOffenseType(string offense) {\n    match offense {\n        case \"theft\" := consequence \"property crime\";\n        case \"assault\" := consequence \"violent crime\";\n        case _ := consequence \"other offense\";\n    }\n}\n\n// Integer return\nint func calculateSentence(int baseSentence, bool isRepeatOffender) {\n    match {\n        case isRepeatOffender := consequence baseSentence * 2;\n        case _ := consequence baseSentence;\n    }\n}\n</code></pre>"},{"location":"language/functions/#complex-return-types","title":"Complex Return Types","text":"<pre><code>struct Sentence {\n    string type,\n    int duration,\n    money fine\n}\n\nSentence func determineSentence(string offense, int age) {\n    match offense {\n        case \"theft\" := consequence {\n            type := \"imprisonment\",\n            duration := 2,\n            fine := $1000.00\n        };\n        case \"assault\" := consequence {\n            type := \"imprisonment\",\n            duration := 5,\n            fine := $2000.00\n        };\n        case _ := consequence {\n            type := \"unknown\",\n            duration := 0,\n            fine := $0.00\n        };\n    }\n}\n\nSentence sentence := determineSentence(\"theft\", 25);\n</code></pre>"},{"location":"language/functions/#legal-examples","title":"Legal Examples","text":""},{"location":"language/functions/#cheating-offense-check","title":"Cheating Offense Check","text":"<pre><code>struct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\nbool func isCheating(Cheating case) {\n    match {\n        case case.deception &amp;&amp; case.dishonest &amp;&amp; case.harm := \n            consequence TRUE;\n        case _ := \n            consequence FALSE;\n    }\n}\n\nCheating case1 := {\n    deception := TRUE,\n    dishonest := TRUE,\n    harm := TRUE\n};\n\nbool guilty := isCheating(case1);  // guilty is TRUE\n</code></pre>"},{"location":"language/functions/#theft-offense-check","title":"Theft Offense Check","text":"<pre><code>struct Theft {\n    bool dishonestIntention,\n    bool movableProperty,\n    bool withoutConsent,\n    bool movedProperty\n}\n\nbool func isTheft(Theft case) {\n    match {\n        case case.dishonestIntention &amp;&amp; case.movableProperty &amp;&amp; \n             case.withoutConsent &amp;&amp; case.movedProperty :=\n            consequence TRUE;\n        case _ :=\n            consequence FALSE;\n    }\n}\n\nTheft case1 := {\n    dishonestIntention := TRUE,\n    movableProperty := TRUE,\n    withoutConsent := TRUE,\n    movedProperty := TRUE\n};\n\nbool guilty := isTheft(case1);  // guilty is TRUE\n</code></pre>"},{"location":"language/functions/#age-based-sentencing","title":"Age-Based Sentencing","text":"<pre><code>string func determineCourt(int age) {\n    match {\n        case age &lt; 18 := consequence \"juvenile court\";\n        case age &gt;= 18 := consequence \"adult court\";\n        case _ := consequence \"unknown court\";\n    }\n}\n\nstring court := determineCourt(25);  // court is \"adult court\"\n</code></pre>"},{"location":"language/functions/#offense-classification","title":"Offense Classification","text":"<pre><code>string func classifyOffense(string offense) {\n    match offense {\n        case \"theft\" := consequence \"property crime\";\n        case \"assault\" := consequence \"violent crime\";\n        case \"fraud\" := consequence \"white-collar crime\";\n        case _ := consequence \"other offense\";\n    }\n}\n\nstring classification := classifyOffense(\"theft\");  // classification is \"property crime\"\n</code></pre>"},{"location":"language/functions/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"language/functions/#pattern-1-legal-element-validation","title":"Pattern 1: Legal Element Validation","text":"<pre><code>struct LegalElements {\n    bool element1,\n    bool element2,\n    bool element3\n}\n\nbool func validateElements(LegalElements elements) {\n    match {\n        case elements.element1 &amp;&amp; elements.element2 &amp;&amp; elements.element3 :=\n            consequence TRUE;\n        case _ :=\n            consequence FALSE;\n    }\n}\n</code></pre>"},{"location":"language/functions/#pattern-2-conditional-logic","title":"Pattern 2: Conditional Logic","text":"<pre><code>string func determinePunishment(string offense, int age, bool isRepeatOffender) {\n    match {\n        case offense == \"theft\" &amp;&amp; age &lt; 18 := consequence \"juvenile probation\";\n        case offense == \"theft\" &amp;&amp; isRepeatOffender := consequence \"2 years imprisonment\";\n        case offense == \"theft\" := consequence \"1 year imprisonment\";\n        case offense == \"assault\" &amp;&amp; age &lt; 18 := consequence \"juvenile detention\";\n        case offense == \"assault\" := consequence \"5 years imprisonment\";\n        case _ := consequence \"unknown punishment\";\n    }\n}\n</code></pre>"},{"location":"language/functions/#pattern-3-hierarchical-decisions","title":"Pattern 3: Hierarchical Decisions","text":"<pre><code>string func determineCourt(int age, string offense) {\n    match {\n        case age &lt; 18 := consequence \"juvenile court\";\n        case age &gt;= 18 &amp;&amp; offense == \"theft\" := consequence \"criminal court\";\n        case age &gt;= 18 &amp;&amp; offense == \"assault\" := consequence \"criminal court\";\n        case _ := consequence \"unknown court\";\n    }\n}\n</code></pre>"},{"location":"language/functions/#function-composition","title":"Function Composition","text":""},{"location":"language/functions/#chaining-functions","title":"Chaining Functions","text":"<pre><code>bool func isEligible(int age) {\n    match age {\n        case 18 := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n\nstring func getStatus(bool eligible) {\n    match eligible {\n        case TRUE := consequence \"eligible\";\n        case FALSE := consequence \"not eligible\";\n    }\n}\n\nstring status := getStatus(isEligible(25));  // status is \"eligible\"\n</code></pre>"},{"location":"language/functions/#nested-function-calls","title":"Nested Function Calls","text":"<pre><code>int func add(int a, int b) {\n    := a + b\n}\n\nint func multiply(int a, int b) {\n    := a * b\n}\n\nint result := multiply(add(2, 3), add(4, 1));  // result is 25\n</code></pre>"},{"location":"language/functions/#error-handling","title":"Error Handling","text":""},{"location":"language/functions/#validation-functions","title":"Validation Functions","text":"<pre><code>bool func isValidAge(int age) {\n    match {\n        case age &gt;= 0 &amp;&amp; age &lt;= 150 := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n\nbool func isValidName(string name) {\n    match {\n        case name != \"\" := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n</code></pre>"},{"location":"language/functions/#error-return-values","title":"Error Return Values","text":"<pre><code>string func processCase(string caseNumber, int age) {\n    match {\n        case caseNumber == \"\" := consequence \"error: missing case number\";\n        case age &lt; 0 := consequence \"error: invalid age\";\n        case age &lt; 18 := consequence \"juvenile case\";\n        case age &gt;= 18 := consequence \"adult case\";\n        case _ := consequence \"error: unknown age\";\n    }\n}\n</code></pre>"},{"location":"language/functions/#best-practices","title":"Best Practices","text":""},{"location":"language/functions/#1-use-descriptive-names","title":"1. Use Descriptive Names","text":"<pre><code>// Good: Clear function name\nbool func isCheating(Cheating case) {\n    // function body\n}\n\n// Avoid: Unclear function name\nbool func check(Cheating case) {\n    // function body\n}\n</code></pre>"},{"location":"language/functions/#2-use-appropriate-types","title":"2. Use Appropriate Types","text":"<pre><code>// Good: Legal-specific types\nbool func isEligible(Person person) {\n    match person.age {\n        case 18 := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n\n// Avoid: Generic types\nbool func isEligible(string name, int age) {\n    match age {\n        case 18 := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n</code></pre>"},{"location":"language/functions/#3-document-legal-context","title":"3. Document Legal Context","text":"<pre><code>// Good: Include legal source\n// Section 415 - Cheating\nbool func isCheating(Cheating case) {\n    match {\n        case case.deception &amp;&amp; case.dishonest &amp;&amp; case.harm :=\n            consequence TRUE;\n        case _ :=\n            consequence FALSE;\n    }\n}\n</code></pre>"},{"location":"language/functions/#4-use-match-case-for-logic","title":"4. Use Match-Case for Logic","text":"<pre><code>// Good: Use match-case for conditional logic\nstring func determineCourt(int age) {\n    match {\n        case age &lt; 18 := consequence \"juvenile court\";\n        case age &gt;= 18 := consequence \"adult court\";\n        case _ := consequence \"unknown court\";\n    }\n}\n\n// Avoid: Complex nested conditions\nstring func determineCourt(int age) {\n    // Complex nested logic would be harder to read\n}\n</code></pre>"},{"location":"language/functions/#common-patterns","title":"Common Patterns","text":""},{"location":"language/functions/#pattern-1-validation-functions","title":"Pattern 1: Validation Functions","text":"<pre><code>bool func validateInput(string input) {\n    match {\n        case input != \"\" := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n</code></pre>"},{"location":"language/functions/#pattern-2-classification-functions","title":"Pattern 2: Classification Functions","text":"<pre><code>string func classifyOffense(string offense) {\n    match offense {\n        case \"theft\" := consequence \"property crime\";\n        case \"assault\" := consequence \"violent crime\";\n        case _ := consequence \"other offense\";\n    }\n}\n</code></pre>"},{"location":"language/functions/#pattern-3-decision-functions","title":"Pattern 3: Decision Functions","text":"<pre><code>string func makeDecision(bool condition1, bool condition2) {\n    match {\n        case condition1 &amp;&amp; condition2 := consequence \"decision A\";\n        case condition1 := consequence \"decision B\";\n        case condition2 := consequence \"decision C\";\n        case _ := consequence \"decision D\";\n    }\n}\n</code></pre>"},{"location":"language/functions/#troubleshooting","title":"Troubleshooting","text":""},{"location":"language/functions/#common-errors","title":"Common Errors","text":""},{"location":"language/functions/#error-1-missing-return-expression","title":"Error 1: Missing Return Expression","text":"<pre><code>// Error: Missing return expression\nint func add(int a, int b) {\n    // Missing: := a + b\n}\n</code></pre> <p>Solution: Always include return expression:</p> <pre><code>int func add(int a, int b) {\n    := a + b\n}\n</code></pre>"},{"location":"language/functions/#error-2-type-mismatch","title":"Error 2: Type Mismatch","text":"<pre><code>// Error: string cannot be int\nint func getAge(string name) {\n    := \"25\"  // Error: string cannot be int\n}\n</code></pre> <p>Solution: Use correct types:</p> <pre><code>int func getAge(string name) {\n    := 25  // Correct: int value\n}\n</code></pre>"},{"location":"language/functions/#error-3-missing-parameters","title":"Error 3: Missing Parameters","text":"<pre><code>// Error: Missing parameter\nint func add(int a) {\n    := a + b  // Error: b is not defined\n}\n</code></pre> <p>Solution: Include all required parameters:</p> <pre><code>int func add(int a, int b) {\n    := a + b\n}\n</code></pre>"},{"location":"language/functions/#performance-considerations","title":"Performance Considerations","text":""},{"location":"language/functions/#simple-functions","title":"Simple Functions","text":"<pre><code>// Good: Simple, fast function\nbool func isTrue(bool value) {\n    match value {\n        case TRUE := consequence TRUE;\n        case FALSE := consequence FALSE;\n    }\n}\n</code></pre>"},{"location":"language/functions/#complex-functions","title":"Complex Functions","text":"<pre><code>// Good: Break complex logic into smaller functions\nbool func isCheating(Cheating case) {\n    match {\n        case case.deception &amp;&amp; case.dishonest &amp;&amp; case.harm :=\n            consequence TRUE;\n        case _ :=\n            consequence FALSE;\n    }\n}\n</code></pre>"},{"location":"language/functions/#next-steps","title":"Next Steps","text":"<ul> <li>Match-Case - Using match-case in functions</li> <li>Structs - Working with structs in functions</li> <li>Type System - Type-safe function parameters</li> <li>Syntax Reference - Complete syntax guide</li> </ul>"},{"location":"language/match-case/","title":"Match-Case","text":"<p>Match-case is Yuho's primary control structure for pattern matching and conditional logic.</p>"},{"location":"language/match-case/#overview","title":"Overview","text":"<p>Match-case in Yuho provides:</p> <ul> <li>Pattern Matching - Match values against patterns</li> <li>Exhaustive Coverage - Must handle all possible cases</li> <li>Legal Logic - Designed for legal reasoning patterns</li> <li>Type Safety - Compile-time pattern validation</li> </ul>"},{"location":"language/match-case/#basic-syntax","title":"Basic Syntax","text":"<pre><code>match {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    case _ := consequence default;\n}\n</code></pre>"},{"location":"language/match-case/#with-expression","title":"With Expression","text":"<pre><code>match expression {\n    case value1 := consequence result1;\n    case value2 := consequence result2;\n    case _ := consequence default;\n}\n</code></pre>"},{"location":"language/match-case/#simple-examples","title":"Simple Examples","text":""},{"location":"language/match-case/#boolean-matching","title":"Boolean Matching","text":"<pre><code>bool isGuilty := TRUE;\n\nmatch isGuilty {\n    case TRUE := consequence \"guilty\";\n    case FALSE := consequence \"not guilty\";\n    case _ := consequence \"unknown\";\n}\n</code></pre>"},{"location":"language/match-case/#string-matching","title":"String Matching","text":"<pre><code>string offense := \"theft\";\n\nmatch offense {\n    case \"theft\" := consequence \"property crime\";\n    case \"assault\" := consequence \"violent crime\";\n    case \"fraud\" := consequence \"white-collar crime\";\n    case _ := consequence \"other offense\";\n}\n</code></pre>"},{"location":"language/match-case/#integer-matching","title":"Integer Matching","text":"<pre><code>int age := 25;\n\nmatch age {\n    case 18 := consequence \"just became adult\";\n    case 21 := consequence \"legal drinking age\";\n    case 65 := consequence \"retirement age\";\n    case _ := consequence \"other age\";\n}\n</code></pre>"},{"location":"language/match-case/#legal-examples","title":"Legal Examples","text":""},{"location":"language/match-case/#cheating-offense","title":"Cheating Offense","text":"<pre><code>struct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\nCheating case1 := {\n    deception := TRUE,\n    dishonest := TRUE,\n    harm := TRUE\n};\n\nmatch {\n    case case1.deception &amp;&amp; case1.dishonest &amp;&amp; case1.harm := \n        consequence \"guilty of cheating\";\n    case _ := \n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"language/match-case/#theft-offense","title":"Theft Offense","text":"<pre><code>struct Theft {\n    bool dishonestIntention,\n    bool movableProperty,\n    bool withoutConsent,\n    bool movedProperty\n}\n\nTheft case1 := {\n    dishonestIntention := TRUE,\n    movableProperty := TRUE,\n    withoutConsent := TRUE,\n    movedProperty := TRUE\n};\n\nmatch {\n    case case1.dishonestIntention &amp;&amp; case1.movableProperty &amp;&amp; \n         case1.withoutConsent &amp;&amp; case1.movedProperty :=\n        consequence \"guilty of theft\";\n    case _ :=\n        consequence \"not guilty of theft\";\n}\n</code></pre>"},{"location":"language/match-case/#age-based-sentencing","title":"Age-Based Sentencing","text":"<pre><code>int age := 25;\nbool isFirstOffense := TRUE;\n\nmatch {\n    case age &lt; 18 := consequence \"juvenile court\";\n    case age &gt;= 18 &amp;&amp; isFirstOffense := consequence \"probation\";\n    case age &gt;= 18 &amp;&amp; not isFirstOffense := consequence \"prison\";\n    case _ := consequence \"unknown\";\n}\n</code></pre>"},{"location":"language/match-case/#complex-patterns","title":"Complex Patterns","text":""},{"location":"language/match-case/#pattern-1-conjunctive-requirements","title":"Pattern 1: Conjunctive Requirements","text":"<p>When ALL elements must be present:</p> <pre><code>match {\n    case element1 &amp;&amp; element2 &amp;&amp; element3 := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>Example: Theft requires ALL of: dishonest intention, movable property, without consent, movement.</p> <pre><code>match {\n    case dishonestIntention &amp;&amp; movableProperty &amp;&amp; \n         withoutConsent &amp;&amp; movedProperty :=\n        consequence \"guilty of theft\";\n    case _ :=\n        consequence \"not guilty of theft\";\n}\n</code></pre>"},{"location":"language/match-case/#pattern-2-disjunctive-requirements","title":"Pattern 2: Disjunctive Requirements","text":"<p>When ANY element is sufficient:</p> <pre><code>match {\n    case element1 || element2 || element3 := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>Example: Cheating can involve delivery of property OR consent to retain OR induced action/omission.</p> <pre><code>match {\n    case inducedDeliveryOfProperty || inducedConsentToRetain || \n         inducedActionOrOmission :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"language/match-case/#pattern-3-nested-conditions","title":"Pattern 3: Nested Conditions","text":"<p>Complex combinations:</p> <pre><code>match {\n    case baseElement &amp;&amp; (option1 || option2 || option3) &amp;&amp; finalElement :=\n        consequence \"guilty\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre> <p>Example: Cheating = deception + (fraudulent OR dishonest) + (one of three inducement types) + harm.</p> <pre><code>match {\n    case deception &amp;&amp; (fraudulent || dishonest) &amp;&amp; \n         (inducedDeliveryOfProperty || inducedConsentToRetain || \n          inducedActionOrOmission) &amp;&amp; causesDamageOrHarm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"language/match-case/#pattern-4-multiple-consequences","title":"Pattern 4: Multiple Consequences","text":"<p>Different outcomes based on conditions:</p> <pre><code>match {\n    case severeCondition := consequence \"severe punishment\";\n    case moderateCondition := consequence \"moderate punishment\";\n    case minorCondition := consequence \"minor punishment\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>Example: Sentencing based on offense severity.</p> <pre><code>match {\n    case violentOffense &amp;&amp; repeatOffender := consequence \"life imprisonment\";\n    case violentOffense := consequence \"10 years imprisonment\";\n    case propertyOffense := consequence \"2 years imprisonment\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/match-case/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"language/match-case/#pattern-5-hierarchical-conditions","title":"Pattern 5: Hierarchical Conditions","text":"<pre><code>match {\n    case isMinor &amp;&amp; violentOffense := consequence \"juvenile detention\";\n    case isMinor := consequence \"juvenile probation\";\n    case violentOffense := consequence \"prison\";\n    case _ := consequence \"probation\";\n}\n</code></pre>"},{"location":"language/match-case/#pattern-6-threshold-conditions","title":"Pattern 6: Threshold Conditions","text":"<pre><code>int damageAmount := 5000;\n\nmatch {\n    case damageAmount &gt;= 10000 := consequence \"felony\";\n    case damageAmount &gt;= 1000 := consequence \"misdemeanor\";\n    case damageAmount &gt; 0 := consequence \"infraction\";\n    case _ := consequence \"no offense\";\n}\n</code></pre>"},{"location":"language/match-case/#pattern-7-temporal-conditions","title":"Pattern 7: Temporal Conditions","text":"<pre><code>date offenseDate := 01-01-2024;\ndate currentDate := 15-12-2024;\nduration timeSinceOffense := currentDate - offenseDate;\n\nmatch {\n    case timeSinceOffense &lt; 30 days := consequence \"recent offense\";\n    case timeSinceOffense &lt; 1 year := consequence \"recent offense\";\n    case timeSinceOffense &lt; 5 years := consequence \"old offense\";\n    case _ := consequence \"very old offense\";\n}\n</code></pre>"},{"location":"language/match-case/#working-with-structs","title":"Working with Structs","text":""},{"location":"language/match-case/#struct-field-matching","title":"Struct Field Matching","text":"<pre><code>struct Person {\n    string name,\n    int age,\n    bool isMinor\n}\n\nPerson person := {\n    name := \"Alice\",\n    age := 25,\n    isMinor := FALSE\n};\n\nmatch person.isMinor {\n    case TRUE := consequence \"juvenile court\";\n    case FALSE := consequence \"adult court\";\n    case _ := consequence \"unknown\";\n}\n</code></pre>"},{"location":"language/match-case/#multiple-struct-fields","title":"Multiple Struct Fields","text":"<pre><code>match {\n    case person.isMinor &amp;&amp; person.age &lt; 16 := consequence \"child court\";\n    case person.isMinor := consequence \"juvenile court\";\n    case person.age &gt;= 18 := consequence \"adult court\";\n    case _ := consequence \"unknown\";\n}\n</code></pre>"},{"location":"language/match-case/#struct-type-matching","title":"Struct Type Matching","text":"<pre><code>struct Offense {\n    string name,\n    money penalty\n}\n\nOffense offense := {\n    name := \"theft\",\n    penalty := $1000.00\n};\n\nmatch offense.name {\n    case \"theft\" := consequence \"property crime\";\n    case \"assault\" := consequence \"violent crime\";\n    case \"fraud\" := consequence \"white-collar crime\";\n    case _ := consequence \"other offense\";\n}\n</code></pre>"},{"location":"language/match-case/#function-integration","title":"Function Integration","text":""},{"location":"language/match-case/#match-case-in-functions","title":"Match-Case in Functions","text":"<pre><code>string func determineCourt(Person person) {\n    match {\n        case person.isMinor := consequence \"juvenile court\";\n        case person.age &gt;= 18 := consequence \"adult court\";\n        case _ := consequence \"unknown court\";\n    }\n}\n\nstring court := determineCourt(person);\n</code></pre>"},{"location":"language/match-case/#match-case-as-return-value","title":"Match-Case as Return Value","text":"<pre><code>bool func isEligible(Person person) {\n    match {\n        case person.age &gt;= 18 := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n\nbool eligible := isEligible(person);\n</code></pre>"},{"location":"language/match-case/#complex-function-logic","title":"Complex Function Logic","text":"<pre><code>string func determineSentence(Offense offense, Person person) {\n    match {\n        case offense.name == \"theft\" &amp;&amp; person.isMinor := \n            consequence \"juvenile probation\";\n        case offense.name == \"theft\" := \n            consequence \"2 years imprisonment\";\n        case offense.name == \"assault\" &amp;&amp; person.isMinor := \n            consequence \"juvenile detention\";\n        case offense.name == \"assault\" := \n            consequence \"5 years imprisonment\";\n        case _ := \n            consequence \"unknown sentence\";\n    }\n}\n\nstring sentence := determineSentence(offense, person);\n</code></pre>"},{"location":"language/match-case/#error-handling","title":"Error Handling","text":""},{"location":"language/match-case/#default-cases","title":"Default Cases","text":"<p>Always include a default case:</p> <pre><code>match {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    // Always include default case\n    case _ := consequence default;\n}\n</code></pre>"},{"location":"language/match-case/#exhaustive-coverage","title":"Exhaustive Coverage","text":"<p>Ensure all possible cases are covered:</p> <pre><code>bool isGuilty := TRUE;\n\nmatch isGuilty {\n    case TRUE := consequence \"guilty\";\n    case FALSE := consequence \"not guilty\";\n    // No default case needed - all boolean values covered\n}\n</code></pre>"},{"location":"language/match-case/#error-cases","title":"Error Cases","text":"<pre><code>match {\n    case validCondition := consequence \"success\";\n    case invalidCondition := consequence \"error\";\n    case _ := consequence \"unknown error\";\n}\n</code></pre>"},{"location":"language/match-case/#best-practices","title":"Best Practices","text":""},{"location":"language/match-case/#1-always-include-default-cases","title":"1. Always Include Default Cases","text":"<pre><code>match {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    // Always include default case\n    case _ := consequence default;\n}\n</code></pre>"},{"location":"language/match-case/#2-use-clear-conditions","title":"2. Use Clear Conditions","text":"<pre><code>// Good: Clear conditions\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; harm := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n\n// Avoid: Unclear conditions\nmatch {\n    case a &amp;&amp; b &amp;&amp; c := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/match-case/#3-group-related-cases","title":"3. Group Related Cases","text":"<pre><code>match {\n    case violentOffense := consequence \"severe punishment\";\n    case propertyOffense := consequence \"moderate punishment\";\n    case minorOffense := consequence \"light punishment\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/match-case/#4-use-comments-for-complex-logic","title":"4. Use Comments for Complex Logic","text":"<pre><code>match {\n    // Cheating requires: deception + (fraudulent OR dishonest) + harm\n    case deception &amp;&amp; (fraudulent || dishonest) &amp;&amp; harm := \n        consequence \"guilty of cheating\";\n    case _ := \n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"language/match-case/#common-patterns","title":"Common Patterns","text":""},{"location":"language/match-case/#pattern-1-legal-elements","title":"Pattern 1: Legal Elements","text":"<pre><code>match {\n    case actusReus &amp;&amp; mensRea := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/match-case/#pattern-2-age-based-logic","title":"Pattern 2: Age-Based Logic","text":"<pre><code>match {\n    case age &lt; 18 := consequence \"juvenile\";\n    case age &gt;= 18 := consequence \"adult\";\n    case _ := consequence \"unknown age\";\n}\n</code></pre>"},{"location":"language/match-case/#pattern-3-offense-severity","title":"Pattern 3: Offense Severity","text":"<pre><code>match {\n    case violentOffense := consequence \"severe punishment\";\n    case propertyOffense := consequence \"moderate punishment\";\n    case minorOffense := consequence \"light punishment\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/match-case/#pattern-4-conditional-requirements","title":"Pattern 4: Conditional Requirements","text":"<pre><code>match {\n    case baseCondition &amp;&amp; (option1 || option2) &amp;&amp; finalCondition :=\n        consequence \"guilty\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/match-case/#troubleshooting","title":"Troubleshooting","text":""},{"location":"language/match-case/#common-errors","title":"Common Errors","text":""},{"location":"language/match-case/#error-1-missing-default-case","title":"Error 1: Missing Default Case","text":"<pre><code>// Error: Missing default case\nmatch {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    // Missing: case _ := consequence default;\n}\n</code></pre> <p>Solution: Always include default case:</p> <pre><code>match {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    case _ := consequence default;\n}\n</code></pre>"},{"location":"language/match-case/#error-2-type-mismatch","title":"Error 2: Type Mismatch","text":"<pre><code>int age := 25;\n\n// Error: string cannot be int\n// match age {\n//     case \"25\" := consequence \"age 25\";\n//     case _ := consequence \"other age\";\n// }\n</code></pre> <p>Solution: Use correct types:</p> <pre><code>match age {\n    case 25 := consequence \"age 25\";\n    case _ := consequence \"other age\";\n}\n</code></pre>"},{"location":"language/match-case/#error-3-incomplete-coverage","title":"Error 3: Incomplete Coverage","text":"<pre><code>bool isGuilty := TRUE;\n\n// Error: Missing FALSE case\n// match isGuilty {\n//     case TRUE := consequence \"guilty\";\n//     // Missing: case FALSE := consequence \"not guilty\";\n// }\n</code></pre> <p>Solution: Cover all possible values:</p> <pre><code>match isGuilty {\n    case TRUE := consequence \"guilty\";\n    case FALSE := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/match-case/#performance-considerations","title":"Performance Considerations","text":""},{"location":"language/match-case/#simple-conditions-first","title":"Simple Conditions First","text":"<pre><code>match {\n    case simpleCondition := consequence \"simple result\";\n    case complexCondition := consequence \"complex result\";\n    case _ := consequence \"default\";\n}\n</code></pre>"},{"location":"language/match-case/#avoid-redundant-conditions","title":"Avoid Redundant Conditions","text":"<pre><code>// Good: Non-overlapping conditions\nmatch {\n    case age &lt; 18 := consequence \"juvenile\";\n    case age &gt;= 18 := consequence \"adult\";\n    case _ := consequence \"unknown\";\n}\n\n// Avoid: Overlapping conditions\nmatch {\n    case age &lt; 18 := consequence \"juvenile\";\n    case age &lt; 21 := consequence \"young adult\";  // Overlaps with above\n    case age &gt;= 18 := consequence \"adult\";\n    case _ := consequence \"unknown\";\n}\n</code></pre>"},{"location":"language/match-case/#next-steps","title":"Next Steps","text":"<ul> <li>Functions - Using match-case in functions</li> <li>Structs - Pattern matching with structs</li> <li>Type System - Type-safe pattern matching</li> <li>Syntax Reference - Complete syntax guide</li> </ul>"},{"location":"language/overview/","title":"Language Overview","text":"<p>Yuho is a domain-specific language (DSL) designed specifically for representing legal statutes and reasoning patterns.</p>"},{"location":"language/overview/#design-philosophy","title":"Design Philosophy","text":"<p>Yuho is built on several core principles:</p> <ol> <li>Readability: Legal professionals should be able to read and understand Yuho code</li> <li>Immutability: All values are immutable, reflecting the fixed nature of statutes</li> <li>Type Safety: Strong typing prevents logical errors</li> <li>Completeness: Match-case patterns must cover all cases, mirroring legal completeness</li> </ol>"},{"location":"language/overview/#language-characteristics","title":"Language Characteristics","text":""},{"location":"language/overview/#strongly-statically-typed","title":"Strongly, Statically Typed","text":"<p>Every variable has a type known at compile time:</p> <pre><code>int x := 42;           // Integer\nstring s := \"hello\";    // String\nbool b := TRUE;         // Boolean\n</code></pre>"},{"location":"language/overview/#functional","title":"Functional","text":"<ul> <li>All values are immutable</li> <li>Every statement is an expression</li> <li>No side effects</li> </ul>"},{"location":"language/overview/#no-loops","title":"No Loops","text":"<p>Legal statutes don't contain loops, so Yuho doesn't either:</p> <ul> <li>No <code>for</code> loops</li> <li>No <code>while</code> loops</li> <li>No recursion (intentionally limited)</li> </ul>"},{"location":"language/overview/#pattern-matching","title":"Pattern Matching","text":"<p>Match-case is the primary control structure:</p> <pre><code>match {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    case _ := consequence defaultResult;\n}\n</code></pre>"},{"location":"language/overview/#quick-reference","title":"Quick Reference","text":""},{"location":"language/overview/#comments","title":"Comments","text":"<pre><code>// Single-line comment\n\n/*\nMulti-line\ncomment\n*/\n</code></pre>"},{"location":"language/overview/#types","title":"Types","text":"<ul> <li><code>int</code> - Integer numbers</li> <li><code>float</code> - Floating-point numbers</li> <li><code>bool</code> - TRUE or FALSE</li> <li><code>string</code> - Text in quotes</li> <li><code>percent</code> - Percentage (25%)</li> <li><code>money</code> - Currency ($100.50)</li> <li><code>date</code> - Dates (DD-MM-YYYY)</li> <li><code>duration</code> - Time periods (5 days)</li> </ul>"},{"location":"language/overview/#structs","title":"Structs","text":"<pre><code>struct StructName {\n    type field1,\n    type field2\n}\n</code></pre>"},{"location":"language/overview/#variables","title":"Variables","text":"<pre><code>type variableName := value;\n</code></pre>"},{"location":"language/overview/#match-case","title":"Match-Case","text":"<pre><code>match {\n    case condition := consequence result;\n    case _ := consequence default;\n}\n</code></pre>"},{"location":"language/overview/#file-structure","title":"File Structure","text":"<p>A typical Yuho file (<code>.yh</code>) contains:</p> <ol> <li>Comments explaining the legal context</li> <li>Struct definitions for legal concepts</li> <li>Variable declarations</li> <li>Match-case logic for conditions</li> </ol> <p>Example:</p> <pre><code>// Section 415 - Cheating\n\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool harm\n}\n\nmatch {\n    case deception &amp;&amp; harm := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/overview/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Files: snake_case (e.g., <code>criminal_law.yh</code>)</li> <li>Variables: camelCase (e.g., <code>isGuilty</code>)</li> <li>Structs: PascalCase (e.g., <code>Cheating</code>)</li> <li>Functions: camelCase (e.g., <code>checkValidity</code>)</li> </ul>"},{"location":"language/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Detailed Syntax Reference</li> <li>Type System</li> <li>Structs</li> <li>Match-Case Patterns</li> </ul> <p>For the complete original syntax specification, see SYNTAX.md in the repository root.</p>"},{"location":"language/structs/","title":"Structs","text":"<p>Structs are Yuho's primary data structure for representing legal concepts and relationships.</p>"},{"location":"language/structs/#overview","title":"Overview","text":"<p>Structs in Yuho are:</p> <ul> <li>Immutable - All fields are immutable once set</li> <li>Type-Safe - All fields have explicit types</li> <li>Legal-Focused - Designed for legal concepts</li> <li>Flexible - Can represent various data structures</li> </ul>"},{"location":"language/structs/#basic-syntax","title":"Basic Syntax","text":"<pre><code>struct StructName {\n    type field1,\n    type field2,\n    type field3\n}\n</code></pre>"},{"location":"language/structs/#example","title":"Example","text":"<pre><code>struct Person {\n    string name,\n    int age,\n    bool isMinor\n}\n</code></pre>"},{"location":"language/structs/#creating-struct-instances","title":"Creating Struct Instances","text":""},{"location":"language/structs/#basic-instantiation","title":"Basic Instantiation","text":"<pre><code>Person defendant := {\n    name := \"Alice\",\n    age := 25,\n    isMinor := FALSE\n};\n</code></pre>"},{"location":"language/structs/#accessing-fields","title":"Accessing Fields","text":"<pre><code>string defendantName := defendant.name;\nint defendantAge := defendant.age;\nbool isMinor := defendant.isMinor;\n</code></pre>"},{"location":"language/structs/#legal-examples","title":"Legal Examples","text":""},{"location":"language/structs/#criminal-offense","title":"Criminal Offense","text":"<pre><code>struct CriminalOffense {\n    string name,\n    string section,\n    money maxFine,\n    int maxSentence,\n    bool isIndictable\n}\n\nCriminalOffense theft := {\n    name := \"theft\",\n    section := \"378\",\n    maxFine := $5000.00,\n    maxSentence := 7,\n    isIndictable := TRUE\n};\n</code></pre>"},{"location":"language/structs/#case-facts","title":"Case Facts","text":"<pre><code>struct CaseFacts {\n    string caseNumber,\n    string accused,\n    date offenseDate,\n    string location,\n    bool isGuilty,\n    money penalty\n}\n\nCaseFacts case1 := {\n    caseNumber := \"CR-2024-001\",\n    accused := \"John Doe\",\n    offenseDate := 01-01-2024,\n    location := \"Singapore\",\n    isGuilty := TRUE,\n    penalty := $1000.00\n};\n</code></pre>"},{"location":"language/structs/#legal-entity","title":"Legal Entity","text":"<pre><code>struct LegalEntity {\n    string name,\n    string type,  // \"person\", \"corporation\", \"government\"\n    bool isMinor,\n    date dateOfBirth,\n    string nationality\n}\n\nLegalEntity defendant := {\n    name := \"Alice Smith\",\n    type := \"person\",\n    isMinor := FALSE,\n    dateOfBirth := 15-03-1990,\n    nationality := \"Singaporean\"\n};\n</code></pre>"},{"location":"language/structs/#nested-structs","title":"Nested Structs","text":""},{"location":"language/structs/#hierarchical-structures","title":"Hierarchical Structures","text":"<pre><code>struct Address {\n    string street,\n    string city,\n    string postalCode\n}\n\nstruct Person {\n    string name,\n    int age,\n    Address address\n}\n\nPerson person := {\n    name := \"John Doe\",\n    age := 30,\n    address := {\n        street := \"123 Main Street\",\n        city := \"Singapore\",\n        postalCode := \"123456\"\n    }\n};\n</code></pre>"},{"location":"language/structs/#accessing-nested-fields","title":"Accessing Nested Fields","text":"<pre><code>string street := person.address.street;\nstring city := person.address.city;\n</code></pre>"},{"location":"language/structs/#struct-patterns","title":"Struct Patterns","text":""},{"location":"language/structs/#pattern-1-legal-concept","title":"Pattern 1: Legal Concept","text":"<pre><code>struct LegalConcept {\n    string name,\n    string definition,\n    bool isActive,\n    date effectiveDate\n}\n\nLegalConcept concept := {\n    name := \"theft\",\n    definition := \"dishonest taking of movable property\",\n    isActive := TRUE,\n    effectiveDate := 01-01-1872\n};\n</code></pre>"},{"location":"language/structs/#pattern-2-offense-elements","title":"Pattern 2: Offense Elements","text":"<pre><code>struct OffenseElements {\n    string actusReus,  // physical element\n    string mensRea,    // mental element\n    bool isComplete,\n    string consequence\n}\n\nOffenseElements theftElements := {\n    actusReus := \"dishonest taking of movable property\",\n    mensRea := \"intention to permanently deprive\",\n    isComplete := TRUE,\n    consequence := \"guilty of theft\"\n};\n</code></pre>"},{"location":"language/structs/#pattern-3-legal-relationship","title":"Pattern 3: Legal Relationship","text":"<pre><code>struct LegalRelationship {\n    string relationshipType,\n    string party1,\n    string party2,\n    date startDate,\n    bool isActive\n}\n\nLegalRelationship marriage := {\n    relationshipType := \"marriage\",\n    party1 := \"Alice\",\n    party2 := \"Bob\",\n    startDate := 15-06-2020,\n    isActive := TRUE\n};\n</code></pre>"},{"location":"language/structs/#alternative-data-structures","title":"Alternative Data Structures","text":""},{"location":"language/structs/#array-like-structure","title":"Array-like Structure","text":"<pre><code>struct Array3 {\n    string 0,\n    string 1,\n    string 2\n}\n\nArray3 colors := {\n    0 := \"red\",\n    1 := \"green\",\n    2 := \"blue\"\n};\n\nstring firstColor := colors.0;  // \"red\"\nstring secondColor := colors.1; // \"green\"\n</code></pre>"},{"location":"language/structs/#tuple-like-structure","title":"Tuple-like Structure","text":"<pre><code>struct Tuple3 {\n    string 0,\n    int 1,\n    bool 2\n}\n\nTuple3 data := {\n    0 := \"hello\",\n    1 := 42,\n    2 := TRUE\n};\n</code></pre>"},{"location":"language/structs/#dictionary-like-structure","title":"Dictionary-like Structure","text":"<pre><code>struct Dictionary {\n    string key1,\n    string key2,\n    string key3\n}\n\nDictionary config := {\n    key1 := \"value1\",\n    key2 := \"value2\",\n    key3 := \"value3\"\n};\n</code></pre>"},{"location":"language/structs/#enum-like-structure","title":"Enum-like Structure","text":"<pre><code>struct Status {\n    pending,\n    approved,\n    rejected\n}\n\nStatus currentStatus := Status.pending;\n</code></pre>"},{"location":"language/structs/#working-with-structs","title":"Working with Structs","text":""},{"location":"language/structs/#pattern-matching","title":"Pattern Matching","text":"<pre><code>match defendant.isMinor {\n    case TRUE := consequence \"juvenile court\";\n    case FALSE := consequence \"adult court\";\n    case _ := consequence \"unknown\";\n}\n</code></pre>"},{"location":"language/structs/#conditional-logic","title":"Conditional Logic","text":"<pre><code>match {\n    case defendant.age &lt; 18 := consequence \"juvenile\";\n    case defendant.age &gt;= 18 := consequence \"adult\";\n    case _ := consequence \"unknown age\";\n}\n</code></pre>"},{"location":"language/structs/#function-parameters","title":"Function Parameters","text":"<pre><code>bool func isEligible(Person person) {\n    match {\n        case person.age &gt;= 18 := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n\nbool eligible := isEligible(defendant);\n</code></pre>"},{"location":"language/structs/#function-returns","title":"Function Returns","text":"<pre><code>Person func createPerson(string name, int age) {\n    := {\n        name := name,\n        age := age,\n        isMinor := age &lt; 18\n    }\n}\n\nPerson newPerson := createPerson(\"Alice\", 25);\n</code></pre>"},{"location":"language/structs/#struct-validation","title":"Struct Validation","text":""},{"location":"language/structs/#type-checking","title":"Type Checking","text":"<pre><code>struct ValidPerson {\n    string name,\n    int age,\n    bool isMinor\n}\n\n// Valid instantiation\nValidPerson person1 := {\n    name := \"Alice\",\n    age := 25,\n    isMinor := FALSE\n};\n\n// Invalid instantiation (would cause error)\n// ValidPerson person2 := {\n//     name := \"Bob\",\n//     age := \"25\",  // Error: string cannot be int\n//     isMinor := FALSE\n// };\n</code></pre>"},{"location":"language/structs/#field-validation","title":"Field Validation","text":"<pre><code>bool func validatePerson(Person person) {\n    match {\n        case person.name == \"\" := consequence FALSE;\n        case person.age &lt; 0 := consequence FALSE;\n        case _ := consequence TRUE;\n    }\n}\n\nbool isValid := validatePerson(defendant);\n</code></pre>"},{"location":"language/structs/#best-practices","title":"Best Practices","text":""},{"location":"language/structs/#1-use-descriptive-names","title":"1. Use Descriptive Names","text":"<pre><code>// Good: Clear legal context\nstruct CriminalOffense {\n    string name,\n    money maxFine,\n    int maxSentence\n}\n\n// Avoid: Generic names\nstruct Thing {\n    string a,\n    money b,\n    int c\n}\n</code></pre>"},{"location":"language/structs/#2-group-related-fields","title":"2. Group Related Fields","text":"<pre><code>// Good: Logical grouping\nstruct Case {\n    string caseNumber,\n    string accused,\n    date offenseDate,\n    string location,\n    bool isGuilty,\n    money penalty\n}\n\n// Avoid: Mixed concerns\nstruct Case {\n    string caseNumber,\n    string weather,\n    int randomNumber,\n    bool isGuilty\n}\n</code></pre>"},{"location":"language/structs/#3-use-appropriate-types","title":"3. Use Appropriate Types","text":"<pre><code>// Good: Legal-specific types\nstruct Offense {\n    string name,\n    money maxFine,\n    int maxSentence,\n    date effectiveDate\n}\n\n// Avoid: Generic types\nstruct Offense {\n    string name,\n    float maxFine,\n    string maxSentence,\n    string effectiveDate\n}\n</code></pre>"},{"location":"language/structs/#4-document-legal-context","title":"4. Document Legal Context","text":"<pre><code>// Good: Include legal source\n// Section 378 - Theft\nstruct Theft {\n    string accused,\n    bool dishonestIntention,\n    bool movedProperty\n}\n</code></pre>"},{"location":"language/structs/#common-patterns","title":"Common Patterns","text":""},{"location":"language/structs/#pattern-1-legal-definition","title":"Pattern 1: Legal Definition","text":"<pre><code>struct LegalDefinition {\n    string term,\n    string definition,\n    string source,\n    date effectiveDate\n}\n\nLegalDefinition theft := {\n    term := \"theft\",\n    definition := \"dishonest taking of movable property\",\n    source := \"Section 378, Penal Code\",\n    effectiveDate := 01-01-1872\n};\n</code></pre>"},{"location":"language/structs/#pattern-2-case-summary","title":"Pattern 2: Case Summary","text":"<pre><code>struct CaseSummary {\n    string caseNumber,\n    string accused,\n    string offense,\n    bool isGuilty,\n    money penalty,\n    int sentence\n}\n\nCaseSummary summary := {\n    caseNumber := \"CR-2024-001\",\n    accused := \"John Doe\",\n    offense := \"theft\",\n    isGuilty := TRUE,\n    penalty := $1000.00,\n    sentence := 6\n};\n</code></pre>"},{"location":"language/structs/#pattern-3-legal-relationship_1","title":"Pattern 3: Legal Relationship","text":"<pre><code>struct LegalRelationship {\n    string relationshipType,\n    string party1,\n    string party2,\n    date startDate,\n    bool isActive\n}\n\nLegalRelationship marriage := {\n    relationshipType := \"marriage\",\n    party1 := \"Alice\",\n    party2 := \"Bob\",\n    startDate := 15-06-2020,\n    isActive := TRUE\n};\n</code></pre>"},{"location":"language/structs/#advanced-usage","title":"Advanced Usage","text":""},{"location":"language/structs/#generic-structs","title":"Generic Structs","text":"<pre><code>struct Container {\n    string 0,\n    string 1,\n    string 2\n}\n\nContainer items := {\n    0 := \"item1\",\n    1 := \"item2\",\n    2 := \"item3\"\n};\n</code></pre>"},{"location":"language/structs/#recursive-structures","title":"Recursive Structures","text":"<pre><code>struct TreeNode {\n    string value,\n    TreeNode left,\n    TreeNode right\n}\n\nTreeNode root := {\n    value := \"root\",\n    left := pass,\n    right := pass\n};\n</code></pre>"},{"location":"language/structs/#union-types-in-structs","title":"Union Types in Structs","text":"<pre><code>struct FlexibleValue {\n    string || int || bool value\n}\n\nFlexibleValue flex1 := { value := \"hello\" };\nFlexibleValue flex2 := { value := 42 };\nFlexibleValue flex3 := { value := TRUE };\n</code></pre>"},{"location":"language/structs/#struct-limitations","title":"Struct Limitations","text":""},{"location":"language/structs/#immutability","title":"Immutability","text":"<pre><code>struct Person {\n    string name,\n    int age\n}\n\nPerson person := {\n    name := \"Alice\",\n    age := 25\n};\n\n// This would cause an error\n// person.name := \"Bob\";  // Error: cannot modify immutable field\n</code></pre>"},{"location":"language/structs/#no-dynamic-fields","title":"No Dynamic Fields","text":"<pre><code>// Structs have fixed fields\nstruct Person {\n    string name,\n    int age\n}\n\n// Cannot add fields dynamically\n// person.email := \"alice@example.com\";  // Error: field doesn't exist\n</code></pre>"},{"location":"language/structs/#troubleshooting","title":"Troubleshooting","text":""},{"location":"language/structs/#common-errors","title":"Common Errors","text":""},{"location":"language/structs/#error-1-type-mismatch","title":"Error 1: Type Mismatch","text":"<pre><code>struct Person {\n    string name,\n    int age\n}\n\n// Error: string cannot be int\n// Person person := {\n//     name := \"Alice\",\n//     age := \"25\"  // Error: string cannot be int\n// };\n</code></pre> <p>Solution: Use correct types:</p> <pre><code>Person person := {\n    name := \"Alice\",\n    age := 25  // Correct: int value\n};\n</code></pre>"},{"location":"language/structs/#error-2-missing-fields","title":"Error 2: Missing Fields","text":"<pre><code>struct Person {\n    string name,\n    int age,\n    bool isMinor\n}\n\n// Error: missing field\n// Person person := {\n//     name := \"Alice\",\n//     age := 25\n//     // Missing: isMinor\n// };\n</code></pre> <p>Solution: Include all required fields:</p> <pre><code>Person person := {\n    name := \"Alice\",\n    age := 25,\n    isMinor := FALSE\n};\n</code></pre>"},{"location":"language/structs/#error-3-extra-fields","title":"Error 3: Extra Fields","text":"<pre><code>struct Person {\n    string name,\n    int age\n}\n\n// Error: extra field\n// Person person := {\n//     name := \"Alice\",\n//     age := 25,\n//     email := \"alice@example.com\"  // Error: field doesn't exist\n// };\n</code></pre> <p>Solution: Only include defined fields:</p> <pre><code>Person person := {\n    name := \"Alice\",\n    age := 25\n};\n</code></pre>"},{"location":"language/structs/#next-steps","title":"Next Steps","text":"<ul> <li>Type System - Understanding Yuho's type system</li> <li>Match-Case - Pattern matching with structs</li> <li>Functions - Working with structs in functions</li> <li>Syntax Reference - Complete syntax guide</li> </ul>"},{"location":"language/syntax/","title":"Language Syntax","text":"<p>Complete syntax reference for the Yuho language.</p>"},{"location":"language/syntax/#overview","title":"Overview","text":"<p>Yuho is a domain-specific language designed for representing legal statutes and reasoning patterns. It features:</p> <ul> <li>Strong, static typing - All types known at compile time</li> <li>Functional paradigm - Immutable values, no side effects</li> <li>Pattern matching - Match-case as primary control structure</li> <li>No loops - Legal statutes don't contain loops</li> <li>Clean syntax - Designed for legal professionals</li> </ul>"},{"location":"language/syntax/#file-structure","title":"File Structure","text":"<p>Yuho source files use the <code>.yh</code> extension and follow this general structure:</p> <pre><code>// Comments explaining the legal context\n// Section 415 - Cheating\n\n// Import statements (optional)\nreferencing Cheating from cheating_module\n\n// Struct definitions\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool harm\n}\n\n// Variable declarations\nstring caseName := \"Example Case\"\n\n// Match-case logic\nmatch {\n    case condition := consequence result;\n    case _ := consequence default;\n}\n</code></pre>"},{"location":"language/syntax/#comments","title":"Comments","text":"<p>Yuho supports both single-line and multi-line comments:</p> <pre><code>// Single-line comment\n\n/*\nMulti-line\ncomment\n*/\n</code></pre>"},{"location":"language/syntax/#best-practices","title":"Best Practices","text":"<ul> <li>Always include the legal source (e.g., \"Section 415 - Cheating\")</li> <li>Explain complex conditions</li> <li>Document the legal context</li> </ul> <pre><code>// Section 415 - Cheating\n// This struct represents the elements of cheating under Singapore Penal Code\n\nstruct Cheating {\n    // The person accused of cheating\n    string accused,\n    // Whether deception occurred\n    bool deception,\n    // Whether harm was caused\n    bool harm\n}\n</code></pre>"},{"location":"language/syntax/#variable-declaration","title":"Variable Declaration","text":"<p>Variables are declared with the <code>:=</code> operator and are immutable:</p> <pre><code>type variableName := value;\n</code></pre>"},{"location":"language/syntax/#examples","title":"Examples","text":"<pre><code>// Basic types\nint age := 25;\nstring name := \"John Doe\";\nbool isGuilty := TRUE;\nmoney fine := $500.00;\n\n// Complex types\nCheating case1 := {\n    accused := \"Alice\",\n    deception := TRUE,\n    harm := TRUE\n};\n</code></pre>"},{"location":"language/syntax/#union-types","title":"Union Types","text":"<p>Use <code>||</code> for variables that could be multiple types:</p> <pre><code>pass || money optionalFine := pass;\nstring || int flexibleValue := \"hello\";\n</code></pre>"},{"location":"language/syntax/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Files: <code>snake_case.yh</code> (e.g., <code>criminal_law.yh</code>)</li> <li>Variables: <code>camelCase</code> (e.g., <code>isGuilty</code>)</li> <li>Structs: <code>PascalCase</code> (e.g., <code>Cheating</code>)</li> <li>Functions: <code>camelCase</code> (e.g., <code>checkValidity</code>)</li> </ul>"},{"location":"language/syntax/#operators","title":"Operators","text":""},{"location":"language/syntax/#arithmetic-operators","title":"Arithmetic Operators","text":"<pre><code>+  // Addition\n-  // Subtraction\n*  // Multiplication\n/  // Division\n// // Integer division\n%  // Modulo\n</code></pre>"},{"location":"language/syntax/#comparison-operators","title":"Comparison Operators","text":"<pre><code>==  // Equality\n!=  // Inequality\n&gt;   // Greater than\n&lt;   // Less than\n&gt;=  // Greater than or equal\n&lt;=  // Less than or equal\n</code></pre>"},{"location":"language/syntax/#logical-operators","title":"Logical Operators","text":"<pre><code>and  // Logical AND\nor   // Logical OR\nnot  // Logical NOT\n&amp;&amp;   // Alternative AND\n||   // Alternative OR\n!    // Alternative NOT\n</code></pre>"},{"location":"language/syntax/#control-structures","title":"Control Structures","text":""},{"location":"language/syntax/#match-case","title":"Match-Case","text":"<p>The primary control structure in Yuho:</p> <pre><code>match {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    case _ := consequence default;\n}\n</code></pre>"},{"location":"language/syntax/#with-expression","title":"With Expression","text":"<pre><code>match expression {\n    case value1 := consequence result1;\n    case value2 := consequence result2;\n    case _ := consequence default;\n}\n</code></pre>"},{"location":"language/syntax/#examples_1","title":"Examples","text":"<pre><code>// Simple match\nmatch {\n    case isGuilty := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n\n// Match with expression\nmatch age {\n    case 18 := consequence \"adult\";\n    case 17 := consequence \"minor\";\n    case _ := consequence \"other\";\n}\n\n// Complex conditions\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; harm := \n        consequence \"guilty of cheating\";\n    case _ := \n        consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/syntax/#functions","title":"Functions","text":"<p>Functions are declared with the <code>func</code> keyword:</p> <pre><code>returnType func functionName(parameterType parameterName) {\n    // function body\n    := returnExpression\n}\n</code></pre>"},{"location":"language/syntax/#examples_2","title":"Examples","text":"<pre><code>// Simple function\nint func add(int a, int b) {\n    := a + b\n}\n\n// Complex function\nstring func checkGuilt(bool deception, bool dishonest, bool harm) {\n    match {\n        case deception &amp;&amp; dishonest &amp;&amp; harm := \n            consequence \"guilty\";\n        case _ := \n            consequence \"not guilty\";\n    }\n}\n</code></pre>"},{"location":"language/syntax/#scopes-and-modules","title":"Scopes and Modules","text":""},{"location":"language/syntax/#scopes","title":"Scopes","text":"<p>Create named scopes for organization:</p> <pre><code>scope LegalConcepts {\n    struct Theft {\n        string accused,\n        bool dishonestIntention,\n        bool movedProperty\n    }\n\n    bool func isTheft(Theft case) {\n        match {\n            case case.dishonestIntention &amp;&amp; case.movedProperty := \n                consequence TRUE;\n            case _ := \n                consequence FALSE;\n        }\n    }\n}\n</code></pre>"},{"location":"language/syntax/#imports","title":"Imports","text":"<p>Import from other files:</p> <pre><code>// Import everything from a module\nreferencing theft_module\n\n// Import specific scope\nreferencing Theft from theft_module\n\n// Use imported elements\nTheft case1 := {\n    accused := \"Alice\",\n    dishonestIntention := TRUE,\n    movedProperty := TRUE\n}\n</code></pre>"},{"location":"language/syntax/#type-system","title":"Type System","text":""},{"location":"language/syntax/#primitive-types","title":"Primitive Types","text":"<pre><code>int      // Integer numbers\nfloat    // Floating-point numbers\nbool     // TRUE or FALSE\nstring   // Text in quotes\npercent  // Percentage (25%)\nmoney    // Currency ($100.50)\ndate     // Dates (DD-MM-YYYY)\nduration // Time periods (5 days)\n</code></pre>"},{"location":"language/syntax/#custom-types","title":"Custom Types","text":"<p>Define custom types using structs:</p> <pre><code>struct LegalConcept {\n    string name,\n    bool isValid,\n    money penalty\n}\n</code></pre>"},{"location":"language/syntax/#error-handling","title":"Error Handling","text":"<p>Yuho uses pattern matching for error handling:</p> <pre><code>match {\n    case validCondition := consequence \"success\";\n    case invalidCondition := consequence \"error\";\n    case _ := consequence \"unknown error\";\n}\n</code></pre>"},{"location":"language/syntax/#best-practices_1","title":"Best Practices","text":""},{"location":"language/syntax/#1-always-include-default-cases","title":"1. Always Include Default Cases","text":"<pre><code>match {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    // Always include default case\n    case _ := consequence default;\n}\n</code></pre>"},{"location":"language/syntax/#2-use-descriptive-names","title":"2. Use Descriptive Names","text":"<pre><code>// Good\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool harm\n}\n\n// Avoid\nstruct C {\n    string a,\n    bool d,\n    bool h\n}\n</code></pre>"},{"location":"language/syntax/#3-comment-legal-context","title":"3. Comment Legal Context","text":"<pre><code>// Section 415 - Cheating\n// Whoever, by deceiving any person, fraudulently or dishonestly...\nstruct Cheating {\n    // The person accused of the offense\n    string accused,\n    // Whether deception occurred\n    bool deception,\n    // Whether harm was caused\n    bool harm\n}\n</code></pre>"},{"location":"language/syntax/#4-complete-case-coverage","title":"4. Complete Case Coverage","text":"<pre><code>match {\n    case severeCondition := consequence \"severe punishment\";\n    case moderateCondition := consequence \"moderate punishment\";\n    case minorCondition := consequence \"minor punishment\";\n    // Always include default\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/syntax/#common-patterns","title":"Common Patterns","text":""},{"location":"language/syntax/#pattern-1-conjunctive-requirements","title":"Pattern 1: Conjunctive Requirements","text":"<p>When ALL elements must be present:</p> <pre><code>match {\n    case element1 &amp;&amp; element2 &amp;&amp; element3 := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/syntax/#pattern-2-disjunctive-requirements","title":"Pattern 2: Disjunctive Requirements","text":"<p>When ANY element is sufficient:</p> <pre><code>match {\n    case element1 || element2 || element3 := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/syntax/#pattern-3-nested-conditions","title":"Pattern 3: Nested Conditions","text":"<p>Complex combinations:</p> <pre><code>match {\n    case baseElement &amp;&amp; (option1 || option2 || option3) &amp;&amp; finalElement :=\n        consequence \"guilty\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/syntax/#syntax-validation","title":"Syntax Validation","text":"<p>Use the CLI to validate syntax:</p> <pre><code># Check syntax\nyuho check example.yh\n\n# Check with verbose output\nyuho check example.yh --verbose\n</code></pre>"},{"location":"language/syntax/#next-steps","title":"Next Steps","text":"<ul> <li>Type System - Learn about Yuho's type system</li> <li>Structs - Working with data structures</li> <li>Match-Case - Pattern matching patterns</li> <li>Functions - Function definitions and usage</li> <li>Comments - Documentation best practices</li> </ul>"},{"location":"language/types/","title":"Type System","text":"<p>Yuho's type system provides strong, static typing designed for legal reasoning.</p>"},{"location":"language/types/#overview","title":"Overview","text":"<p>Yuho features a comprehensive type system that ensures:</p> <ul> <li>Type Safety - All types are known at compile time</li> <li>Immutability - All values are immutable by default</li> <li>Legal Relevance - Types designed for legal concepts</li> <li>No Type Coercion - Strict type checking prevents errors</li> </ul>"},{"location":"language/types/#primitive-types","title":"Primitive Types","text":""},{"location":"language/types/#numeric-types","title":"Numeric Types","text":""},{"location":"language/types/#integer-int","title":"Integer (<code>int</code>)","text":"<p>Whole numbers of any precision:</p> <pre><code>int age := 25;\nint count := 1000;\nint negative := -42;\n</code></pre>"},{"location":"language/types/#float-float","title":"Float (<code>float</code>)","text":"<p>Floating-point numbers:</p> <pre><code>float percentage := 0.25;\nfloat precise := 3.14159;\nfloat negative := -2.5;\n</code></pre>"},{"location":"language/types/#percent-percent","title":"Percent (<code>percent</code>)","text":"<p>Percentage values with <code>%</code> suffix:</p> <pre><code>percent taxRate := 25%;  // Evaluates to 0.25\npercent discount := 10%; // Evaluates to 0.10\npercent penalty := 100%; // Evaluates to 1.00\n</code></pre>"},{"location":"language/types/#money-money","title":"Money (<code>money</code>)","text":"<p>Currency values with <code>$</code> prefix:</p> <pre><code>money fine := $500.00;\nmoney salary := $50,000.00;\nmoney largeAmount := $1,000,000.00;\n</code></pre>"},{"location":"language/types/#text-types","title":"Text Types","text":""},{"location":"language/types/#string-string","title":"String (<code>string</code>)","text":"<p>Text enclosed in double quotes:</p> <pre><code>string name := \"John Doe\";\nstring offense := \"theft\";\nstring description := \"A person commits theft when...\";\n</code></pre>"},{"location":"language/types/#boolean-bool","title":"Boolean (<code>bool</code>)","text":"<p>Logical values:</p> <pre><code>bool isGuilty := TRUE;\nbool isMinor := FALSE;\nbool hasPermission := TRUE;\n</code></pre>"},{"location":"language/types/#temporal-types","title":"Temporal Types","text":""},{"location":"language/types/#date-date","title":"Date (<code>date</code>)","text":"<p>Dates in DD-MM-YYYY format:</p> <pre><code>date birthDate := 15-03-1990;\ndate offenseDate := 01-01-2024;\ndate courtDate := 15-12-2024;\n</code></pre>"},{"location":"language/types/#duration-duration","title":"Duration (<code>duration</code>)","text":"<p>Time periods with day/month/year suffixes:</p> <pre><code>duration sentence := 5 years;\nduration probation := 2 years 6 months;\nduration remand := 30 days;\n</code></pre>"},{"location":"language/types/#custom-types","title":"Custom Types","text":""},{"location":"language/types/#struct-types","title":"Struct Types","text":"<p>Define custom types using structs:</p> <pre><code>struct Person {\n    string name,\n    int age,\n    bool isMinor\n}\n\nstruct Offense {\n    string name,\n    money penalty,\n    int maxSentence\n}\n</code></pre>"},{"location":"language/types/#using-custom-types","title":"Using Custom Types","text":"<pre><code>Person defendant := {\n    name := \"Alice\",\n    age := 25,\n    isMinor := FALSE\n};\n\nOffense theft := {\n    name := \"theft\",\n    penalty := $1000.00,\n    maxSentence := 7\n};\n</code></pre>"},{"location":"language/types/#union-types","title":"Union Types","text":"<p>Use <code>||</code> to specify multiple possible types:</p> <pre><code>// Variable that could be money or pass (null)\npass || money optionalFine := pass;\n\n// Variable that could be string or int\nstring || int flexibleValue := \"hello\";\n\n// Complex union type\nPerson || Offense || pass complexValue := pass;\n</code></pre>"},{"location":"language/types/#union-type-examples","title":"Union Type Examples","text":"<pre><code>// Optional penalty\npass || money penalty := pass;\n\n// Later assignment\npenalty := $500.00;\n\n// Check if value exists\nmatch penalty {\n    case pass := consequence \"no penalty\";\n    case _ := consequence \"penalty applied\";\n}\n</code></pre>"},{"location":"language/types/#type-annotations","title":"Type Annotations","text":""},{"location":"language/types/#variable-declarations","title":"Variable Declarations","text":"<pre><code>// Explicit type annotation\nint age := 25;\nstring name := \"John\";\nbool isGuilty := TRUE;\n\n// Type inference (when possible)\nage := 25;        // Inferred as int\nname := \"John\";   // Inferred as string\nisGuilty := TRUE; // Inferred as bool\n</code></pre>"},{"location":"language/types/#function-parameters","title":"Function Parameters","text":"<pre><code>bool func checkAge(int age) {\n    match age {\n        case 18 := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n\nstring func formatName(string firstName, string lastName) {\n    := firstName + \" \" + lastName\n}\n</code></pre>"},{"location":"language/types/#return-types","title":"Return Types","text":"<pre><code>// Simple return type\nint func add(int a, int b) {\n    := a + b\n}\n\n// Complex return type\nPerson func createPerson(string name, int age) {\n    := {\n        name := name,\n        age := age,\n        isMinor := age &lt; 18\n    }\n}\n</code></pre>"},{"location":"language/types/#type-checking","title":"Type Checking","text":""},{"location":"language/types/#compile-time-checking","title":"Compile-Time Checking","text":"<p>Yuho performs type checking at compile time:</p> <pre><code>int x := 42;\nstring y := \"hello\";\n\n// This would cause a type error\n// int z := x + y;  // Error: cannot add int and string\n</code></pre>"},{"location":"language/types/#type-compatibility","title":"Type Compatibility","text":"<pre><code>// Compatible types\nint a := 10;\nint b := 20;\nint sum := a + b;  // OK: both are int\n\n// Incompatible types\nint x := 10;\nstring y := \"hello\";\n// int z := x + y;  // Error: type mismatch\n</code></pre>"},{"location":"language/types/#type-conversions","title":"Type Conversions","text":""},{"location":"language/types/#explicit-conversions","title":"Explicit Conversions","text":"<pre><code>// Convert int to float\nint wholeNumber := 42;\nfloat decimalNumber := float(wholeNumber);\n\n// Convert float to int (truncates)\nfloat precise := 3.14159;\nint rounded := int(precise);  // Results in 3\n</code></pre>"},{"location":"language/types/#implicit-conversions","title":"Implicit Conversions","text":"<pre><code>// Percent to float\npercent rate := 25%;\nfloat decimalRate := rate;  // Automatically converts to 0.25\n\n// Money to float\nmoney amount := $100.00;\nfloat value := amount;  // Automatically converts to 100.0\n</code></pre>"},{"location":"language/types/#type-safety-features","title":"Type Safety Features","text":""},{"location":"language/types/#no-type-coercion","title":"No Type Coercion","text":"<p>Yuho prevents automatic type conversions:</p> <pre><code>int x := 42;\nstring y := \"42\";\n\n// These are different types\n// bool same := x == y;  // Error: cannot compare int and string\n</code></pre>"},{"location":"language/types/#null-safety","title":"Null Safety","text":"<p>Use <code>pass</code> for nullable types:</p> <pre><code>// Nullable money type\npass || money optionalFine := pass;\n\n// Check for null\nmatch optionalFine {\n    case pass := consequence \"no fine\";\n    case _ := consequence \"fine applied\";\n}\n</code></pre>"},{"location":"language/types/#legal-specific-types","title":"Legal-Specific Types","text":""},{"location":"language/types/#money-type","title":"Money Type","text":"<p>The <code>money</code> type is designed for legal contexts:</p> <pre><code>money fine := $500.00;\nmoney compensation := $10,000.00;\nmoney damages := $1,000,000.00;\n\n// Money arithmetic\nmoney total := fine + compensation;\nmoney discounted := total * 0.9;  // 10% discount\n</code></pre>"},{"location":"language/types/#date-type","title":"Date Type","text":"<p>The <code>date</code> type handles legal dates:</p> <pre><code>date offenseDate := 01-01-2024;\ndate courtDate := 15-12-2024;\ndate birthDate := 15-03-1990;\n\n// Date arithmetic\nduration age := courtDate - birthDate;\nduration timeSinceOffense := courtDate - offenseDate;\n</code></pre>"},{"location":"language/types/#duration-type","title":"Duration Type","text":"<p>The <code>duration</code> type represents legal time periods:</p> <pre><code>duration sentence := 5 years;\nduration probation := 2 years 6 months;\nduration remand := 30 days;\n\n// Duration arithmetic\nduration totalTime := sentence + probation;\n</code></pre>"},{"location":"language/types/#type-patterns","title":"Type Patterns","text":""},{"location":"language/types/#pattern-1-legal-entity","title":"Pattern 1: Legal Entity","text":"<pre><code>struct LegalEntity {\n    string name,\n    string type,  // \"person\", \"corporation\", \"government\"\n    bool isMinor,\n    date dateOfBirth\n}\n</code></pre>"},{"location":"language/types/#pattern-2-offense-definition","title":"Pattern 2: Offense Definition","text":"<pre><code>struct Offense {\n    string name,\n    string section,\n    money maxFine,\n    int maxSentence,\n    bool isIndictable\n}\n</code></pre>"},{"location":"language/types/#pattern-3-case-facts","title":"Pattern 3: Case Facts","text":"<pre><code>struct CaseFacts {\n    string caseNumber,\n    date offenseDate,\n    string location,\n    bool isGuilty,\n    money penalty\n}\n</code></pre>"},{"location":"language/types/#type-validation","title":"Type Validation","text":""},{"location":"language/types/#compile-time-validation","title":"Compile-Time Validation","text":"<pre><code>// Valid types\nint age := 25;\nstring name := \"John\";\nbool isGuilty := TRUE;\n\n// Invalid types (would cause errors)\n// int invalid := \"hello\";  // Error: string cannot be int\n// bool invalid := 42;      // Error: int cannot be bool\n</code></pre>"},{"location":"language/types/#runtime-type-checking","title":"Runtime Type Checking","text":"<pre><code>// Use match-case for type checking\nmatch value {\n    case int _ := consequence \"it's an integer\";\n    case string _ := consequence \"it's a string\";\n    case bool _ := consequence \"it's a boolean\";\n    case _ := consequence \"unknown type\";\n}\n</code></pre>"},{"location":"language/types/#best-practices","title":"Best Practices","text":""},{"location":"language/types/#1-use-appropriate-types","title":"1. Use Appropriate Types","text":"<pre><code>// Good: Use money for currency\nmoney fine := $500.00;\n\n// Avoid: Use float for currency\nfloat fine := 500.00;  // Less clear, no currency context\n</code></pre>"},{"location":"language/types/#2-use-union-types-for-optional-values","title":"2. Use Union Types for Optional Values","text":"<pre><code>// Good: Optional fine\npass || money optionalFine := pass;\n\n// Avoid: Always required\nmoney fine := $0.00;  // Unclear if 0 means \"no fine\" or \"fine is 0\"\n</code></pre>"},{"location":"language/types/#3-use-descriptive-type-names","title":"3. Use Descriptive Type Names","text":"<pre><code>// Good: Clear legal context\nstruct CriminalOffense {\n    string name,\n    money penalty,\n    int maxSentence\n}\n\n// Avoid: Generic names\nstruct Thing {\n    string a,\n    money b,\n    int c\n}\n</code></pre>"},{"location":"language/types/#4-use-type-annotations-for-clarity","title":"4. Use Type Annotations for Clarity","text":"<pre><code>// Good: Clear return type\nbool func isGuilty(Offense offense) {\n    // function body\n}\n\n// Avoid: Unclear return type\nfunc check(Offense offense) {\n    // function body\n}\n</code></pre>"},{"location":"language/types/#common-type-errors","title":"Common Type Errors","text":""},{"location":"language/types/#error-1-type-mismatch","title":"Error 1: Type Mismatch","text":"<pre><code>int x := 42;\nstring y := \"hello\";\n// int z := x + y;  // Error: cannot add int and string\n</code></pre> <p>Solution: Use explicit conversion or match types:</p> <pre><code>int x := 42;\nstring y := \"hello\";\nstring z := string(x) + y;  // Convert int to string first\n</code></pre>"},{"location":"language/types/#error-2-null-access","title":"Error 2: Null Access","text":"<pre><code>pass || money optionalFine := pass;\n// money amount := optionalFine;  // Error: optionalFine might be pass\n</code></pre> <p>Solution: Use match-case to handle null:</p> <pre><code>pass || money optionalFine := pass;\nmatch optionalFine {\n    case pass := consequence \"no fine\";\n    case _ := consequence \"fine exists\";\n}\n</code></pre>"},{"location":"language/types/#error-3-type-inference-failure","title":"Error 3: Type Inference Failure","text":"<pre><code>// This might not infer the correct type\nvalue := 42;  // Could be int or float\n</code></pre> <p>Solution: Use explicit type annotation:</p> <pre><code>int value := 42;  // Explicitly int\nfloat value := 42.0;  // Explicitly float\n</code></pre>"},{"location":"language/types/#type-system-benefits","title":"Type System Benefits","text":""},{"location":"language/types/#1-compile-time-safety","title":"1. Compile-Time Safety","text":"<ul> <li>Catches type errors before runtime</li> <li>Prevents common programming mistakes</li> <li>Ensures type consistency</li> </ul>"},{"location":"language/types/#2-legal-context","title":"2. Legal Context","text":"<ul> <li>Types designed for legal concepts</li> <li>Money type for currency</li> <li>Date type for legal dates</li> <li>Duration type for sentences</li> </ul>"},{"location":"language/types/#3-immutability","title":"3. Immutability","text":"<ul> <li>All values are immutable</li> <li>Prevents accidental modifications</li> <li>Ensures data integrity</li> </ul>"},{"location":"language/types/#4-pattern-matching","title":"4. Pattern Matching","text":"<ul> <li>Type-safe pattern matching</li> <li>Exhaustive case coverage</li> <li>Clear error handling</li> </ul>"},{"location":"language/types/#next-steps","title":"Next Steps","text":"<ul> <li>Syntax Reference - Complete syntax guide</li> <li>Structs - Working with data structures</li> <li>Match-Case - Pattern matching patterns</li> <li>Functions - Function definitions and usage</li> </ul>"},{"location":"transpilers/alloy/","title":"Alloy Transpiler","text":"<p>The Alloy transpiler converts Yuho code into formal specifications for automated verification.</p>"},{"location":"transpilers/alloy/#overview","title":"Overview","text":"<p>The Alloy transpiler generates:</p> <ul> <li>Formal Specifications - Alloy language specifications</li> <li>Verification Commands - Ready-to-run Alloy code</li> <li>Type Mappings - Convert Yuho types to Alloy types</li> <li>Logical Verification - Prove correctness using Alloy Analyzer</li> </ul>"},{"location":"transpilers/alloy/#supported-features","title":"Supported Features","text":""},{"location":"transpilers/alloy/#struct-to-signature-conversion","title":"Struct to Signature Conversion","text":"<p>Yuho Code: <pre><code>struct Cheating {\n    string accused,\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>sig Cheating {\n  accused: String,\n  deception: Bool,\n  dishonest: Bool,\n  harm: Bool\n}\n</code></pre></p>"},{"location":"transpilers/alloy/#match-case-to-predicate-conversion","title":"Match-Case to Predicate Conversion","text":"<p>Yuho Code: <pre><code>match {\n    case deception &amp;&amp; dishonest &amp;&amp; harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>pred MatchCase0[x: univ] {\n  (deception = True and dishonest = True and harm = True) =&gt; {\n    // Consequence: guilty of cheating\n  }\n}\n</code></pre></p>"},{"location":"transpilers/alloy/#complete-specification-generation","title":"Complete Specification Generation","text":"<p>Yuho Code: <pre><code>// Section 415 - Cheating\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>// Generated Alloy specification from Yuho\nmodule YuhoGenerated\n\nabstract sig Bool {}\none sig True, False extends Bool {}\n\nsig Cheating {\n  accused: String,\n  deception: Bool,\n  dishonest: Bool,\n  harm: Bool\n}\n\npred MatchCase0[x: univ] {\n  (deception = True and dishonest = True and harm = True) =&gt; {\n    // Consequence: guilty of cheating\n  }\n}\n\nrun {} for 5\n</code></pre></p>"},{"location":"transpilers/alloy/#usage","title":"Usage","text":""},{"location":"transpilers/alloy/#basic-usage","title":"Basic Usage","text":"<pre><code># Generate Alloy specification\nyuho alloy example.yh -o specification.als\n\n# Generate to stdout\nyuho alloy example.yh\n</code></pre>"},{"location":"transpilers/alloy/#cli-integration","title":"CLI Integration","text":"<pre><code># Generate from legal example\nyuho alloy examples/cheating/cheating_illustration_A.yh -o cheating.als\n\n# Generate multiple specifications\nyuho alloy examples/cheating/*.yh -o cheating_specs.als\n</code></pre>"},{"location":"transpilers/alloy/#type-mapping","title":"Type Mapping","text":""},{"location":"transpilers/alloy/#yuho-to-alloy-types","title":"Yuho to Alloy Types","text":"Yuho Type Alloy Type Notes <code>int</code> <code>Int</code> Integer numbers <code>float</code> <code>Int</code> Alloy has no floats <code>bool</code> <code>Bool</code> Custom signature <code>string</code> <code>String</code> Text strings <code>percent</code> <code>Int</code> Percentage values <code>money</code> <code>Int</code> Currency amounts <code>date</code> <code>String</code> Date strings <code>duration</code> <code>String</code> Duration strings Custom struct Custom signature User-defined types"},{"location":"transpilers/alloy/#example-type-mappings","title":"Example Type Mappings","text":"<p>Yuho Code: <pre><code>struct Person {\n    string name,\n    int age,\n    bool isMinor,\n    money salary\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>sig Person {\n  name: String,\n  age: Int,\n  isMinor: Bool,\n  salary: Int\n}\n</code></pre></p>"},{"location":"transpilers/alloy/#legal-examples","title":"Legal Examples","text":""},{"location":"transpilers/alloy/#example-1-cheating-offense","title":"Example 1: Cheating Offense","text":"<p>Yuho Code: <pre><code>// Section 415 - Cheating\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\nCheating case1 := {\n    accused := \"Alice\",\n    deception := TRUE,\n    dishonest := TRUE,\n    harm := TRUE\n};\n\nmatch {\n    case case1.deception &amp;&amp; case1.dishonest &amp;&amp; case1.harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>// Generated Alloy specification from Yuho\nmodule YuhoGenerated\n\nabstract sig Bool {}\none sig True, False extends Bool {}\n\nsig Cheating {\n  accused: String,\n  deception: Bool,\n  dishonest: Bool,\n  harm: Bool\n}\n\npred MatchCase0[x: univ] {\n  (deception = True and dishonest = True and harm = True) =&gt; {\n    // Consequence: guilty of cheating\n  }\n}\n\nrun {} for 5\n</code></pre></p>"},{"location":"transpilers/alloy/#example-2-theft-offense","title":"Example 2: Theft Offense","text":"<p>Yuho Code: <pre><code>// Section 378 - Theft\nstruct Theft {\n    bool dishonestIntention,\n    bool movableProperty,\n    bool withoutConsent,\n    bool movedProperty\n}\n\nmatch {\n    case dishonestIntention &amp;&amp; movableProperty &amp;&amp; \n         withoutConsent &amp;&amp; movedProperty :=\n        consequence \"guilty of theft\";\n    case _ :=\n        consequence \"not guilty of theft\";\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>// Generated Alloy specification from Yuho\nmodule YuhoGenerated\n\nabstract sig Bool {}\none sig True, False extends Bool {}\n\nsig Theft {\n  dishonestIntention: Bool,\n  movableProperty: Bool,\n  withoutConsent: Bool,\n  movedProperty: Bool\n}\n\npred MatchCase0[x: univ] {\n  (dishonestIntention = True and movableProperty = True and \n   withoutConsent = True and movedProperty = True) =&gt; {\n    // Consequence: guilty of theft\n  }\n}\n\nrun {} for 5\n</code></pre></p>"},{"location":"transpilers/alloy/#example-3-complex-legal-logic","title":"Example 3: Complex Legal Logic","text":"<p>Yuho Code: <pre><code>struct LegalCase {\n    string caseNumber,\n    bool isGuilty,\n    money penalty\n}\n\nmatch {\n    case isGuilty &amp;&amp; penalty &gt; $1000.00 :=\n        consequence \"severe punishment\";\n    case isGuilty &amp;&amp; penalty &lt;= $1000.00 :=\n        consequence \"moderate punishment\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>// Generated Alloy specification from Yuho\nmodule YuhoGenerated\n\nabstract sig Bool {}\none sig True, False extends Bool {}\n\nsig LegalCase {\n  caseNumber: String,\n  isGuilty: Bool,\n  penalty: Int\n}\n\npred MatchCase0[x: univ] {\n  (isGuilty = True and penalty &gt; 1000) =&gt; {\n    // Consequence: severe punishment\n  }\n}\n\npred MatchCase1[x: univ] {\n  (isGuilty = True and penalty &lt;= 1000) =&gt; {\n    // Consequence: moderate punishment\n  }\n}\n\npred MatchCase2[x: univ] {\n  else =&gt; {\n    // Consequence: not guilty\n  }\n}\n\nrun {} for 5\n</code></pre></p>"},{"location":"transpilers/alloy/#advanced-features","title":"Advanced Features","text":""},{"location":"transpilers/alloy/#nested-structs","title":"Nested Structs","text":"<p>Yuho Code: <pre><code>struct Address {\n    string street,\n    string city,\n    string postalCode\n}\n\nstruct Person {\n    string name,\n    int age,\n    Address address\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>sig Address {\n  street: String,\n  city: String,\n  postalCode: String\n}\n\nsig Person {\n  name: String,\n  age: Int,\n  address: Address\n}\n</code></pre></p>"},{"location":"transpilers/alloy/#multiple-match-case-statements","title":"Multiple Match-Case Statements","text":"<p>Yuho Code: <pre><code>struct Offense {\n    string name,\n    bool isViolent,\n    bool isRepeat\n}\n\nmatch {\n    case isViolent &amp;&amp; isRepeat :=\n        consequence \"life imprisonment\";\n    case isViolent :=\n        consequence \"10 years imprisonment\";\n    case _ :=\n        consequence \"2 years imprisonment\";\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>sig Offense {\n  name: String,\n  isViolent: Bool,\n  isRepeat: Bool\n}\n\npred MatchCase0[x: univ] {\n  (isViolent = True and isRepeat = True) =&gt; {\n    // Consequence: life imprisonment\n  }\n}\n\npred MatchCase1[x: univ] {\n  (isViolent = True) =&gt; {\n    // Consequence: 10 years imprisonment\n  }\n}\n\npred MatchCase2[x: univ] {\n  else =&gt; {\n    // Consequence: 2 years imprisonment\n  }\n}\n</code></pre></p>"},{"location":"transpilers/alloy/#function-definitions","title":"Function Definitions","text":"<p>Yuho Code: <pre><code>bool func isEligible(int age) {\n    match age {\n        case 18 := consequence TRUE;\n        case _ := consequence FALSE;\n    }\n}\n</code></pre></p> <p>Generated Alloy: <pre><code>fun isEligible[age: Int]: Bool {\n  // Function body would be implemented here\n}\n</code></pre></p>"},{"location":"transpilers/alloy/#verification-workflow","title":"Verification Workflow","text":""},{"location":"transpilers/alloy/#step-1-generate-alloy-specification","title":"Step 1: Generate Alloy Specification","text":"<pre><code>yuho alloy legal_concept.yh -o legal_concept.als\n</code></pre>"},{"location":"transpilers/alloy/#step-2-install-alloy-analyzer","title":"Step 2: Install Alloy Analyzer","text":"<ol> <li>Download from alloytools.org</li> <li>Install Java (required for Alloy)</li> <li>Run Alloy Analyzer</li> </ol>"},{"location":"transpilers/alloy/#step-3-verify-specification","title":"Step 3: Verify Specification","text":"<pre><code># Open in Alloy Analyzer\njava -jar alloy.jar legal_concept.als\n</code></pre>"},{"location":"transpilers/alloy/#step-4-analyze-results","title":"Step 4: Analyze Results","text":"<ul> <li>Satisfiable - Model has valid instances</li> <li>Unsatisfiable - Model has no valid instances</li> <li>Counterexamples - Invalid instances found</li> </ul>"},{"location":"transpilers/alloy/#use-cases","title":"Use Cases","text":""},{"location":"transpilers/alloy/#use-case-1-legal-logic-verification","title":"Use Case 1: Legal Logic Verification","text":"<p>Problem: Need to verify legal logic is consistent</p> <p>Solution: Generate Alloy specification and verify</p> <pre><code># Generate Alloy spec\nyuho alloy statute.yh -o statute.als\n\n# Verify with Alloy Analyzer\njava -jar alloy.jar statute.als\n</code></pre> <p>Result: Formal verification of legal logic consistency</p>"},{"location":"transpilers/alloy/#use-case-2-legal-completeness-check","title":"Use Case 2: Legal Completeness Check","text":"<p>Problem: Need to ensure all legal cases are covered</p> <p>Solution: Generate Alloy and check for completeness</p> <pre><code># Generate Alloy spec\nyuho alloy legal_concept.yh -o legal_concept.als\n\n# Check completeness\njava -jar alloy.jar legal_concept.als\n</code></pre> <p>Result: Verification that all legal cases are covered</p>"},{"location":"transpilers/alloy/#use-case-3-legal-consistency-analysis","title":"Use Case 3: Legal Consistency Analysis","text":"<p>Problem: Need to find contradictions in legal logic</p> <p>Solution: Generate Alloy and analyze for contradictions</p> <pre><code># Generate Alloy spec\nyuho alloy analysis.yh -o analysis.als\n\n# Analyze for contradictions\njava -jar alloy.jar analysis.als\n</code></pre> <p>Result: Identification of legal logic contradictions</p>"},{"location":"transpilers/alloy/#best-practices","title":"Best Practices","text":""},{"location":"transpilers/alloy/#1-validate-yuho-first","title":"1. Validate Yuho First","text":"<pre><code># Check Yuho file is valid\nyuho check legal_concept.yh\n\n# Generate Alloy only if valid\nyuho alloy legal_concept.yh -o legal_concept.als\n</code></pre>"},{"location":"transpilers/alloy/#2-use-descriptive-output-names","title":"2. Use Descriptive Output Names","text":"<pre><code># Good: Descriptive names\nyuho alloy cheating.yh -o cheating_verification.als\nyuho alloy theft.yh -o theft_analysis.als\n\n# Avoid: Generic names\nyuho alloy example.yh -o output.als\n</code></pre>"},{"location":"transpilers/alloy/#3-generate-for-multiple-concepts","title":"3. Generate for Multiple Concepts","text":"<pre><code># Generate Alloy for multiple legal concepts\nyuho alloy examples/cheating/cheating_illustration_A.yh -o cheating_A.als\nyuho alloy examples/cheating/cheating_illustration_B.yh -o cheating_B.als\nyuho alloy examples/theft/theft_definition.yh -o theft.als\n</code></pre>"},{"location":"transpilers/alloy/#4-integrate-with-verification-workflow","title":"4. Integrate with Verification Workflow","text":"<pre><code># Generate and verify in one workflow\nyuho alloy legal_concept.yh -o legal_concept.als\njava -jar alloy.jar legal_concept.als\n</code></pre>"},{"location":"transpilers/alloy/#troubleshooting","title":"Troubleshooting","text":""},{"location":"transpilers/alloy/#common-issues","title":"Common Issues","text":""},{"location":"transpilers/alloy/#issue-1-invalid-yuho-file","title":"Issue 1: Invalid Yuho File","text":"<pre><code>$ yuho alloy invalid.yh\n\u2717 Error: Invalid Yuho file\n</code></pre> <p>Solution: Check file with <code>yuho check</code> first:</p> <pre><code>yuho check invalid.yh\n# Fix errors, then try again\nyuho alloy invalid.yh\n</code></pre>"},{"location":"transpilers/alloy/#issue-2-empty-output","title":"Issue 2: Empty Output","text":"<pre><code>$ yuho alloy empty.yh\n# No output generated\n</code></pre> <p>Solution: Ensure file has content:</p> <pre><code>// Add some content\nstruct Test {\n    bool field\n}\n\nmatch {\n    case field := consequence \"result\";\n    case _ := consequence \"default\";\n}\n</code></pre>"},{"location":"transpilers/alloy/#issue-3-permission-denied","title":"Issue 3: Permission Denied","text":"<pre><code>$ yuho alloy example.yh -o protected.als\n\u2717 Error: Permission denied: protected.als\n</code></pre> <p>Solution: Check file permissions:</p> <pre><code>ls -la protected.als\nchmod 644 protected.als\nyuho alloy example.yh -o protected.als\n</code></pre>"},{"location":"transpilers/alloy/#performance","title":"Performance","text":""},{"location":"transpilers/alloy/#generation-speed","title":"Generation Speed","text":"<p>Typical generation times:</p> File Size Statements Time Small 1-10 &lt;10ms Medium 11-100 &lt;50ms Large 101-1000 &lt;500ms Very Large 1000+ &lt;2s"},{"location":"transpilers/alloy/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Generate to files for repeated use</li> <li>Batch generate multiple specifications</li> <li>Cache results for large files</li> <li>Use appropriate scope for verification</li> </ol>"},{"location":"transpilers/alloy/#integration-with-alloy-analyzer","title":"Integration with Alloy Analyzer","text":""},{"location":"transpilers/alloy/#installation","title":"Installation","text":"<ol> <li>Download Alloy Analyzer from alloytools.org</li> <li>Install Java (required for Alloy)</li> <li>Run Alloy Analyzer</li> </ol>"},{"location":"transpilers/alloy/#basic-verification","title":"Basic Verification","text":"<pre><code># Generate Alloy specification\nyuho alloy legal_concept.yh -o legal_concept.als\n\n# Open in Alloy Analyzer\njava -jar alloy.jar legal_concept.als\n</code></pre>"},{"location":"transpilers/alloy/#advanced-verification","title":"Advanced Verification","text":"<pre><code># Generate with custom scope\nyuho alloy legal_concept.yh -o legal_concept.als\n\n# Run with specific scope\njava -jar alloy.jar legal_concept.als\n</code></pre>"},{"location":"transpilers/alloy/#advanced-usage","title":"Advanced Usage","text":""},{"location":"transpilers/alloy/#batch-processing","title":"Batch Processing","text":"<pre><code># Generate Alloy for all files\nfor file in examples/cheating/*.yh; do\n    yuho alloy \"$file\" -o \"${file%.yh}.als\"\ndone\n</code></pre>"},{"location":"transpilers/alloy/#custom-output","title":"Custom Output","text":"<pre><code># Generate with custom naming\nyuho alloy example.yh -o \"legal_concept_$(date +%Y%m%d).als\"\n</code></pre>"},{"location":"transpilers/alloy/#integration-with-cicd","title":"Integration with CI/CD","text":"<pre><code># Generate Alloy specs in CI pipeline\nyuho alloy examples/cheating/cheating_illustration_A.yh -o docs/cheating.als\nyuho alloy examples/theft/theft_definition.yh -o docs/theft.als\n</code></pre>"},{"location":"transpilers/alloy/#next-steps","title":"Next Steps","text":"<ul> <li>Mermaid Transpiler - Generate visual diagrams</li> <li>CLI Commands - Command-line interface</li> <li>Examples - Legal examples</li> <li>Language Guide - Yuho language reference</li> </ul>"},{"location":"transpilers/mermaid/","title":"Mermaid Transpiler","text":"<p>The Mermaid transpiler converts Yuho code into visual diagrams using Mermaid syntax.</p>"},{"location":"transpilers/mermaid/#overview","title":"Overview","text":"<p>The Mermaid transpiler generates:</p> <ul> <li>Flowcharts - Show control flow and conditional logic</li> <li>Mindmaps - Show hierarchical structure of legal concepts</li> <li>Visual Documentation - Create diagrams for documentation</li> <li>Interactive Diagrams - Compatible with Mermaid Live Editor</li> </ul>"},{"location":"transpilers/mermaid/#supported-formats","title":"Supported Formats","text":""},{"location":"transpilers/mermaid/#flowchart-format","title":"Flowchart Format","text":"<p>Shows decision logic and control flow:</p> <pre><code>flowchart TD\n    S0[Cheating]\n    S0 --&gt; M1[deception: bool]\n    S0 --&gt; M2[dishonest: bool]\n    S0 --&gt; M3[harm: bool]\n    MC4{Decision}\n    MC4 --&gt; C5[Case 1]\n    C5 --&gt; CO6[Consequence: guilty]</code></pre>"},{"location":"transpilers/mermaid/#mindmap-format","title":"Mindmap Format","text":"<p>Shows hierarchical structure:</p> <pre><code>mindmap\n  root((Cheating))\n    accused\n      string\n    deception\n      bool\n    harm\n      bool\n    Decisions\n      Case1\n      Default</code></pre>"},{"location":"transpilers/mermaid/#usage","title":"Usage","text":""},{"location":"transpilers/mermaid/#basic-usage","title":"Basic Usage","text":"<pre><code># Generate flowchart\nyuho draw example.yh --format flowchart -o diagram.mmd\n\n# Generate mindmap\nyuho draw example.yh --format mindmap -o mindmap.mmd\n</code></pre>"},{"location":"transpilers/mermaid/#cli-integration","title":"CLI Integration","text":"<pre><code># Generate both formats\nyuho draw legal_concept.yh -f flowchart -o legal_concept_flow.mmd\nyuho draw legal_concept.yh -f mindmap -o legal_concept_mind.mmd\n</code></pre>"},{"location":"transpilers/mermaid/#transpilation-process","title":"Transpilation Process","text":""},{"location":"transpilers/mermaid/#step-1-parse-yuho-code","title":"Step 1: Parse Yuho Code","text":"<pre><code>// Section 415 - Cheating\nstruct Cheating {\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"transpilers/mermaid/#step-2-generate-flowchart","title":"Step 2: Generate Flowchart","text":"<pre><code>flowchart TD\n    S0[Cheating]\n    S0 --&gt; M1[deception: bool]\n    S0 --&gt; M2[dishonest: bool]\n    S0 --&gt; M3[harm: bool]\n    MC4{Decision}\n    MC4 --&gt; C5[Case 1]\n    MC4 --&gt; C6[Default]\n    C5 --&gt; CO7[Consequence: guilty of cheating]\n    C6 --&gt; CO8[Consequence: not guilty of cheating]</code></pre>"},{"location":"transpilers/mermaid/#step-3-generate-mindmap","title":"Step 3: Generate Mindmap","text":"<pre><code>mindmap\n  root((Cheating))\n    deception\n      bool\n    dishonest\n      bool\n    harm\n      bool\n    Decisions\n      Case1\n        guilty of cheating\n      Default\n        not guilty of cheating</code></pre>"},{"location":"transpilers/mermaid/#diagram-components","title":"Diagram Components","text":""},{"location":"transpilers/mermaid/#struct-nodes","title":"Struct Nodes","text":"<pre><code>flowchart TD\n    S0[StructName]\n    S0 --&gt; M1[field1: type]\n    S0 --&gt; M2[field2: type]\n    S0 --&gt; M3[field3: type]</code></pre> <p>Generated from: <pre><code>struct StructName {\n    type field1,\n    type field2,\n    type field3\n}\n</code></pre></p>"},{"location":"transpilers/mermaid/#decision-nodes","title":"Decision Nodes","text":"<pre><code>flowchart TD\n    MC0{Decision}\n    MC0 --&gt; C1[Case 1]\n    MC0 --&gt; C2[Case 2]\n    MC0 --&gt; C3[Default]</code></pre> <p>Generated from: <pre><code>match {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    case _ := consequence default;\n}\n</code></pre></p>"},{"location":"transpilers/mermaid/#consequence-nodes","title":"Consequence Nodes","text":"<pre><code>flowchart TD\n    C1[Case 1]\n    C1 --&gt; CO1[Consequence: result1]\n    C2[Case 2]\n    C2 --&gt; CO2[Consequence: result2]</code></pre> <p>Generated from: <pre><code>match {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    case _ := consequence default;\n}\n</code></pre></p>"},{"location":"transpilers/mermaid/#legal-examples","title":"Legal Examples","text":""},{"location":"transpilers/mermaid/#example-1-cheating-offense","title":"Example 1: Cheating Offense","text":"<p>Yuho Code: <pre><code>// Section 415 - Cheating\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\nCheating case1 := {\n    accused := \"Alice\",\n    deception := TRUE,\n    dishonest := TRUE,\n    harm := TRUE\n};\n\nmatch {\n    case case1.deception &amp;&amp; case1.dishonest &amp;&amp; case1.harm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty of cheating\";\n}\n</code></pre></p> <p>Generated Flowchart: <pre><code>flowchart TD\n    S0[Cheating]\n    S0 --&gt; M1[accused: string]\n    S0 --&gt; M2[deception: bool]\n    S0 --&gt; M3[dishonest: bool]\n    S0 --&gt; M4[harm: bool]\n    MC5{Decision}\n    MC5 --&gt; C6[Case 1]\n    MC5 --&gt; C7[Default]\n    C6 --&gt; CO8[Consequence: guilty of cheating]\n    C7 --&gt; CO9[Consequence: not guilty of cheating]</code></pre></p> <p>Generated Mindmap: <pre><code>mindmap\n  root((Cheating))\n    accused\n      string\n    deception\n      bool\n    dishonest\n      bool\n    harm\n      bool\n    Decisions\n      Case1\n        guilty of cheating\n      Default\n        not guilty of cheating</code></pre></p>"},{"location":"transpilers/mermaid/#example-2-theft-offense","title":"Example 2: Theft Offense","text":"<p>Yuho Code: <pre><code>// Section 378 - Theft\nstruct Theft {\n    bool dishonestIntention,\n    bool movableProperty,\n    bool withoutConsent,\n    bool movedProperty\n}\n\nmatch {\n    case dishonestIntention &amp;&amp; movableProperty &amp;&amp; \n         withoutConsent &amp;&amp; movedProperty :=\n        consequence \"guilty of theft\";\n    case _ :=\n        consequence \"not guilty of theft\";\n}\n</code></pre></p> <p>Generated Flowchart: <pre><code>flowchart TD\n    S0[Theft]\n    S0 --&gt; M1[dishonestIntention: bool]\n    S0 --&gt; M2[movableProperty: bool]\n    S0 --&gt; M3[withoutConsent: bool]\n    S0 --&gt; M4[movedProperty: bool]\n    MC5{Decision}\n    MC5 --&gt; C6[Case 1]\n    MC5 --&gt; C7[Default]\n    C6 --&gt; CO8[Consequence: guilty of theft]\n    C7 --&gt; CO9[Consequence: not guilty of theft]</code></pre></p> <p>Generated Mindmap: <pre><code>mindmap\n  root((Theft))\n    dishonestIntention\n      bool\n    movableProperty\n      bool\n    withoutConsent\n      bool\n    movedProperty\n      bool\n    Decisions\n      Case1\n        guilty of theft\n      Default\n        not guilty of theft</code></pre></p>"},{"location":"transpilers/mermaid/#example-3-complex-legal-logic","title":"Example 3: Complex Legal Logic","text":"<p>Yuho Code: <pre><code>struct LegalCase {\n    string caseNumber,\n    bool isGuilty,\n    money penalty\n}\n\nmatch {\n    case isGuilty &amp;&amp; penalty &gt; $1000.00 :=\n        consequence \"severe punishment\";\n    case isGuilty &amp;&amp; penalty &lt;= $1000.00 :=\n        consequence \"moderate punishment\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre></p> <p>Generated Flowchart: <pre><code>flowchart TD\n    S0[LegalCase]\n    S0 --&gt; M1[caseNumber: string]\n    S0 --&gt; M2[isGuilty: bool]\n    S0 --&gt; M3[penalty: money]\n    MC4{Decision}\n    MC4 --&gt; C5[Case 1]\n    MC4 --&gt; C6[Case 2]\n    MC4 --&gt; C7[Default]\n    C5 --&gt; CO8[Consequence: severe punishment]\n    C6 --&gt; CO9[Consequence: moderate punishment]\n    C7 --&gt; CO10[Consequence: not guilty]</code></pre></p> <p>Generated Mindmap: <pre><code>mindmap\n  root((LegalCase))\n    caseNumber\n      string\n    isGuilty\n      bool\n    penalty\n      money\n    Decisions\n      Case1\n        severe punishment\n      Case2\n        moderate punishment\n      Default\n        not guilty</code></pre></p>"},{"location":"transpilers/mermaid/#advanced-features","title":"Advanced Features","text":""},{"location":"transpilers/mermaid/#nested-structs","title":"Nested Structs","text":"<p>Yuho Code: <pre><code>struct Address {\n    string street,\n    string city,\n    string postalCode\n}\n\nstruct Person {\n    string name,\n    int age,\n    Address address\n}\n</code></pre></p> <p>Generated Flowchart: <pre><code>flowchart TD\n    S0[Person]\n    S0 --&gt; M1[name: string]\n    S0 --&gt; M2[age: int]\n    S0 --&gt; M3[address: Address]\n    S3[Address]\n    S3 --&gt; M4[street: string]\n    S3 --&gt; M5[city: string]\n    S3 --&gt; M6[postalCode: string]\n    M3 --&gt; S3</code></pre></p> <p>Generated Mindmap: <pre><code>mindmap\n  root((Person))\n    name\n      string\n    age\n      int\n    address\n      Address\n        street\n          string\n        city\n          string\n        postalCode\n          string</code></pre></p>"},{"location":"transpilers/mermaid/#multiple-match-case-statements","title":"Multiple Match-Case Statements","text":"<p>Yuho Code: <pre><code>struct Offense {\n    string name,\n    bool isViolent,\n    bool isRepeat\n}\n\nmatch {\n    case isViolent &amp;&amp; isRepeat :=\n        consequence \"life imprisonment\";\n    case isViolent :=\n        consequence \"10 years imprisonment\";\n    case _ :=\n        consequence \"2 years imprisonment\";\n}\n</code></pre></p> <p>Generated Flowchart: <pre><code>flowchart TD\n    S0[Offense]\n    S0 --&gt; M1[name: string]\n    S0 --&gt; M2[isViolent: bool]\n    S0 --&gt; M3[isRepeat: bool]\n    MC4{Decision}\n    MC4 --&gt; C5[Case 1]\n    MC4 --&gt; C6[Case 2]\n    MC4 --&gt; C7[Default]\n    C5 --&gt; CO8[Consequence: life imprisonment]\n    C6 --&gt; CO9[Consequence: 10 years imprisonment]\n    C7 --&gt; CO10[Consequence: 2 years imprisonment]</code></pre></p> <p>Generated Mindmap: <pre><code>mindmap\n  root((Offense))\n    name\n      string\n    isViolent\n      bool\n    isRepeat\n      bool\n    Decisions\n      Case1\n        life imprisonment\n      Case2\n        10 years imprisonment\n      Default\n        2 years imprisonment</code></pre></p>"},{"location":"transpilers/mermaid/#integration-with-documentation","title":"Integration with Documentation","text":""},{"location":"transpilers/mermaid/#markdown-integration","title":"Markdown Integration","text":"<p>Embed diagrams in Markdown:</p> <p><pre><code># Legal Concept\n\n```mermaid\nflowchart TD\n    S0[Cheating]\n    S0 --&gt; M1[deception: bool]\n    S0 --&gt; M2[dishonest: bool]\n    S0 --&gt; M3[harm: bool]\n</code></pre> <pre><code>### GitHub Integration\n\nGitHub automatically renders Mermaid diagrams:\n\n```markdown\n# Legal Logic\n\n```mermaid\nflowchart TD\n    S0[Cheating]\n    S0 --&gt; M1[deception: bool]\n    S0 --&gt; M2[dishonest: bool]\n    S0 --&gt; M3[harm: bool]\n</code></pre> <pre><code>### Mermaid Live Editor\n\n1. Generate diagram:\n```bash\nyuho draw example.yh -f flowchart -o diagram.mmd\n</code></pre></p> <ol> <li> <p>Copy content to Mermaid Live Editor</p> </li> <li> <p>View and edit diagram</p> </li> </ol>"},{"location":"transpilers/mermaid/#best-practices","title":"Best Practices","text":""},{"location":"transpilers/mermaid/#1-choose-appropriate-format","title":"1. Choose Appropriate Format","text":"<pre><code># Use flowchart for decision logic\nyuho draw decision_logic.yh -f flowchart -o decision.mmd\n\n# Use mindmap for concept hierarchy\nyuho draw concept_hierarchy.yh -f mindmap -o concepts.mmd\n</code></pre>"},{"location":"transpilers/mermaid/#2-use-descriptive-filenames","title":"2. Use Descriptive Filenames","text":"<pre><code># Good: Descriptive names\nyuho draw cheating.yh -f flowchart -o cheating_decision_flow.mmd\nyuho draw theft.yh -f mindmap -o theft_elements_mindmap.mmd\n\n# Avoid: Generic names\nyuho draw example.yh -f flowchart -o diagram.mmd\n</code></pre>"},{"location":"transpilers/mermaid/#3-generate-both-formats","title":"3. Generate Both Formats","text":"<pre><code># Generate both flowchart and mindmap\nyuho draw legal_concept.yh -f flowchart -o legal_concept_flow.mmd\nyuho draw legal_concept.yh -f mindmap -o legal_concept_mind.mmd\n</code></pre>"},{"location":"transpilers/mermaid/#4-integrate-with-workflow","title":"4. Integrate with Workflow","text":"<pre><code># Generate diagrams as part of build process\nyuho draw examples/cheating/cheating_illustration_A.yh -f flowchart -o docs/cheating_flow.mmd\nyuho draw examples/cheating/cheating_illustration_A.yh -f mindmap -o docs/cheating_mind.mmd\n</code></pre>"},{"location":"transpilers/mermaid/#troubleshooting","title":"Troubleshooting","text":""},{"location":"transpilers/mermaid/#common-issues","title":"Common Issues","text":""},{"location":"transpilers/mermaid/#issue-1-invalid-yuho-file","title":"Issue 1: Invalid Yuho File","text":"<pre><code>$ yuho draw invalid.yh\n\u2717 Error: Invalid Yuho file\n</code></pre> <p>Solution: Check file with <code>yuho check</code> first:</p> <pre><code>yuho check invalid.yh\n# Fix errors, then try again\nyuho draw invalid.yh\n</code></pre>"},{"location":"transpilers/mermaid/#issue-2-empty-output","title":"Issue 2: Empty Output","text":"<pre><code>$ yuho draw empty.yh\n# No output generated\n</code></pre> <p>Solution: Ensure file has content:</p> <pre><code>// Add some content\nstruct Test {\n    bool field\n}\n\nmatch {\n    case field := consequence \"result\";\n    case _ := consequence \"default\";\n}\n</code></pre>"},{"location":"transpilers/mermaid/#issue-3-permission-denied","title":"Issue 3: Permission Denied","text":"<pre><code>$ yuho draw example.yh -o protected.mmd\n\u2717 Error: Permission denied: protected.mmd\n</code></pre> <p>Solution: Check file permissions:</p> <pre><code>ls -la protected.mmd\nchmod 644 protected.mmd\nyuho draw example.yh -o protected.mmd\n</code></pre>"},{"location":"transpilers/mermaid/#performance","title":"Performance","text":""},{"location":"transpilers/mermaid/#generation-speed","title":"Generation Speed","text":"<p>Typical generation times:</p> File Size Statements Flowchart Time Mindmap Time Small 1-10 &lt;10ms &lt;5ms Medium 11-100 &lt;50ms &lt;25ms Large 101-1000 &lt;500ms &lt;250ms Very Large 1000+ &lt;2s &lt;1s"},{"location":"transpilers/mermaid/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Use appropriate format for your use case</li> <li>Generate to files for repeated use</li> <li>Batch generate multiple diagrams</li> <li>Cache results for large files</li> </ol>"},{"location":"transpilers/mermaid/#advanced-usage","title":"Advanced Usage","text":""},{"location":"transpilers/mermaid/#batch-processing","title":"Batch Processing","text":"<pre><code># Generate diagrams for all files\nfor file in examples/cheating/*.yh; do\n    yuho draw \"$file\" -f flowchart -o \"${file%.yh}_flow.mmd\"\n    yuho draw \"$file\" -f mindmap -o \"${file%.yh}_mind.mmd\"\ndone\n</code></pre>"},{"location":"transpilers/mermaid/#custom-output","title":"Custom Output","text":"<pre><code># Generate with custom naming\nyuho draw example.yh -f flowchart -o \"legal_concept_$(date +%Y%m%d).mmd\"\n</code></pre>"},{"location":"transpilers/mermaid/#integration-with-cicd","title":"Integration with CI/CD","text":"<pre><code># Generate diagrams in CI pipeline\nyuho draw examples/cheating/cheating_illustration_A.yh -f flowchart -o docs/cheating_flow.mmd\nyuho draw examples/cheating/cheating_illustration_A.yh -f mindmap -o docs/cheating_mind.mmd\n</code></pre>"},{"location":"transpilers/mermaid/#next-steps","title":"Next Steps","text":"<ul> <li>Alloy Transpiler - Generate Alloy specifications</li> <li>CLI Commands - Command-line interface</li> <li>Examples - Legal examples</li> <li>Language Guide - Yuho language reference</li> </ul>"},{"location":"transpilers/overview/","title":"Transpilers Overview","text":"<p>Yuho transpiles legal code to multiple target formats for visualization and formal verification.</p>"},{"location":"transpilers/overview/#what-is-a-transpiler","title":"What is a Transpiler?","text":"<p>A transpiler (source-to-source compiler) converts Yuho source code into other formats while preserving the logical meaning.</p> <p>Yuho's transpilers enable: - Visualization: Understand complex legal logic through diagrams - Verification: Formally prove correctness using automated tools - Documentation: Generate visual documentation automatically</p>"},{"location":"transpilers/overview/#available-transpilers","title":"Available Transpilers","text":""},{"location":"transpilers/overview/#1-mermaid-transpiler","title":"1. Mermaid Transpiler","text":"<p>Target: Mermaid diagram syntax</p> <p>Purpose: Generate visual diagrams that can be rendered in browsers, Markdown files, and documentation.</p> <p>Output Formats: - Flowcharts: Show control flow and conditional logic - Mindmaps: Show hierarchical structure of legal concepts</p> <p>Usage: <pre><code># Flowchart\nyuho draw example.yh --format flowchart -o diagram.mmd\n\n# Mindmap\nyuho draw example.yh --format mindmap -o mindmap.mmd\n</code></pre></p> <p>Example Output (Flowchart): <pre><code>flowchart TD\n    S0[Cheating]\n    S0 --&gt; M1[accused: string]\n    S0 --&gt; M2[deception: bool]\n    S0 --&gt; M3[harm: bool]\n    MC4{Decision}\n    MC4 --&gt; C5[Case 1]\n    C5 --&gt; CO6[Consequence: guilty]</code></pre></p> <p>Learn More: Mermaid Transpiler Details</p>"},{"location":"transpilers/overview/#2-alloy-transpiler","title":"2. Alloy Transpiler","text":"<p>Target: Alloy specification language</p> <p>Purpose: Generate formal specifications for automated logical verification and model checking.</p> <p>Output Components: - Signatures: From Yuho structs - Predicates: From match-case logic - Facts: From constraints and relationships - Run Commands: For automated verification</p> <p>Usage: <pre><code>yuho alloy example.yh -o specification.als\n</code></pre></p> <p>Example Output: <pre><code>// Generated Alloy specification from Yuho\nmodule YuhoGenerated\n\nabstract sig Bool {}\none sig True, False extends Bool {}\n\nsig Cheating {\n  accused: String,\n  deception: Bool,\n  harm: Bool\n}\n\npred MatchCase0[x: univ] {\n  // Match expression conditions\n  (deception = True and harm = True) =&gt; {\n    // Consequence: guilty\n  }\n}\n\nrun {} for 5\n</code></pre></p> <p>Learn More: Alloy Transpiler Details</p>"},{"location":"transpilers/overview/#transpilation-pipeline","title":"Transpilation Pipeline","text":"<pre><code>graph LR\n    A[Yuho Source .yh] --&gt; B[Lexer]\n    B --&gt; C[Parser]\n    C --&gt; D[AST]\n    D --&gt; E[Semantic Analyzer]\n    E --&gt; F{Transpiler}\n    F --&gt; G[Mermaid .mmd]\n    F --&gt; H[Alloy .als]</code></pre>"},{"location":"transpilers/overview/#step-by-step-process","title":"Step-by-Step Process","text":"<ol> <li>Lexing: Tokenize Yuho source code</li> <li>Parsing: Build Abstract Syntax Tree (AST)</li> <li>Semantic Analysis: Validate types and semantics</li> <li>Transpilation: Convert AST to target format</li> <li>Output: Write to file or stdout</li> </ol>"},{"location":"transpilers/overview/#use-cases","title":"Use Cases","text":""},{"location":"transpilers/overview/#use-case-1-visual-documentation","title":"Use Case 1: Visual Documentation","text":"<p>Problem: Legal statutes are hard to understand</p> <p>Solution: Generate flowcharts showing logic flow</p> <pre><code># Create visual documentation\nyuho draw statute.yh -f flowchart -o statute_diagram.mmd\n\n# View in browser with Mermaid Live Editor\n# Or embed in Markdown documentation\n</code></pre> <p>Result: Clear visual representation of conditional logic</p>"},{"location":"transpilers/overview/#use-case-2-formal-verification","title":"Use Case 2: Formal Verification","text":"<p>Problem: Need to prove logical consistency of legal rules</p> <p>Solution: Generate Alloy specification and verify</p> <pre><code># Generate Alloy specification\nyuho alloy statute.yh -o statute.als\n\n# Verify with Alloy Analyzer\njava -jar alloy.jar statute.als\n</code></pre> <p>Result: Automated verification of logical correctness</p>"},{"location":"transpilers/overview/#use-case-3-teaching-legal-logic","title":"Use Case 3: Teaching Legal Logic","text":"<p>Problem: Students struggle with statute structure</p> <p>Solution: Generate mindmaps showing hierarchy</p> <pre><code># Create learning materials\nyuho draw statute.yh -f mindmap -o learning_material.mmd\n</code></pre> <p>Result: Visual learning aids for legal education</p>"},{"location":"transpilers/overview/#transpiler-architecture","title":"Transpiler Architecture","text":""},{"location":"transpilers/overview/#common-components","title":"Common Components","text":"<p>All transpilers share:</p> <ol> <li>AST Traversal: Walk through the Abstract Syntax Tree</li> <li>Type Mapping: Convert Yuho types to target types</li> <li>Logic Translation: Convert match-case to target constructs</li> <li>Code Generation: Output in target format</li> </ol>"},{"location":"transpilers/overview/#mermaid-transpiler","title":"Mermaid Transpiler","text":"<p>Location: <code>yuho_v3/transpilers/mermaid_transpiler.py</code></p> <p>Key Features: - Node ID generation for unique identifiers - Recursive AST traversal - Format-specific output (flowchart vs mindmap)</p> <p>Algorithm: <pre><code>def transpile_to_flowchart(program):\n    1. Initialize output with \"flowchart TD\"\n    2. For each statement:\n        - Generate unique node ID\n        - Convert to Mermaid syntax\n        - Add to output\n    3. Connect nodes based on relationships\n    4. Return Mermaid code\n</code></pre></p>"},{"location":"transpilers/overview/#alloy-transpiler","title":"Alloy Transpiler","text":"<p>Location: <code>yuho_v3/transpilers/alloy_transpiler.py</code></p> <p>Key Features: - Struct to signature conversion - Match-case to predicate conversion - Type system mapping - Verification command generation</p> <p>Algorithm: <pre><code>def transpile(program):\n    1. Process structs \u2192 Generate signatures\n    2. Process match-case \u2192 Generate predicates\n    3. Add boolean signatures (True/False)\n    4. Add run commands\n    5. Return Alloy specification\n</code></pre></p>"},{"location":"transpilers/overview/#type-mapping","title":"Type Mapping","text":""},{"location":"transpilers/overview/#yuho-to-mermaid","title":"Yuho to Mermaid","text":"<p>Mermaid is primarily visual, so types appear as labels:</p> Yuho Type Mermaid Representation <code>int</code> <code>field: int</code> <code>string</code> <code>field: string</code> <code>bool</code> <code>field: bool</code> Custom struct <code>field: CustomType</code>"},{"location":"transpilers/overview/#yuho-to-alloy","title":"Yuho to Alloy","text":"Yuho Type Alloy Type <code>int</code> <code>Int</code> <code>float</code> <code>Int</code> (Alloy has no floats) <code>bool</code> <code>Bool</code> (custom signature) <code>string</code> <code>String</code> <code>percent</code> <code>Int</code> <code>money</code> <code>Int</code> <code>date</code> <code>String</code> <code>duration</code> <code>String</code> Custom struct Custom signature"},{"location":"transpilers/overview/#adding-new-transpilers","title":"Adding New Transpilers","text":"<p>Want to add a new transpiler? Here's how:</p>"},{"location":"transpilers/overview/#1-create-transpiler-module","title":"1. Create Transpiler Module","text":"<pre><code># yuho_v3/transpilers/my_transpiler.py\n\nclass MyTranspiler:\n    def __init__(self):\n        self.output = []\n\n    def transpile(self, program: Program) -&gt; str:\n        \"\"\"Transpile Yuho AST to target format\"\"\"\n        for stmt in program.statements:\n            self._process_statement(stmt)\n        return self._generate_output()\n\n    def _process_statement(self, stmt):\n        # Handle different statement types\n        if isinstance(stmt, StructDefinition):\n            self._handle_struct(stmt)\n        elif isinstance(stmt, MatchCase):\n            self._handle_match(stmt)\n\n    def _generate_output(self) -&gt; str:\n        # Generate final output\n        return \"\\n\".join(self.output)\n</code></pre>"},{"location":"transpilers/overview/#2-add-cli-command","title":"2. Add CLI Command","text":"<pre><code># yuho_v3/cli/main.py\n\n@cli.command()\n@click.argument('file_path', type=click.Path(exists=True))\n@click.option('--output', '-o', help='Output file path')\ndef mytarget(file_path, output):\n    \"\"\"Generate my target format from Yuho file\"\"\"\n    parser = YuhoParser()\n    ast = parser.parse_file(file_path)\n\n    transpiler = MyTranspiler()\n    result = transpiler.transpile(ast)\n\n    if output:\n        with open(output, 'w') as f:\n            f.write(result)\n    else:\n        click.echo(result)\n</code></pre>"},{"location":"transpilers/overview/#3-add-tests","title":"3. Add Tests","text":"<pre><code># yuho_v3/tests/test_my_transpiler.py\n\ndef test_my_transpiler():\n    parser = YuhoParser()\n    transpiler = MyTranspiler()\n\n    code = \"struct Test { string field }\"\n    ast = parser.parse(code)\n    result = transpiler.transpile(ast)\n\n    assert result is not None\n    assert \"Test\" in result\n</code></pre>"},{"location":"transpilers/overview/#future-transpilers","title":"Future Transpilers","text":"<p>Potential targets for future transpilers:</p>"},{"location":"transpilers/overview/#legal-formats","title":"Legal Formats","text":"<ul> <li>LegalRuleML: XML-based legal rule representation</li> <li>LKIF: Legal Knowledge Interchange Format</li> <li>Akoma Ntoso: Legal document XML standard</li> </ul>"},{"location":"transpilers/overview/#programming-languages","title":"Programming Languages","text":"<ul> <li>Python: Executable Python code</li> <li>Prolog: Logic programming</li> <li>JSON/YAML: Data interchange formats</li> </ul>"},{"location":"transpilers/overview/#visualization","title":"Visualization","text":"<ul> <li>GraphViz: Advanced graph visualization</li> <li>PlantUML: UML diagrams</li> <li>D3.js: Interactive visualizations</li> </ul>"},{"location":"transpilers/overview/#verification-tools","title":"Verification Tools","text":"<ul> <li>Coq: Proof assistant</li> <li>Z3: SMT solver</li> <li>TLA+: Formal specification</li> </ul>"},{"location":"transpilers/overview/#performance-considerations","title":"Performance Considerations","text":""},{"location":"transpilers/overview/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Large Files: Transpilation is O(n) where n = AST nodes</li> <li>Caching: Parser results can be cached for repeated transpilations</li> <li>Streaming: For very large files, consider streaming output</li> <li>Parallel: Multiple files can be transpiled in parallel</li> </ol>"},{"location":"transpilers/overview/#benchmarks","title":"Benchmarks","text":"<p>Typical transpilation times (on modern hardware):</p> File Size Statements Time Small 1-10 &lt;10ms Medium 11-100 &lt;50ms Large 101-1000 &lt;500ms Very Large 1000+ &lt;2s"},{"location":"transpilers/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"transpilers/overview/#transpilation-errors","title":"Transpilation Errors","text":"<p>Issue: Transpilation fails with error</p> <p>Solutions: 1. Check that file passes <code>yuho check</code> 2. Ensure all types are defined 3. Verify match-case coverage</p>"},{"location":"transpilers/overview/#output-issues","title":"Output Issues","text":"<p>Issue: Generated output is incorrect</p> <p>Solutions: 1. Check Yuho syntax is correct 2. Verify semantic analysis passes 3. Report bug with minimal example</p>"},{"location":"transpilers/overview/#target-tool-issues","title":"Target Tool Issues","text":"<p>Issue: Generated file won't open in target tool</p> <p>Solutions: - Mermaid: Test in Mermaid Live Editor - Alloy: Verify with Alloy Analyzer - Check target tool version compatibility</p>"},{"location":"transpilers/overview/#resources","title":"Resources","text":"<ul> <li>Mermaid Documentation</li> <li>Alloy Documentation</li> <li>Yuho Architecture</li> <li>AST Nodes Reference</li> </ul>"},{"location":"transpilers/overview/#see-also","title":"See Also","text":"<ul> <li>Mermaid Transpiler Details</li> <li>Alloy Transpiler Details</li> <li>CLI Commands</li> <li>Examples</li> </ul>"}]}