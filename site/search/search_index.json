{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Yuho","text":"<p>Yuho is a domain-specific language (DSL) dedicated to simplifying legalese by providing a programmatic representation of Singapore Law.</p>"},{"location":"#what-is-yuho","title":"What is Yuho?","text":"<p>Yuho helps law students and legal professionals better understand statutes by providing a flexible, programmatic syntax for representing legal concepts. Current applications focus on Singapore Criminal Law, but the principles can be applied to any jurisdiction that relies on statutes.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83c\udfaf Domain-Specific: Tailored specifically for legal reasoning and statute representation</li> <li>\ud83d\udcca Visual Diagrams: Transpile to Mermaid flowcharts and mindmaps</li> <li>\u2705 Formal Verification: Generate Alloy specifications for logical verification</li> <li>\ud83d\udd0d Type-Safe: Strong, static typing ensures correctness</li> <li>\ud83d\ude80 CLI Tools: Comprehensive command-line interface for all operations</li> <li>\ud83d\udcdd REPL: Interactive shell for experimentation</li> </ul>"},{"location":"#why-yuho","title":"Why Yuho?","text":"<p>The law is innately complex. Statutes are not always easy to understand, especially for incoming law students new to legalese and its logical structure.</p> <p>Yuho provides:</p> <ol> <li>Clarity: Make statutory logic explicit and visual</li> <li>Verification: Ensure logical consistency through formal methods</li> <li>Education: Help students understand legal reasoning patterns</li> <li>Modularity: Reusable legal concepts and patterns</li> </ol>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>// Define the legal concept of Cheating\nstruct Cheating {\n    string accused,\n    string victim,\n    bool deception,\n    bool dishonest,\n    bool harm\n}\n\n// Define the logical requirements\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; harm := consequence \"guilty of cheating\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>This code can then be:</p> <ul> <li>\u2705 Validated for syntax and semantic correctness</li> <li>\ud83d\udcca Visualized as flowcharts or mindmaps</li> <li>\ud83d\udd0d Verified using formal methods with Alloy</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li> <p> Quick Start</p> <p>Install Yuho and write your first program in minutes</p> <p> Quick Start Guide</p> </li> <li> <p> Language Guide</p> <p>Learn Yuho's syntax, types, and patterns</p> <p> Language Reference</p> </li> <li> <p> Examples</p> <p>Explore real-world legal examples</p> <p> See Examples</p> </li> <li> <p> API Reference</p> <p>Deep dive into Yuho's internals</p> <p> API Documentation</p> </li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#for-law-students","title":"For Law Students","text":"<ul> <li>Understand complex statutes through code</li> <li>Visualize legal logic and dependencies</li> <li>Test understanding with formal verification</li> </ul>"},{"location":"#for-legal-educators","title":"For Legal Educators","text":"<ul> <li>Create interactive learning materials</li> <li>Demonstrate logical reasoning patterns</li> <li>Build reusable teaching examples</li> </ul>"},{"location":"#for-legal-tech-developers","title":"For Legal Tech Developers","text":"<ul> <li>Programmatically represent legal knowledge</li> <li>Build decision support systems</li> <li>Integrate with existing legal tools</li> </ul>"},{"location":"#community","title":"Community","text":"<p>Yuho is open-source and welcomes contributions!</p> <ul> <li>GitHub: github.com/gongahkia/yuho</li> <li>Issues: Report bugs or request features</li> <li>Contributing: Learn how to contribute</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Install Yuho</li> <li>Write your first program</li> <li>Explore the CLI commands</li> <li>Learn the syntax</li> </ul>"},{"location":"about/faq/","title":"Frequently Asked Questions","text":"<p>Common questions about Yuho and their answers.</p>"},{"location":"about/faq/#general-questions","title":"General Questions","text":""},{"location":"about/faq/#what-is-yuho","title":"What is Yuho?","text":"<p>Yuho is a domain-specific language (DSL) designed specifically for representing legal statutes and reasoning patterns in code. It helps law students and legal professionals better understand complex legal logic by providing a programmatic representation.</p>"},{"location":"about/faq/#why-yuho","title":"Why \"Yuho\"?","text":"<p>The name reflects the goal of making legal reasoning clear and understandable - helping users say \"Yuho!\" (like \"Eureka!\") when they finally grasp complex legal concepts.</p>"},{"location":"about/faq/#who-should-use-yuho","title":"Who should use Yuho?","text":"<ul> <li>Law students learning statutory interpretation</li> <li>Legal educators teaching legal reasoning</li> <li>Legal professionals working with Singapore Criminal Law</li> <li>Legal tech developers building tools for legal analysis</li> </ul>"},{"location":"about/faq/#is-yuho-production-ready","title":"Is Yuho production-ready?","text":"<p>Yes! Yuho v3.0 is production-ready with: - Comprehensive testing (234+ tests) - Docker containerization - CI/CD pipeline - Full documentation - Type safety and error handling</p>"},{"location":"about/faq/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"about/faq/#how-do-i-install-yuho","title":"How do I install Yuho?","text":"<pre><code># From source (recommended)\ngit clone https://github.com/gongahkia/yuho.git\ncd yuho\npip install -e .\n\n# Or with Docker\ndocker pull yuho:latest\n</code></pre> <p>See Installation Guide for details.</p>"},{"location":"about/faq/#what-are-the-requirements","title":"What are the requirements?","text":"<ul> <li>Python 3.8 or higher</li> <li>pip package manager</li> <li>Optional: Docker for containerized usage</li> </ul>"},{"location":"about/faq/#can-i-use-yuho-on-windows","title":"Can I use Yuho on Windows?","text":"<p>Yes! Yuho works on Windows, macOS, and Linux. Install Python 3.8+ and follow the installation instructions.</p>"},{"location":"about/faq/#why-am-i-getting-command-not-found-errors","title":"Why am I getting \"command not found\" errors?","text":"<p>Ensure Python's scripts directory is in your PATH: <pre><code># Check installation\nwhich yuho\nyuho --version\n\n# If not found, reinstall\npip install -e . --force-reinstall\n</code></pre></p>"},{"location":"about/faq/#language-questions","title":"Language Questions","text":""},{"location":"about/faq/#is-yuho-turing-complete","title":"Is Yuho Turing-complete?","text":"<p>No, and by design! Yuho intentionally lacks: - Loops (no <code>for</code>, <code>while</code>) - Recursion (limited) - Side effects</p> <p>This reflects the nature of legal statutes, which don't contain loops or recursive definitions.</p>"},{"location":"about/faq/#why-no-loops","title":"Why no loops?","text":"<p>Legal statutes don't iterate or loop. They define fixed conditions and consequences. Yuho's design mirrors this structure.</p>"},{"location":"about/faq/#why-immutability","title":"Why immutability?","text":"<p>Immutability reflects the fixed nature of legal statutes - once defined, statutory elements don't change within a single analysis.</p>"},{"location":"about/faq/#can-i-use-yuho-for-contract-law","title":"Can I use Yuho for contract law?","text":"<p>Currently, Yuho is focused on Singapore Criminal Law, but the principles can be applied to any statute-based legal system. Contract law support may be added in future versions.</p>"},{"location":"about/faq/#what-about-case-law","title":"What about case law?","text":"<p>Yuho currently focuses on statutes rather than case law. Adding case law precedent support is on the roadmap.</p>"},{"location":"about/faq/#syntax-questions","title":"Syntax Questions","text":""},{"location":"about/faq/#why-instead-of","title":"Why <code>:=</code> instead of <code>=</code>?","text":"<p>The <code>:=</code> operator makes variable binding explicit and distinguishes it from comparison (<code>==</code>). This is common in functional languages and mathematical notation.</p>"},{"location":"about/faq/#why-match-case-instead-of-if-else","title":"Why match-case instead of if-else?","text":"<p>Match-case ensures complete coverage of all possibilities (through the <code>_</code> wildcard), mirroring legal reasoning where all cases must be considered.</p>"},{"location":"about/faq/#can-i-have-optional-fields-in-structs","title":"Can I have optional fields in structs?","text":"<p>Not yet, but union types are on the roadmap. Currently, use union types like: <pre><code>pass || money optionalAmount := pass\n</code></pre></p>"},{"location":"about/faq/#why-are-there-so-few-data-structures","title":"Why are there so few data structures?","text":"<p>Simplicity! Yuho intentionally provides only structs, which can represent arrays, tuples, dictionaries, and enums. This reduces cognitive load for legal professionals learning to code.</p>"},{"location":"about/faq/#usage-questions","title":"Usage Questions","text":""},{"location":"about/faq/#how-do-i-check-my-yuho-code","title":"How do I check my Yuho code?","text":"<pre><code>yuho check file.yh\n</code></pre> <p>This validates both syntax and semantics.</p>"},{"location":"about/faq/#how-do-i-generate-diagrams","title":"How do I generate diagrams?","text":"<pre><code># Flowchart\nyuho draw file.yh --format flowchart -o diagram.mmd\n\n# Mindmap\nyuho draw file.yh --format mindmap -o mindmap.mmd\n</code></pre>"},{"location":"about/faq/#can-i-use-yuho-in-my-ide","title":"Can I use Yuho in my IDE?","text":"<p>Basic syntax highlighting is available. LSP (Language Server Protocol) support is planned for future releases.</p> <p>Current editor support: - Vim: Basic highlighting available - VS Code: Extension in development - Emacs: Configuration available</p>"},{"location":"about/faq/#how-do-i-view-mermaid-diagrams","title":"How do I view Mermaid diagrams?","text":"<p>Options: 1. Mermaid Live Editor: https://mermaid.live 2. VS Code: Install Mermaid extension 3. GitHub: Renders automatically in README files 4. Documentation tools: MkDocs, Docusaurus support Mermaid</p>"},{"location":"about/faq/#transpiler-questions","title":"Transpiler Questions","text":""},{"location":"about/faq/#what-output-formats-are-supported","title":"What output formats are supported?","text":"<p>Currently: - Mermaid (flowcharts and mindmaps) - Alloy (formal verification)</p> <p>Planned: - Python code generation - JSON/YAML export - GraphViz diagrams</p>"},{"location":"about/faq/#why-use-alloy","title":"Why use Alloy?","text":"<p>Alloy is a formal specification language that can automatically verify logical consistency. It's perfect for ensuring legal logic is sound.</p>"},{"location":"about/faq/#do-i-need-to-know-alloy","title":"Do I need to know Alloy?","text":"<p>No! Yuho generates Alloy automatically. If you want to verify specifications, you can learn Alloy basics, but it's not required.</p>"},{"location":"about/faq/#can-i-add-my-own-transpiler","title":"Can I add my own transpiler?","text":"<p>Yes! See Transpilers Overview for how to add new transpilers.</p>"},{"location":"about/faq/#development-questions","title":"Development Questions","text":""},{"location":"about/faq/#how-can-i-contribute","title":"How can I contribute?","text":"<p>See Contributing Guide for: - Code contributions - Documentation improvements - Bug reports - Feature requests</p>"},{"location":"about/faq/#whats-the-technology-stack","title":"What's the technology stack?","text":"<ul> <li>Language: Python 3.8+</li> <li>Parser: Lark (LALR parser generator)</li> <li>CLI: Click framework</li> <li>Testing: pytest</li> <li>Docs: MkDocs with Material theme</li> <li>CI/CD: GitHub Actions</li> </ul>"},{"location":"about/faq/#how-is-yuho-tested","title":"How is Yuho tested?","text":"<p>Comprehensive testing with 234+ tests: - Unit tests for components - Integration tests for workflows - End-to-end tests with real examples - Performance tests</p>"},{"location":"about/faq/#can-i-use-yuho-in-my-project","title":"Can I use Yuho in my project?","text":"<p>Yes! Yuho is open-source. See the license for details.</p>"},{"location":"about/faq/#performance-questions","title":"Performance Questions","text":""},{"location":"about/faq/#how-fast-is-yuho","title":"How fast is Yuho?","text":"<p>Typical performance: - Small files (&lt;10 statements): &lt;10ms - Medium files (10-100 statements): &lt;50ms - Large files (100-1000 statements): &lt;500ms</p>"},{"location":"about/faq/#can-yuho-handle-large-codebases","title":"Can Yuho handle large codebases?","text":"<p>Yes, though Yuho is designed for individual statutes rather than entire codebases. Each statute is typically a separate file.</p>"},{"location":"about/faq/#is-there-a-file-size-limit","title":"Is there a file size limit?","text":"<p>No hard limit, but practical considerations: - Files over 1000 lines may be slow to parse - Consider splitting large statutes into modules</p>"},{"location":"about/faq/#error-messages","title":"Error Messages","text":""},{"location":"about/faq/#syntax-error-at-line-x","title":"\"Syntax error at line X\"","text":"<p>Check common issues: - Using <code>=</code> instead of <code>:=</code> - Missing semicolons <code>;</code> - Unclosed braces <code>{}</code> - Wrong comment syntax</p>"},{"location":"about/faq/#type-mismatch-error","title":"\"Type mismatch\" error","text":"<p>Ensure types match: <pre><code>// Wrong\nint x := \"string\";\n\n// Correct\nint x := 42;\nstring s := \"string\";\n</code></pre></p>"},{"location":"about/faq/#undefined-variable-error","title":"\"Undefined variable\" error","text":"<p>Variables must be declared before use: <pre><code>// Wrong\nint y := x;  // x not defined\n\n// Correct\nint x := 42;\nint y := x;\n</code></pre></p>"},{"location":"about/faq/#module-not-found-error","title":"\"Module not found\" error","text":"<p>When importing, ensure: - File exists - Path is correct - Using correct import syntax</p>"},{"location":"about/faq/#docker-questions","title":"Docker Questions","text":""},{"location":"about/faq/#why-use-docker","title":"Why use Docker?","text":"<p>Benefits: - Consistent environment across systems - No need to install Python locally - Easy testing and deployment - Isolated from system Python</p>"},{"location":"about/faq/#how-do-i-run-yuho-in-docker","title":"How do I run Yuho in Docker?","text":"<pre><code># Check a file\ndocker run --rm -v $(pwd):/workspace yuho:latest check file.yh\n\n# Interactive REPL\ndocker-compose run --rm yuho-repl\n</code></pre>"},{"location":"about/faq/#can-i-develop-in-docker","title":"Can I develop in Docker?","text":"<p>Yes! Use the development container: <pre><code>docker-compose up yuho-dev\n</code></pre></p>"},{"location":"about/faq/#documentation-questions","title":"Documentation Questions","text":""},{"location":"about/faq/#where-is-the-documentation","title":"Where is the documentation?","text":"<p>Multiple locations: - This site: https://gongahkia.github.io/yuho - Syntax spec: <code>doc/SYNTAX.md</code> in repository - Examples: <code>example/</code> directory - API docs: Auto-generated from code</p>"},{"location":"about/faq/#is-there-a-pdf-version","title":"Is there a PDF version?","text":"<p>Not currently, but you can print any documentation page to PDF from your browser.</p>"},{"location":"about/faq/#how-do-i-contribute-to-documentation","title":"How do I contribute to documentation?","text":"<p>Documentation is in <code>docs/</code> directory. Edit Markdown files and submit a pull request.</p>"},{"location":"about/faq/#legal-questions","title":"Legal Questions","text":""},{"location":"about/faq/#is-yuho-legally-binding","title":"Is Yuho legally binding?","text":"<p>No! Yuho is an educational and analytical tool. It does not constitute legal advice and representations in Yuho are not legally binding.</p>"},{"location":"about/faq/#can-i-use-yuho-in-court","title":"Can I use Yuho in court?","text":"<p>Yuho is not designed for courtroom use. It's an educational and analytical tool for understanding legal logic.</p>"},{"location":"about/faq/#what-jurisdiction-does-yuho-cover","title":"What jurisdiction does Yuho cover?","text":"<p>Currently focused on Singapore Criminal Law, but applicable to any statute-based jurisdiction.</p>"},{"location":"about/faq/#can-yuho-replace-lawyers","title":"Can Yuho replace lawyers?","text":"<p>Absolutely not! Yuho is a tool for understanding and analyzing legal logic, not for providing legal advice or services.</p>"},{"location":"about/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"about/faq/#my-code-wont-parse","title":"My code won't parse","text":"<p>Common issues: 1. Check for typos in keywords 2. Ensure proper use of <code>:=</code> 3. Verify all braces are matched 4. Check semicolon placement</p>"},{"location":"about/faq/#diagrams-arent-generating","title":"Diagrams aren't generating","text":"<ol> <li>Check file passes <code>yuho check</code></li> <li>Verify output path is writable</li> <li>Ensure proper command syntax</li> <li>Check for transpiler errors in verbose mode</li> </ol>"},{"location":"about/faq/#tests-are-failing","title":"Tests are failing","text":"<ol> <li>Ensure all dependencies installed: <code>pip install -r requirements-dev.txt</code></li> <li>Check Python version: <code>python --version</code> (need 3.8+)</li> <li>Clear cache: <code>rm -rf __pycache__ .pytest_cache</code></li> <li>Reinstall: <code>pip install -e . --force-reinstall</code></li> </ol>"},{"location":"about/faq/#future-plans","title":"Future Plans","text":""},{"location":"about/faq/#whats-on-the-roadmap","title":"What's on the roadmap?","text":"<p>See Roadmap for detailed plans, including: - LSP support for IDEs - More transpiler targets - Web interface - Additional legal domains - Contract law support</p>"},{"location":"about/faq/#when-will-feature-x-be-added","title":"When will feature X be added?","text":"<p>Check the GitHub Issues for feature requests and timelines.</p>"},{"location":"about/faq/#can-i-request-a-feature","title":"Can I request a feature?","text":"<p>Yes! Open an issue on GitHub with your feature request.</p>"},{"location":"about/faq/#community","title":"Community","text":""},{"location":"about/faq/#how-do-i-get-help","title":"How do I get help?","text":"<ol> <li>Check this FAQ</li> <li>Read the documentation</li> <li>Search GitHub Issues</li> <li>Open a new issue if needed</li> </ol>"},{"location":"about/faq/#is-there-a-community-forum","title":"Is there a community forum?","text":"<p>Currently, discussions happen on GitHub. A dedicated forum may be added if there's demand.</p>"},{"location":"about/faq/#how-do-i-report-bugs","title":"How do I report bugs?","text":"<p>Use the bug report template and open a GitHub issue.</p>"},{"location":"about/faq/#comparisons","title":"Comparisons","text":""},{"location":"about/faq/#yuho-vs-natural-l4","title":"Yuho vs Natural L4","text":"<ul> <li>Natural L4: English-like syntax, broader scope (all Singapore law)</li> <li>Yuho: Code-like syntax, focused on criminal law</li> <li>Both aim to formalize legal reasoning</li> </ul>"},{"location":"about/faq/#yuho-vs-catala","title":"Yuho vs Catala","text":"<ul> <li>Catala: Mimics legal text structure exactly</li> <li>Yuho: More programming-oriented syntax</li> <li>Both transpile to multiple formats</li> </ul>"},{"location":"about/faq/#yuho-vs-traditional-legal-tools","title":"Yuho vs traditional legal tools","text":"<p>Yuho is NOT a replacement for: - Legal research tools (Westlaw, LexisNexis) - Document automation (Docassemble) - Case management systems</p> <p>Yuho is FOR: - Understanding legal logic - Teaching legal reasoning - Analyzing statutory structure</p>"},{"location":"about/faq/#still-have-questions","title":"Still Have Questions?","text":"<ul> <li>Check the documentation</li> <li>Read the syntax guide</li> <li>See examples</li> <li>Open a GitHub issue</li> </ul> <p>This FAQ is continuously updated. Last updated: 2024</p>"},{"location":"api/parser/","title":"Parser API Reference","text":"<p>API documentation for Yuho's parser module.</p>"},{"location":"api/parser/#overview","title":"Overview","text":"<p>The parser module (<code>yuho_v3/parser.py</code>) converts Lark parse trees into Yuho's Abstract Syntax Tree (AST). It consists of two main components:</p> <ol> <li>YuhoTransformer: Transforms Lark parse trees to AST nodes</li> <li>YuhoParser: Main parser interface for user code</li> </ol>"},{"location":"api/parser/#module-yuho_v3parser","title":"Module: <code>yuho_v3.parser</code>","text":"<pre><code>from yuho_v3.parser import YuhoParser, YuhoTransformer\n</code></pre>"},{"location":"api/parser/#class-yuhoparser","title":"Class: <code>YuhoParser</code>","text":"<p>Main parser class for Yuho language.</p>"},{"location":"api/parser/#constructor","title":"Constructor","text":"<pre><code>YuhoParser()\n</code></pre> <p>Creates a new parser instance.</p> <p>Example: <pre><code>parser = YuhoParser()\n</code></pre></p>"},{"location":"api/parser/#methods","title":"Methods","text":""},{"location":"api/parser/#parsetext-str-program","title":"<code>parse(text: str) -&gt; Program</code>","text":"<p>Parse Yuho source code into an AST.</p> <p>Parameters: - <code>text</code> (str): Yuho source code string</p> <p>Returns: - <code>Program</code>: Root AST node representing the complete program</p> <p>Raises: - <code>SyntaxError</code>: If parsing fails due to syntax errors</p> <p>Example: <pre><code>parser = YuhoParser()\nast = parser.parse('int x := 42;')\nprint(f\"Parsed {len(ast.statements)} statement(s)\")\n</code></pre></p> <p>Usage: <pre><code>code = \"\"\"\nstruct Person {\n    string name,\n    int age\n}\n\"\"\"\ntry:\n    ast = parser.parse(code)\n    print(\"Parsing successful!\")\nexcept SyntaxError as e:\n    print(f\"Syntax error: {e}\")\n</code></pre></p>"},{"location":"api/parser/#parse_filefilepath-str-program","title":"<code>parse_file(filepath: str) -&gt; Program</code>","text":"<p>Parse a Yuho source file.</p> <p>Parameters: - <code>filepath</code> (str): Path to <code>.yh</code> file</p> <p>Returns: - <code>Program</code>: Root AST node</p> <p>Raises: - <code>SyntaxError</code>: If parsing fails - <code>FileNotFoundError</code>: If file doesn't exist - <code>IOError</code>: If file can't be read</p> <p>Example: <pre><code>parser = YuhoParser()\nast = parser.parse_file('example.yh')\nprint(f\"File contains {len(ast.statements)} statements\")\n</code></pre></p> <p>Usage: <pre><code>try:\n    ast = parser.parse_file('/path/to/statute.yh')\n    for stmt in ast.statements:\n        print(f\"Statement type: {type(stmt).__name__}\")\nexcept FileNotFoundError:\n    print(\"File not found\")\nexcept SyntaxError as e:\n    print(f\"Parse error: {e}\")\n</code></pre></p>"},{"location":"api/parser/#class-yuhotransformer","title":"Class: <code>YuhoTransformer</code>","text":"<p>Lark transformer that converts parse trees to Yuho AST nodes.</p> <p>This is an internal class used by <code>YuhoParser</code>. Most users don't need to interact with it directly.</p>"},{"location":"api/parser/#transformation-methods","title":"Transformation Methods","text":"<p>The transformer handles all Yuho language constructs:</p>"},{"location":"api/parser/#statement-transformations","title":"Statement Transformations","text":"<ul> <li><code>program(children)</code> - Transform program node</li> <li><code>import_statement(children)</code> - Transform import statements</li> <li><code>declaration(children)</code> - Transform variable declarations</li> <li><code>assignment(children)</code> - Transform assignments</li> <li><code>struct_definition(children)</code> - Transform struct definitions</li> <li><code>function_definition(children)</code> - Transform function definitions</li> <li><code>match_case(children)</code> - Transform match-case statements</li> </ul>"},{"location":"api/parser/#expression-transformations","title":"Expression Transformations","text":"<ul> <li><code>expression(children)</code> - Transform expressions</li> <li><code>logical_expression(children)</code> - Transform logical operations (&amp;&amp;, ||)</li> <li><code>relational_expression(children)</code> - Transform comparisons (&gt;, &lt;, ==)</li> <li><code>additive_expression(children)</code> - Transform addition/subtraction</li> <li><code>multiplicative_expression(children)</code> - Transform multiplication/division</li> <li><code>primary_expression(children)</code> - Transform primary expressions</li> <li><code>literal(children)</code> - Transform literal values</li> </ul>"},{"location":"api/parser/#usage-examples","title":"Usage Examples","text":""},{"location":"api/parser/#basic-parsing","title":"Basic Parsing","text":"<pre><code>from yuho_v3.parser import YuhoParser\n\n# Create parser\nparser = YuhoParser()\n\n# Parse simple code\ncode = \"int x := 42;\"\nast = parser.parse(code)\n\n# Access AST\nassert len(ast.statements) == 1\ndecl = ast.statements[0]\nassert decl.name == \"x\"\nassert decl.value.value == 42\n</code></pre>"},{"location":"api/parser/#parsing-complex-code","title":"Parsing Complex Code","text":"<pre><code>from yuho_v3.parser import YuhoParser\n\ncode = \"\"\"\n// Define a legal concept\nstruct Cheating {\n    string accused,\n    string victim,\n    bool deception,\n    bool harm\n}\n\n// Define logic\nmatch {\n    case deception &amp;&amp; harm := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n\"\"\"\n\nparser = YuhoParser()\nast = parser.parse(code)\n\n# Examine AST structure\nfor stmt in ast.statements:\n    if isinstance(stmt, StructDefinition):\n        print(f\"Struct: {stmt.name}\")\n        print(f\"  Members: {len(stmt.members)}\")\n    elif isinstance(stmt, MatchCase):\n        print(f\"Match-case with {len(stmt.cases)} cases\")\n</code></pre>"},{"location":"api/parser/#error-handling","title":"Error Handling","text":"<pre><code>from yuho_v3.parser import YuhoParser\n\nparser = YuhoParser()\n\n# Handle syntax errors gracefully\ninvalid_code = \"int x = 42;\"  # Wrong: should use :=\n\ntry:\n    ast = parser.parse(invalid_code)\nexcept SyntaxError as e:\n    print(f\"Syntax error: {e}\")\n    # Provide helpful feedback to user\n</code></pre>"},{"location":"api/parser/#file-parsing-with-error-recovery","title":"File Parsing with Error Recovery","text":"<pre><code>from yuho_v3.parser import YuhoParser\nfrom pathlib import Path\n\ndef parse_yuho_files(directory):\n    \"\"\"Parse all .yh files in a directory\"\"\"\n    parser = YuhoParser()\n    results = {}\n\n    for file_path in Path(directory).glob('*.yh'):\n        try:\n            ast = parser.parse_file(str(file_path))\n            results[file_path.name] = {\n                'success': True,\n                'ast': ast,\n                'statements': len(ast.statements)\n            }\n        except SyntaxError as e:\n            results[file_path.name] = {\n                'success': False,\n                'error': str(e)\n            }\n\n    return results\n\n# Usage\nresults = parse_yuho_files('example/cheating/')\nfor filename, result in results.items():\n    if result['success']:\n        print(f\"\u2713 {filename}: {result['statements']} statements\")\n    else:\n        print(f\"\u2717 {filename}: {result['error']}\")\n</code></pre>"},{"location":"api/parser/#ast-nodes","title":"AST Nodes","text":"<p>The parser produces instances of AST node classes defined in <code>yuho_v3/ast_nodes.py</code>.</p>"},{"location":"api/parser/#common-ast-nodes","title":"Common AST Nodes","text":"<pre><code>from yuho_v3.ast_nodes import (\n    Program,           # Root node\n    Declaration,       # Variable declaration\n    StructDefinition,  # Struct definition\n    MatchCase,         # Match-case statement\n    Literal,          # Literal value\n    Identifier,       # Variable reference\n    BinaryOperation,  # Binary operation (&amp;&amp;, +, etc.)\n)\n</code></pre>"},{"location":"api/parser/#inspecting-ast","title":"Inspecting AST","text":"<pre><code>from yuho_v3.parser import YuhoParser\nfrom yuho_v3.ast_nodes import Declaration, Literal\n\nparser = YuhoParser()\nast = parser.parse('int x := 42;')\n\n# Type checking\nstmt = ast.statements[0]\nassert isinstance(stmt, Declaration)\n\n# Access properties\nassert stmt.name == \"x\"\nassert isinstance(stmt.value, Literal)\nassert stmt.value.value == 42\nassert stmt.value.literal_type == YuhoType.INT\n</code></pre>"},{"location":"api/parser/#integration-with-other-components","title":"Integration with Other Components","text":""},{"location":"api/parser/#with-semantic-analyzer","title":"With Semantic Analyzer","text":"<pre><code>from yuho_v3.parser import YuhoParser\nfrom yuho_v3.semantic_analyzer import SemanticAnalyzer\n\n# Parse code\nparser = YuhoParser()\nast = parser.parse(code)\n\n# Analyze semantics\nanalyzer = SemanticAnalyzer()\nerrors = analyzer.analyze(ast)\n\nif errors:\n    print(\"Semantic errors:\")\n    for error in errors:\n        print(f\"  - {error}\")\nelse:\n    print(\"Code is semantically correct!\")\n</code></pre>"},{"location":"api/parser/#with-transpilers","title":"With Transpilers","text":"<pre><code>from yuho_v3.parser import YuhoParser\nfrom yuho_v3.transpilers.mermaid_transpiler import MermaidTranspiler\n\n# Parse code\nparser = YuhoParser()\nast = parser.parse_file('statute.yh')\n\n# Generate Mermaid diagram\ntranspiler = MermaidTranspiler()\ndiagram = transpiler.transpile_to_flowchart(ast)\n\n# Save to file\nwith open('diagram.mmd', 'w') as f:\n    f.write(diagram)\n</code></pre>"},{"location":"api/parser/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/parser/#parser-performance","title":"Parser Performance","text":"<ul> <li>Time Complexity: O(n) where n = source code length</li> <li>Memory: O(m) where m = AST node count</li> <li>Typical Speed: ~1000 lines/second on modern hardware</li> </ul>"},{"location":"api/parser/#optimization-tips","title":"Optimization Tips","text":"<pre><code># 1. Reuse parser instance\nparser = YuhoParser()  # Create once\nfor file in files:\n    ast = parser.parse_file(file)  # Reuse\n\n# 2. Parse large files in chunks (if streaming supported in future)\n# Currently, parse entire file at once\n\n# 3. Cache parsed results\nfrom functools import lru_cache\n\n@lru_cache(maxsize=100)\ndef parse_cached(filepath):\n    parser = YuhoParser()\n    return parser.parse_file(filepath)\n</code></pre>"},{"location":"api/parser/#error-messages","title":"Error Messages","text":"<p>The parser provides detailed error messages:</p>"},{"location":"api/parser/#syntax-error-example","title":"Syntax Error Example","text":"<pre><code>parser = YuhoParser()\ntry:\n    parser.parse(\"int x = 42;\")  # Wrong operator\nexcept SyntaxError as e:\n    # Error message will indicate:\n    # - What was expected\n    # - What was found\n    # - Line and column number\n    print(e)\n</code></pre>"},{"location":"api/parser/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/parser/#custom-error-handling","title":"Custom Error Handling","text":"<pre><code>from yuho_v3.parser import YuhoParser\nfrom yuho_v3.exceptions import YuhoSyntaxError, SourceLocation\n\ndef parse_with_custom_errors(code, filename=None):\n    \"\"\"Parse with custom error handling\"\"\"\n    parser = YuhoParser()\n\n    try:\n        return parser.parse(code)\n    except SyntaxError as e:\n        # Convert to custom error type\n        error = YuhoSyntaxError(\n            message=str(e),\n            location=SourceLocation(line=1, column=1, filename=filename),\n            suggestion=\"Check your syntax - did you use := for assignment?\"\n        )\n        raise error\n</code></pre>"},{"location":"api/parser/#batch-processing","title":"Batch Processing","text":"<pre><code>from yuho_v3.parser import YuhoParser\nfrom concurrent.futures import ThreadPoolExecutor\nfrom pathlib import Path\n\ndef parse_file_safe(filepath):\n    \"\"\"Parse file and return result tuple\"\"\"\n    parser = YuhoParser()\n    try:\n        ast = parser.parse_file(filepath)\n        return (filepath, ast, None)\n    except Exception as e:\n        return (filepath, None, e)\n\ndef parse_directory_parallel(directory, max_workers=4):\n    \"\"\"Parse all files in directory in parallel\"\"\"\n    files = list(Path(directory).glob('*.yh'))\n\n    with ThreadPoolExecutor(max_workers=max_workers) as executor:\n        results = list(executor.map(parse_file_safe, files))\n\n    return results\n</code></pre>"},{"location":"api/parser/#see-also","title":"See Also","text":"<ul> <li>AST Nodes Reference</li> <li>Lexer Reference</li> <li>Semantic Analyzer Reference</li> <li>Architecture Overview</li> </ul>"},{"location":"api/parser/#source-code","title":"Source Code","text":"<p>Location: <code>yuho_v3/parser.py</code></p> <p>View on GitHub: parser.py</p>"},{"location":"cli/commands/","title":"CLI Commands Reference","text":"<p>Complete reference for all Yuho command-line interface commands.</p>"},{"location":"cli/commands/#overview","title":"Overview","text":"<p>Yuho provides a comprehensive CLI for all operations:</p> <pre><code>yuho [COMMAND] [OPTIONS] [ARGUMENTS]\n</code></pre>"},{"location":"cli/commands/#commands","title":"Commands","text":""},{"location":"cli/commands/#yuho-check","title":"<code>yuho check</code>","text":"<p>Validate Yuho source files for syntax and semantic correctness.</p> <p>Usage: <pre><code>yuho check &lt;file_path&gt; [OPTIONS]\n</code></pre></p> <p>Arguments: - <code>file_path</code> - Path to the <code>.yh</code> file to check (required)</p> <p>Options: - <code>--verbose</code>, <code>-v</code> - Show detailed output including AST structure</p> <p>Examples: <pre><code># Basic syntax check\nyuho check example.yh\n\n# Check with verbose output\nyuho check example.yh --verbose\n\n# Check file in subdirectory\nyuho check example/cheating/cheating_illustration_A.yh\n</code></pre></p> <p>Output: - \u2713 Success: Shows syntax and semantic validation passed - \u2717 Error: Shows detailed error messages with suggestions</p>"},{"location":"cli/commands/#yuho-draw","title":"<code>yuho draw</code>","text":"<p>Generate Mermaid diagrams from Yuho source files.</p> <p>Usage: <pre><code>yuho draw &lt;file_path&gt; [OPTIONS]\n</code></pre></p> <p>Arguments: - <code>file_path</code> - Path to the <code>.yh</code> file (required)</p> <p>Options: - <code>--output</code>, <code>-o</code> - Output file path (default: stdout) - <code>--format</code>, <code>-f</code> - Diagram format: <code>flowchart</code> or <code>mindmap</code> (default: <code>flowchart</code>)</p> <p>Examples: <pre><code># Generate flowchart to stdout\nyuho draw example.yh\n\n# Generate flowchart to file\nyuho draw example.yh --format flowchart -o diagram.mmd\n\n# Generate mindmap\nyuho draw example.yh --format mindmap -o mindmap.mmd\n\n# Short form\nyuho draw example.yh -f flowchart -o output.mmd\n</code></pre></p> <p>Output Formats:</p> <p>Flowchart - Shows control flow and logic: <pre><code>yuho draw cheating.yh -f flowchart -o cheating_flow.mmd\n</code></pre></p> <p>Mindmap - Shows hierarchical structure: <pre><code>yuho draw cheating.yh -f mindmap -o cheating_mind.mmd\n</code></pre></p>"},{"location":"cli/commands/#yuho-alloy","title":"<code>yuho alloy</code>","text":"<p>Generate Alloy specifications for formal verification.</p> <p>Usage: <pre><code>yuho alloy &lt;file_path&gt; [OPTIONS]\n</code></pre></p> <p>Arguments: - <code>file_path</code> - Path to the <code>.yh</code> file (required)</p> <p>Options: - <code>--output</code>, <code>-o</code> - Output file path (default: stdout)</p> <p>Examples: <pre><code># Generate Alloy spec to stdout\nyuho alloy example.yh\n\n# Save to file\nyuho alloy example.yh -o specification.als\n\n# Generate from legal example\nyuho alloy example/cheating/s415_cheating_definition.yh -o cheating.als\n</code></pre></p> <p>Output: Generates an Alloy specification including: - Signatures from struct definitions - Predicates from match-case logic - Facts from constraints - Run commands for verification</p>"},{"location":"cli/commands/#yuho-draft","title":"<code>yuho draft</code>","text":"<p>Create a new Yuho file template with basic structure.</p> <p>Usage: <pre><code>yuho draft &lt;struct_name&gt; [OPTIONS]\n</code></pre></p> <p>Arguments: - <code>struct_name</code> - Name of the main struct (required)</p> <p>Options: - <code>--output</code>, <code>-o</code> - Output file path (default: <code>&lt;struct_name&gt;.yh</code>)</p> <p>Examples: <pre><code># Create template with default filename\nyuho draft Theft\n# Creates: theft.yh\n\n# Create with custom filename\nyuho draft Contract -o my_contract.yh\n\n# Create for legal concept\nyuho draft CriminalBreach -o criminal_breach.yh\n</code></pre></p> <p>Generated Template: <pre><code>// Yuho v3.0 - Generated template for StructName\n\nstruct StructName {\n    // Add your fields here\n    // Example:\n    // accused: string,\n    // action: string,\n    // victim: string,\n    // consequence: ConsequenceType,\n}\n\n// Add match-case logic here\n// Example:\n// match {\n//     case condition := consequence result;\n//     case _ := consequence pass;\n// }\n</code></pre></p>"},{"location":"cli/commands/#yuho-how","title":"<code>yuho how</code>","text":"<p>Display help and usage examples.</p> <p>Usage: <pre><code>yuho how\n</code></pre></p> <p>Output: Shows comprehensive help including: - Common usage examples - File structure guidelines - Available types - Links to documentation</p> <p>Example: <pre><code>yuho how\n</code></pre></p>"},{"location":"cli/commands/#yuho-repl","title":"<code>yuho-repl</code>","text":"<p>Start the interactive Yuho REPL (Read-Eval-Print Loop).</p> <p>Usage: <pre><code>yuho-repl\n</code></pre></p> <p>REPL Commands:</p> Command Description <code>help</code> Show REPL help <code>history</code> Show command history <code>clear</code> Clear screen <code>load &lt;file&gt;</code> Load and parse a file <code>mermaid</code> Generate Mermaid from last input <code>alloy</code> Generate Alloy from last input <code>exit</code>, <code>quit</code> Exit REPL <p>Examples: <pre><code># Start REPL\nyuho-repl\n\n# In REPL:\nyuho&gt; struct Person { string name, int age }\n\u2713 Valid Yuho code\n\nyuho&gt; int x := 42;\n\u2713 Valid Yuho code\n\nyuho&gt; load example.yh\n\u2713 Successfully loaded example.yh\n\nyuho&gt; mermaid\n[Shows Mermaid diagram]\n\nyuho&gt; help\n[Shows REPL commands]\n\nyuho&gt; exit\n</code></pre></p>"},{"location":"cli/commands/#yuho-version","title":"<code>yuho --version</code>","text":"<p>Display Yuho version information.</p> <p>Usage: <pre><code>yuho --version\n</code></pre></p> <p>Output: <pre><code>yuho, version 3.0.0\n</code></pre></p>"},{"location":"cli/commands/#yuho-help","title":"<code>yuho --help</code>","text":"<p>Display help information for all commands.</p> <p>Usage: <pre><code>yuho --help\n\n# Or for specific command\nyuho check --help\nyuho draw --help\nyuho alloy --help\n</code></pre></p>"},{"location":"cli/commands/#common-workflows","title":"Common Workflows","text":""},{"location":"cli/commands/#workflow-1-check-and-visualize","title":"Workflow 1: Check and Visualize","text":"<pre><code># 1. Check file is valid\nyuho check offense.yh\n\n# 2. Generate flowchart\nyuho draw offense.yh -f flowchart -o offense_flow.mmd\n\n# 3. Generate mindmap\nyuho draw offense.yh -f mindmap -o offense_mind.mmd\n\n# 4. Generate Alloy spec for verification\nyuho alloy offense.yh -o offense.als\n</code></pre>"},{"location":"cli/commands/#workflow-2-create-new-statute","title":"Workflow 2: Create New Statute","text":"<pre><code># 1. Create template\nyuho draft Theft -o theft.yh\n\n# 2. Edit the file (add fields and logic)\nvim theft.yh\n\n# 3. Check for errors\nyuho check theft.yh\n\n# 4. Generate diagrams\nyuho draw theft.yh -f flowchart -o theft_diagram.mmd\n</code></pre>"},{"location":"cli/commands/#workflow-3-interactive-development","title":"Workflow 3: Interactive Development","text":"<pre><code># 1. Start REPL\nyuho-repl\n\n# 2. Try out syntax interactively\nyuho&gt; struct Test { string field }\n\n# 3. Load a file to test\nyuho&gt; load example.yh\n\n# 4. Generate output\nyuho&gt; mermaid\n</code></pre>"},{"location":"cli/commands/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Success 1 Syntax error 2 Semantic error 3 File not found 4 Invalid arguments"},{"location":"cli/commands/#environment-variables","title":"Environment Variables","text":"<p>Currently, Yuho does not use environment variables, but future versions may support:</p> <ul> <li><code>YUHO_CONFIG</code> - Path to configuration file</li> <li><code>YUHO_LOG_LEVEL</code> - Logging level (DEBUG, INFO, WARNING, ERROR)</li> </ul>"},{"location":"cli/commands/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"cli/commands/#batch-processing","title":"Batch Processing","text":"<pre><code># Check all files in a directory\nfor file in example/cheating/*.yh; do\n    yuho check \"$file\"\ndone\n\n# Generate diagrams for all files\nfor file in *.yh; do\n    yuho draw \"$file\" -f flowchart -o \"${file%.yh}.mmd\"\ndone\n</code></pre>"},{"location":"cli/commands/#piping-output","title":"Piping Output","text":"<pre><code># Check and save results\nyuho check example.yh &gt; check_results.txt 2&gt;&amp;1\n\n# Generate and view immediately\nyuho draw example.yh | less\n</code></pre>"},{"location":"cli/commands/#using-with-git-hooks","title":"Using with Git Hooks","text":"<pre><code># Pre-commit hook to check all .yh files\n#!/bin/bash\nfor file in $(git diff --cached --name-only --diff-filter=ACM | grep '\\.yh$'); do\n    yuho check \"$file\" || exit 1\ndone\n</code></pre>"},{"location":"cli/commands/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/commands/#command-not-found","title":"Command Not Found","text":"<pre><code># Ensure Yuho is installed\npip install -e .\n\n# Check installation\nwhich yuho\nyuho --version\n</code></pre>"},{"location":"cli/commands/#file-not-found-errors","title":"File Not Found Errors","text":"<pre><code># Use absolute paths\nyuho check /full/path/to/file.yh\n\n# Or navigate to directory\ncd /path/to/files\nyuho check file.yh\n</code></pre>"},{"location":"cli/commands/#import-errors","title":"Import Errors","text":"<pre><code># Ensure dependencies are installed\npip install -r requirements.txt\n\n# Reinstall Yuho\npip install -e . --force-reinstall\n</code></pre>"},{"location":"cli/commands/#see-also","title":"See Also","text":"<ul> <li>REPL Guide</li> <li>Quick Start</li> <li>Examples</li> <li>Language Syntax</li> </ul>"},{"location":"development/architecture/","title":"Architecture","text":"<p>This document describes the architecture and design of Yuho v3.0.</p>"},{"location":"development/architecture/#system-overview","title":"System Overview","text":"<p>Yuho is a domain-specific language (DSL) compiler/transpiler that processes legal statute representations and outputs various formats for visualization and verification.</p>"},{"location":"development/architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    A[Yuho Source Code .yh] --&gt; B[Lexer]\n    B --&gt; C[Parser]\n    C --&gt; D[AST]\n    D --&gt; E[Semantic Analyzer]\n    E --&gt; F{Valid?}\n    F --&gt;|Yes| G[Transpilers]\n    F --&gt;|No| H[Error Reporter]\n    G --&gt; I[Mermaid Diagrams]\n    G --&gt; J[Alloy Specifications]\n    H --&gt; K[User Feedback]</code></pre>"},{"location":"development/architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"development/architecture/#1-lexer-lexerpy","title":"1. Lexer (<code>lexer.py</code>)","text":"<p>Purpose: Tokenization and initial parsing using Lark parser</p> <p>Responsibilities: - Read Yuho source code - Tokenize input using grammar rules - Generate parse tree - Report syntax errors</p> <p>Technology: Lark (LALR parser generator)</p> <pre><code>class YuhoLexer:\n    def __init__(self):\n        # Load grammar from grammar.lark\n\n    def parse(self, text: str) -&gt; Tree:\n        # Parse text into Lark parse tree\n</code></pre>"},{"location":"development/architecture/#2-parser-parserpy","title":"2. Parser (<code>parser.py</code>)","text":"<p>Purpose: Transform parse trees into Abstract Syntax Trees (AST)</p> <p>Responsibilities: - Transform Lark parse trees into Yuho AST nodes - Handle all language constructs - Maintain source location information</p> <p>Key Classes: - <code>YuhoTransformer</code>: Lark transformer for AST generation - <code>YuhoParser</code>: Main parser interface</p> <pre><code>class YuhoParser:\n    def parse(self, text: str) -&gt; Program:\n        # Parse text into Yuho AST\n\n    def parse_file(self, filepath: str) -&gt; Program:\n        # Parse file into AST\n</code></pre>"},{"location":"development/architecture/#3-ast-nodes-ast_nodespy","title":"3. AST Nodes (<code>ast_nodes.py</code>)","text":"<p>Purpose: Define all AST node types</p> <p>Node Hierarchy: <pre><code>ASTNode (base)\n\u251c\u2500\u2500 Program\n\u251c\u2500\u2500 Statement\n\u2502   \u251c\u2500\u2500 Declaration\n\u2502   \u251c\u2500\u2500 Assignment\n\u2502   \u251c\u2500\u2500 StructDefinition\n\u2502   \u251c\u2500\u2500 FunctionDefinition\n\u2502   \u251c\u2500\u2500 MatchCase\n\u2502   \u2514\u2500\u2500 PassStatement\n\u251c\u2500\u2500 Expression\n\u2502   \u251c\u2500\u2500 Literal\n\u2502   \u251c\u2500\u2500 Identifier\n\u2502   \u251c\u2500\u2500 BinaryOperation\n\u2502   \u251c\u2500\u2500 UnaryOperation\n\u2502   \u2514\u2500\u2500 FunctionCall\n\u2514\u2500\u2500 TypeNode\n</code></pre></p> <p>Design Pattern: Dataclasses for immutability and clarity</p>"},{"location":"development/architecture/#4-semantic-analyzer-semantic_analyzerpy","title":"4. Semantic Analyzer (<code>semantic_analyzer.py</code>)","text":"<p>Purpose: Type checking, scope analysis, and semantic validation</p> <p>Responsibilities: - Type checking for all expressions - Scope resolution and variable tracking - Struct member validation - Function signature verification - Error collection and reporting</p> <p>Key Classes: - <code>SymbolTable</code>: Manages scopes and symbols - <code>SemanticAnalyzer</code>: Main analysis engine</p> <pre><code>class SemanticAnalyzer:\n    def analyze(self, program: Program) -&gt; List[str]:\n        # Analyze AST and return errors\n</code></pre>"},{"location":"development/architecture/#5-transpilers","title":"5. Transpilers","text":""},{"location":"development/architecture/#mermaid-transpiler-transpilersmermaid_transpilerpy","title":"Mermaid Transpiler (<code>transpilers/mermaid_transpiler.py</code>)","text":"<p>Purpose: Generate Mermaid diagram specifications</p> <p>Output Formats: - Flowcharts: Representing control flow and logic - Mindmaps: Representing hierarchical structure</p> <p>Algorithm: 1. Traverse AST depth-first 2. Generate unique node IDs 3. Build Mermaid syntax for each node type 4. Connect nodes based on relationships</p>"},{"location":"development/architecture/#alloy-transpiler-transpilersalloy_transpilerpy","title":"Alloy Transpiler (<code>transpilers/alloy_transpiler.py</code>)","text":"<p>Purpose: Generate Alloy specifications for formal verification</p> <p>Output Components: - Signatures: From struct definitions - Predicates: From match-case logic - Facts: From constraints - Run commands: For verification</p> <p>Algorithm: 1. Convert structs to Alloy signatures 2. Convert match-case to predicates 3. Map Yuho types to Alloy types 4. Generate verification commands</p>"},{"location":"development/architecture/#6-cli-climainpy","title":"6. CLI (<code>cli/main.py</code>)","text":"<p>Purpose: Command-line interface for all Yuho operations</p> <p>Commands: - <code>check</code>: Validate Yuho files - <code>draw</code>: Generate diagrams - <code>alloy</code>: Generate Alloy specs - <code>draft</code>: Create templates - <code>how</code>: Show examples</p> <p>Technology: Click framework for CLI</p>"},{"location":"development/architecture/#7-repl-replpy","title":"7. REPL (<code>repl.py</code>)","text":"<p>Purpose: Interactive shell for Yuho</p> <p>Features: - Live code evaluation - Command history - File loading - Inline transpilation</p>"},{"location":"development/architecture/#data-flow","title":"Data Flow","text":""},{"location":"development/architecture/#typical-compilation-pipeline","title":"Typical Compilation Pipeline","text":"<pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Lexer\n    participant Parser\n    participant Analyzer\n    participant Transpiler\n\n    User-&gt;&gt;CLI: yuho check file.yh\n    CLI-&gt;&gt;Lexer: Read file\n    Lexer-&gt;&gt;Parser: Parse tree\n    Parser-&gt;&gt;Analyzer: AST\n    Analyzer-&gt;&gt;Analyzer: Type check\n    Analyzer-&gt;&gt;CLI: Errors (if any)\n    CLI-&gt;&gt;User: Results</code></pre>"},{"location":"development/architecture/#transpilation-pipeline","title":"Transpilation Pipeline","text":"<pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Parser\n    participant Transpiler\n\n    User-&gt;&gt;CLI: yuho draw file.yh\n    CLI-&gt;&gt;Parser: Parse file\n    Parser-&gt;&gt;CLI: AST\n    CLI-&gt;&gt;Transpiler: Transpile AST\n    Transpiler-&gt;&gt;CLI: Mermaid code\n    CLI-&gt;&gt;User: Output</code></pre>"},{"location":"development/architecture/#design-principles","title":"Design Principles","text":""},{"location":"development/architecture/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<ul> <li>Each component has a single, well-defined responsibility</li> <li>Clear interfaces between components</li> <li>Minimal coupling</li> </ul>"},{"location":"development/architecture/#2-immutability","title":"2. Immutability","text":"<ul> <li>AST nodes are immutable dataclasses</li> <li>Transformations create new structures</li> <li>Easier reasoning and testing</li> </ul>"},{"location":"development/architecture/#3-type-safety","title":"3. Type Safety","text":"<ul> <li>Strong typing throughout</li> <li>Python type hints</li> <li>Runtime type checking in semantic analyzer</li> </ul>"},{"location":"development/architecture/#4-error-handling","title":"4. Error Handling","text":"<ul> <li>Collect all errors, don't fail fast</li> <li>Provide helpful error messages</li> <li>Include source location information</li> </ul>"},{"location":"development/architecture/#5-extensibility","title":"5. Extensibility","text":"<ul> <li>Easy to add new transpilers</li> <li>Plugin architecture possible</li> <li>Well-documented interfaces</li> </ul>"},{"location":"development/architecture/#testing-strategy","title":"Testing Strategy","text":""},{"location":"development/architecture/#test-pyramid","title":"Test Pyramid","text":"<pre><code>          /\\\n         /  \\    E2E Tests\n        /----\\\n       /      \\  Integration Tests  \n      /--------\\\n     /          \\ Unit Tests\n    /------------\\\n</code></pre> <p>Unit Tests: Individual component testing - Lexer tokenization - Parser AST generation - Semantic analysis rules - Transpiler output</p> <p>Integration Tests: Component interaction - Full parse \u2192 analyze pipeline - Parse \u2192 transpile pipeline - File I/O operations</p> <p>E2E Tests: Complete workflows - Real example files - CLI commands - Error scenarios</p>"},{"location":"development/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"development/architecture/#current-optimizations","title":"Current Optimizations","text":"<ul> <li>LALR parsing (efficient)</li> <li>Single-pass semantic analysis</li> <li>Lazy evaluation where possible</li> </ul>"},{"location":"development/architecture/#future-optimizations","title":"Future Optimizations","text":"<ul> <li>Caching of parsed files</li> <li>Parallel analysis of independent files</li> <li>Incremental compilation</li> </ul>"},{"location":"development/architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"development/architecture/#input-validation","title":"Input Validation","text":"<ul> <li>Grammar enforces syntax constraints</li> <li>Semantic analyzer validates types</li> <li>File path sanitization in CLI</li> </ul>"},{"location":"development/architecture/#resource-limits","title":"Resource Limits","text":"<ul> <li>Parser timeout for large files</li> <li>Memory limits for AST size</li> <li>Stack depth limits for recursion</li> </ul>"},{"location":"development/architecture/#dependency-security","title":"Dependency Security","text":"<ul> <li>Regular vulnerability scanning</li> <li>Minimal dependency surface</li> <li>Pinned versions in production</li> </ul>"},{"location":"development/architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"development/architecture/#standalone-cli","title":"Standalone CLI","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   User System   \u2502\n\u2502                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502   Yuho    \u2502  \u2502\n\u2502  \u2502    CLI    \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                 \u2502\n\u2502  .yh files      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/architecture/#docker-container","title":"Docker Container","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Docker Container   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Yuho Runtime \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502         \u2502           \u2502\n\u2502    \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502    \u2502 Volumes \u2502      \u2502\n\u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/architecture/#future-architecture-enhancements","title":"Future Architecture Enhancements","text":""},{"location":"development/architecture/#language-server-protocol-lsp","title":"Language Server Protocol (LSP)","text":"<ul> <li>Real-time syntax checking</li> <li>Auto-completion</li> <li>Go-to-definition</li> </ul>"},{"location":"development/architecture/#web-interface","title":"Web Interface","text":"<ul> <li>Browser-based editor</li> <li>Live preview</li> <li>Shared examples</li> </ul>"},{"location":"development/architecture/#plugin-system","title":"Plugin System","text":"<ul> <li>Custom transpilers</li> <li>Custom validators</li> <li>Extension hooks</li> </ul>"},{"location":"development/architecture/#references","title":"References","text":"<ul> <li>Lark Parser Documentation</li> <li>AST Design Patterns</li> <li>Compiler Design</li> </ul>"},{"location":"examples/criminal-law/","title":"Criminal Law Examples","text":"<p>Real-world examples of representing Singapore Criminal Law statutes in Yuho.</p>"},{"location":"examples/criminal-law/#overview","title":"Overview","text":"<p>These examples demonstrate how Yuho represents actual legal statutes from Singapore's Penal Code. Each example shows the progression from legal text to Yuho code to visual diagrams.</p>"},{"location":"examples/criminal-law/#example-1-cheating-section-415","title":"Example 1: Cheating (Section 415)","text":""},{"location":"examples/criminal-law/#legal-text","title":"Legal Text","text":"<p>Section 415 of the Penal Code:</p> <p>Whoever, by deceiving any person, fraudulently or dishonestly induces the person so deceived to deliver any property to any person, or to consent that any person shall retain any property, or intentionally induces the person so deceived to do or omit to do anything which he would not do or omit if he were not so deceived, and which act or omission causes or is likely to cause damage or harm to that person in body, mind, reputation or property, is said to \"cheat\".</p>"},{"location":"examples/criminal-law/#yuho-representation","title":"Yuho Representation","text":"<pre><code>// Section 415 - Cheating\nstruct Cheating {\n    string accused,\n    string victim,\n    string action,\n    bool deception,\n    bool fraudulent,\n    bool dishonest,\n    bool inducedDeliveryOfProperty,\n    bool inducedConsentToRetain,\n    bool inducedActionOrOmission,\n    bool causesDamageOrHarm,\n    string damageType  // body, mind, reputation, or property\n}\n\nmatch {\n    case deception &amp;&amp; (fraudulent || dishonest) &amp;&amp; \n         (inducedDeliveryOfProperty || inducedConsentToRetain || inducedActionOrOmission) &amp;&amp;\n         causesDamageOrHarm := \n        consequence \"guilty of cheating under Section 415\";\n\n    case _ := \n        consequence \"not guilty of cheating\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#breaking-down-the-elements","title":"Breaking Down the Elements","text":"<p>The offense of cheating requires:</p> <ol> <li>Deception: The accused must deceive someone</li> <li>Mental Element: Either fraudulent OR dishonest</li> <li>Inducement (any one of):</li> <li>Deliver property</li> <li>Consent to retain property</li> <li>Do or omit to do something</li> <li>Harm: Causes or likely to cause damage/harm</li> </ol>"},{"location":"examples/criminal-law/#illustration-a-false-government-service","title":"Illustration A: False Government Service","text":"<p>Legal Text:</p> <p>\"A, by falsely pretending to be in the Government service, intentionally deceives Z, and thus dishonestly induces Z to let him have on credit goods for which he does not mean to pay. A cheats.\"</p> <p>Yuho Code: <pre><code>/*\nIllustration A - Cheating by false pretense\nA falsely claims to be in government service to get goods on credit\n*/\n\nstruct CheatingIllustrationA {\n    string accused := \"A\",\n    string victim := \"Z\",\n    string action := \"falsely pretending to be in Government service\",\n    bool deception := TRUE,\n    bool dishonest := TRUE,\n    bool inducedConsentToRetain := TRUE,\n    bool causesDamageOrHarm := TRUE,\n    string damageType := \"property\"\n}\n\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; inducedConsentToRetain &amp;&amp; causesDamageOrHarm :=\n        consequence \"A cheats\";\n    case _ :=\n        consequence \"not cheating\";\n}\n</code></pre></p> <p>Key Points: - A deceived Z by false pretense - A acted dishonestly (no intention to pay) - Z was induced to give goods on credit - Z suffered property damage (goods without payment)</p>"},{"location":"examples/criminal-law/#example-2-theft-section-378","title":"Example 2: Theft (Section 378)","text":""},{"location":"examples/criminal-law/#legal-text_1","title":"Legal Text","text":"<p>Section 378 of the Penal Code:</p> <p>Whoever, intending to take dishonestly any movable property out of the possession of any person without that person's consent, moves that property in order to such taking, is said to commit theft.</p>"},{"location":"examples/criminal-law/#yuho-representation_1","title":"Yuho Representation","text":"<pre><code>// Section 378 - Theft\nstruct Theft {\n    string accused,\n    string victim,\n    string property,\n    bool dishonestIntention,\n    bool movableProperty,\n    bool outOfPossession,\n    bool withoutConsent,\n    bool movedProperty\n}\n\nmatch {\n    case dishonestIntention &amp;&amp; movableProperty &amp;&amp; \n         outOfPossession &amp;&amp; withoutConsent &amp;&amp; movedProperty :=\n        consequence \"guilty of theft under Section 378\";\n\n    case _ :=\n        consequence \"not guilty of theft\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#elements-of-theft","title":"Elements of Theft","text":"<ol> <li>Dishonest Intention: Intent to take dishonestly</li> <li>Movable Property: Property must be movable</li> <li>Out of Possession: Takes from another's possession</li> <li>Without Consent: No permission from owner</li> <li>Movement: Actually moves the property</li> </ol>"},{"location":"examples/criminal-law/#simple-example","title":"Simple Example","text":"<pre><code>// Simple theft example\nstruct SimpleTheft {\n    string accused := \"John\",\n    string victim := \"Shop Owner\",\n    string property := \"Mobile phone\",\n    bool dishonestIntention := TRUE,\n    bool movableProperty := TRUE,\n    bool withoutConsent := TRUE,\n    bool movedProperty := TRUE\n}\n\nmatch {\n    case dishonestIntention &amp;&amp; movableProperty &amp;&amp; withoutConsent &amp;&amp; movedProperty :=\n        consequence \"John commits theft\";\n    case _ :=\n        consequence \"not theft\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#example-3-criminal-trespass-section-441","title":"Example 3: Criminal Trespass (Section 441)","text":""},{"location":"examples/criminal-law/#legal-text_2","title":"Legal Text","text":"<p>Section 441 of the Penal Code:</p> <p>Whoever enters into or upon property in the possession of another with intent to commit an offence or to intimidate, insult or annoy any person in possession of such property, or having lawfully entered into or upon such property, unlawfully remains there with intent thereby to intimidate, insult or annoy any such person, or with intent to commit an offence, is said to commit \"criminal trespass\".</p>"},{"location":"examples/criminal-law/#yuho-representation_2","title":"Yuho Representation","text":"<pre><code>// Section 441 - Criminal Trespass\nstruct CriminalTrespass {\n    string accused,\n    string victim,\n    string property,\n    bool enteredProperty,\n    bool unlawfulEntry,\n    bool unlawfulRemaining,\n    bool intentToCommitOffence,\n    bool intentToIntimidate,\n    bool intentToInsult,\n    bool intentToAnnoy\n}\n\nmatch {\n    case (enteredProperty &amp;&amp; \n         (intentToCommitOffence || intentToIntimidate || intentToInsult || intentToAnnoy)) :=\n        consequence \"guilty of criminal trespass - unlawful entry\";\n\n    case (unlawfulRemaining &amp;&amp; \n         (intentToCommitOffence || intentToIntimidate || intentToInsult || intentToAnnoy)) :=\n        consequence \"guilty of criminal trespass - unlawful remaining\";\n\n    case _ :=\n        consequence \"not guilty of criminal trespass\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#two-forms-of-criminal-trespass","title":"Two Forms of Criminal Trespass","text":"<p>Form 1: Unlawful Entry - Enters property - With specific intent (offence/intimidate/insult/annoy)</p> <p>Form 2: Unlawful Remaining - Lawfully entered initially - Unlawfully remains - With specific intent</p>"},{"location":"examples/criminal-law/#example-4-extortion-section-383","title":"Example 4: Extortion (Section 383)","text":""},{"location":"examples/criminal-law/#legal-text_3","title":"Legal Text","text":"<p>Section 383 of the Penal Code:</p> <p>Whoever intentionally puts any person in fear of any harm to that person or to any other, and thereby dishonestly induces the person so put in fear to deliver to any person any property or valuable security, or anything signed or sealed which may be converted into a valuable security, commits \"extortion\".</p>"},{"location":"examples/criminal-law/#yuho-representation_3","title":"Yuho Representation","text":"<pre><code>// Section 383 - Extortion\nstruct Extortion {\n    string accused,\n    string victim,\n    bool intentionallyPutInFear,\n    bool fearOfHarm,\n    bool dishonestlyInduced,\n    bool deliveredProperty,\n    bool deliveredValuableSecurity\n}\n\nmatch {\n    case intentionallyPutInFear &amp;&amp; fearOfHarm &amp;&amp; dishonestlyInduced &amp;&amp;\n         (deliveredProperty || deliveredValuableSecurity) :=\n        consequence \"guilty of extortion under Section 383\";\n\n    case _ :=\n        consequence \"not guilty of extortion\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#elements-of-extortion","title":"Elements of Extortion","text":"<ol> <li>Intentional Fear: Intentionally puts person in fear</li> <li>Fear of Harm: Fear of harm to that person or another</li> <li>Dishonest Inducement: Dishonestly induces the frightened person</li> <li>Delivery: Victim delivers property or valuable security</li> </ol>"},{"location":"examples/criminal-law/#example-scenario","title":"Example Scenario","text":"<pre><code>// Extortion example\nstruct ExtortionCase {\n    string accused := \"Gangster\",\n    string victim := \"Shopkeeper\",\n    bool intentionallyPutInFear := TRUE,\n    bool fearOfHarm := TRUE,\n    bool dishonestlyInduced := TRUE,\n    bool deliveredProperty := TRUE  // Protection money\n}\n\nmatch {\n    case intentionallyPutInFear &amp;&amp; fearOfHarm &amp;&amp; \n         dishonestlyInduced &amp;&amp; deliveredProperty :=\n        consequence \"guilty of extortion\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#working-with-examples","title":"Working with Examples","text":""},{"location":"examples/criminal-law/#check-an-example","title":"Check an Example","text":"<pre><code># Validate the cheating example\nyuho check example/cheating/cheating_illustration_A.yh\n</code></pre>"},{"location":"examples/criminal-law/#visualize-an-example","title":"Visualize an Example","text":"<pre><code># Generate flowchart\nyuho draw example/cheating/s415_cheating_definition.yh -f flowchart -o cheating_flow.mmd\n\n# Generate mindmap\nyuho draw example/cheating/s415_cheating_definition.yh -f mindmap -o cheating_mind.mmd\n</code></pre>"},{"location":"examples/criminal-law/#verify-an-example","title":"Verify an Example","text":"<pre><code># Generate Alloy specification\nyuho alloy example/cheating/s415_cheating_definition.yh -o cheating.als\n\n# Verify with Alloy Analyzer (if installed)\njava -jar alloy.jar cheating.als\n</code></pre>"},{"location":"examples/criminal-law/#legal-reasoning-patterns","title":"Legal Reasoning Patterns","text":""},{"location":"examples/criminal-law/#pattern-1-conjunctive-requirements","title":"Pattern 1: Conjunctive Requirements","text":"<p>When ALL elements must be present:</p> <pre><code>match {\n    case element1 &amp;&amp; element2 &amp;&amp; element3 := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>Example: Theft requires ALL of: dishonest intention, movable property, without consent, movement.</p>"},{"location":"examples/criminal-law/#pattern-2-disjunctive-requirements","title":"Pattern 2: Disjunctive Requirements","text":"<p>When ANY element is sufficient:</p> <pre><code>match {\n    case element1 || element2 || element3 := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre> <p>Example: Cheating can involve delivery of property OR consent to retain OR induced action/omission.</p>"},{"location":"examples/criminal-law/#pattern-3-nested-conditions","title":"Pattern 3: Nested Conditions","text":"<p>Complex combinations:</p> <pre><code>match {\n    case baseElement &amp;&amp; (option1 || option2 || option3) &amp;&amp; finalElement :=\n        consequence \"guilty\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre> <p>Example: Cheating = deception + (fraudulent OR dishonest) + (one of three inducement types) + harm.</p>"},{"location":"examples/criminal-law/#pattern-4-multiple-consequences","title":"Pattern 4: Multiple Consequences","text":"<p>Different outcomes based on conditions:</p> <pre><code>match {\n    case severeCondition := consequence \"severe punishment\";\n    case moderateCondition := consequence \"moderate punishment\";\n    case minorCondition := consequence \"minor punishment\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#best-practices","title":"Best Practices","text":""},{"location":"examples/criminal-law/#1-clear-naming","title":"1. Clear Naming","text":"<pre><code>// Good: Descriptive names\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool causedHarm\n}\n\n// Avoid: Unclear abbreviations\nstruct Ch {\n    string a,\n    bool d,\n    bool h\n}\n</code></pre>"},{"location":"examples/criminal-law/#2-comments-for-context","title":"2. Comments for Context","text":"<pre><code>// Always include the legal source\n// Section 415 - Cheating\n\n// Explain complex conditions\ncase deception &amp;&amp; dishonest :=\n    // Both deception and dishonesty are required\n    consequence \"guilty\";\n</code></pre>"},{"location":"examples/criminal-law/#3-complete-case-coverage","title":"3. Complete Case Coverage","text":"<pre><code>match {\n    case condition1 := consequence \"result1\";\n    case condition2 := consequence \"result2\";\n    // Always include default case\n    case _ := consequence \"default\";\n}\n</code></pre>"},{"location":"examples/criminal-law/#4-type-safety","title":"4. Type Safety","text":"<pre><code>// Use appropriate types\nstruct Offense {\n    string accused,        // Names are strings\n    int age,              // Age is integer\n    bool guilty,          // Guilt is boolean\n    money fine := $500.00 // Fines are money type\n}\n</code></pre>"},{"location":"examples/criminal-law/#additional-examples","title":"Additional Examples","text":"<p>Explore more examples in the repository:</p> <ul> <li><code>example/cheating/</code> - Multiple cheating scenarios (A through K)</li> <li>See GitHub Repository</li> </ul>"},{"location":"examples/criminal-law/#resources","title":"Resources","text":"<ul> <li>Penal Code of Singapore</li> <li>Language Syntax</li> <li>CLI Commands</li> <li>Transpilers</li> </ul>"},{"location":"examples/criminal-law/#next-steps","title":"Next Steps","text":"<ul> <li>Learn the full syntax</li> <li>Try the quickstart guide</li> <li>Explore match-case patterns</li> <li>Use the CLI effectively</li> </ul>"},{"location":"getting-started/first-program/","title":"Your First Yuho Program","text":"<p>This tutorial will guide you through writing your first Yuho program step by step.</p>"},{"location":"getting-started/first-program/#hello-yuho","title":"Hello, Yuho!","text":"<p>Let's start with a simple example that demonstrates the core concepts.</p>"},{"location":"getting-started/first-program/#step-1-create-the-file","title":"Step 1: Create the File","text":"<p>Create a new file called <code>hello.yh</code>:</p> <pre><code>touch hello.yh\n</code></pre>"},{"location":"getting-started/first-program/#step-2-define-a-struct","title":"Step 2: Define a Struct","text":"<p>Structs are Yuho's primary data structure. Let's define a simple person:</p> <pre><code>// Define a Person struct\nstruct Person {\n    string name,\n    int age,\n    bool isStudent\n}\n</code></pre>"},{"location":"getting-started/first-program/#step-3-create-variables","title":"Step 3: Create Variables","text":"<p>Let's create some variables:</p> <pre><code>// Simple variable declarations\nstring greeting := \"Hello, Yuho!\";\nint year := 2024;\nbool learning := TRUE;\n</code></pre>"},{"location":"getting-started/first-program/#step-4-add-logic-with-match-case","title":"Step 4: Add Logic with Match-Case","text":"<p>Yuho uses match-case for conditional logic:</p> <pre><code>// Check if learning\nmatch {\n    case learning == TRUE := consequence \"Keep learning!\";\n    case _ := consequence \"Start learning!\";\n}\n</code></pre>"},{"location":"getting-started/first-program/#step-5-complete-program","title":"Step 5: Complete Program","text":"<p>Here's the complete <code>hello.yh</code>:</p> <pre><code>// Your first Yuho program\n\n// Define a Person struct\nstruct Person {\n    string name,\n    int age,\n    bool isStudent\n}\n\n// Create variables\nstring greeting := \"Hello, Yuho!\";\nint year := 2024;\nbool learning := TRUE;\n\n// Conditional logic\nmatch {\n    case learning == TRUE := consequence \"Keep learning!\";\n    case _ := consequence \"Start learning!\";\n}\n</code></pre>"},{"location":"getting-started/first-program/#step-6-check-your-program","title":"Step 6: Check Your Program","text":"<p>Validate your program:</p> <pre><code>yuho check hello.yh\n</code></pre> <p>Expected output: <pre><code>\u2713 Syntax check passed\n\u2713 Semantic check passed\n\u2713 hello.yh looks good!\n</code></pre></p>"},{"location":"getting-started/first-program/#step-7-visualize-your-program","title":"Step 7: Visualize Your Program","text":"<p>Generate a flowchart:</p> <pre><code>yuho draw hello.yh --format flowchart -o hello_flow.mmd\n</code></pre> <p>Generate a mindmap:</p> <pre><code>yuho draw hello.yh --format mindmap -o hello_mind.mmd\n</code></pre>"},{"location":"getting-started/first-program/#understanding-the-concepts","title":"Understanding the Concepts","text":""},{"location":"getting-started/first-program/#structs","title":"Structs","text":"<p>Structs define custom data types with named fields:</p> <pre><code>struct StructName {\n    type fieldName,\n    type anotherField\n}\n</code></pre>"},{"location":"getting-started/first-program/#variables","title":"Variables","text":"<p>Variables are declared with type and immutably assigned:</p> <pre><code>type variableName := value;\n</code></pre>"},{"location":"getting-started/first-program/#match-case","title":"Match-Case","text":"<p>Pattern matching for conditional logic:</p> <pre><code>match {\n    case condition := consequence result;\n    case _ := consequence defaultResult;\n}\n</code></pre>"},{"location":"getting-started/first-program/#a-legal-example","title":"A Legal Example","text":"<p>Let's create a more practical legal example in <code>theft.yh</code>:</p> <pre><code>// Simple representation of theft offense\n\nstruct Theft {\n    string accused,\n    string property,\n    bool dishonest,\n    bool movable,\n    bool withoutConsent\n}\n\n// Define the logical requirements\nmatch {\n    case dishonest &amp;&amp; movable &amp;&amp; withoutConsent :=\n        consequence \"guilty of theft\";\n    case dishonest &amp;&amp; movable :=\n        consequence \"additional investigation required\";\n    case _ :=\n        consequence \"not guilty of theft\";\n}\n</code></pre> <p>Check this program:</p> <pre><code>yuho check theft.yh\nyuho draw theft.yh -f flowchart -o theft.mmd\n</code></pre>"},{"location":"getting-started/first-program/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/first-program/#boolean-logic","title":"Boolean Logic","text":"<pre><code>bool conditionA := TRUE;\nbool conditionB := FALSE;\n\nmatch {\n    case conditionA &amp;&amp; conditionB := consequence \"Both true\";\n    case conditionA || conditionB := consequence \"At least one true\";\n    case _ := consequence \"Both false\";\n}\n</code></pre>"},{"location":"getting-started/first-program/#numeric-comparisons","title":"Numeric Comparisons","text":"<pre><code>int age := 25;\n\nmatch {\n    case age &gt;= 18 := consequence \"Adult\";\n    case age &gt;= 13 := consequence \"Teenager\";\n    case _ := consequence \"Child\";\n}\n</code></pre>"},{"location":"getting-started/first-program/#multiple-conditions","title":"Multiple Conditions","text":"<pre><code>bool cond1 := TRUE;\nbool cond2 := TRUE;\nbool cond3 := FALSE;\n\nmatch {\n    case cond1 &amp;&amp; cond2 &amp;&amp; cond3 := consequence \"All true\";\n    case cond1 &amp;&amp; cond2 := consequence \"First two true\";\n    case cond1 := consequence \"Only first true\";\n    case _ := consequence \"None or other combinations\";\n}\n</code></pre>"},{"location":"getting-started/first-program/#next-steps","title":"Next Steps","text":"<p>Now that you've written your first Yuho program:</p> <ol> <li>Learn more about syntax</li> <li>Explore Yuho types</li> <li>Master match-case patterns</li> <li>See real examples</li> </ol>"},{"location":"getting-started/first-program/#exercises","title":"Exercises","text":"<p>Try these exercises to practice:</p> <ol> <li>Create a struct representing a contract with relevant fields</li> <li>Write a match-case that checks multiple conditions</li> <li>Generate both flowchart and mindmap for your program</li> <li>Experiment with different types (money, date, duration)</li> </ol>"},{"location":"getting-started/first-program/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/first-program/#syntax-errors","title":"Syntax Errors","text":"<p>Common mistakes:</p> <pre><code>// Wrong: Using = instead of :=\nint x = 42;  // \u274c\n\n// Correct:\nint x := 42;  // \u2713\n\n// Wrong: Missing semicolon\nint y := 10  // \u274c\n\n// Correct:\nint y := 10;  // \u2713\n\n// Wrong: Wrong struct syntax\nstruct Test {\n    string name: \"value\"  // \u274c\n}\n\n// Correct:\nstruct Test {\n    string name  // \u2713\n}\n</code></pre>"},{"location":"getting-started/first-program/#type-errors","title":"Type Errors","text":"<pre><code>// Wrong: Type mismatch\nint x := \"string\";  // \u274c\n\n// Correct:\nint x := 42;  // \u2713\nstring s := \"string\";  // \u2713\n</code></pre>"},{"location":"getting-started/first-program/#resources","title":"Resources","text":"<ul> <li>Language Reference</li> <li>CLI Commands</li> <li>More Examples</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install Yuho on your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing Yuho, ensure you have:</p> <ul> <li>Python 3.8 or higher</li> <li>pip (Python package manager)</li> <li>Git (for development installation)</li> </ul>"},{"location":"getting-started/installation/#check-python-version","title":"Check Python Version","text":"<pre><code>python --version\n# or\npython3 --version\n</code></pre> <p>You should see output like <code>Python 3.11.x</code> or higher.</p>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":"Production (pip)Development (source)Docker"},{"location":"getting-started/installation/#install-from-pypi-recommended","title":"Install from PyPI (Recommended)","text":"<p>Once published, you can install Yuho directly from PyPI:</p> <pre><code>pip install yuho\n</code></pre> <p>Verify the installation:</p> <pre><code>yuho --version\n</code></pre>"},{"location":"getting-started/installation/#install-from-source","title":"Install from Source","text":"<p>For development or to get the latest features:</p> <ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/gongahkia/yuho.git\ncd yuho\n</code></pre> <ol> <li>Install in editable mode:</li> </ol> <pre><code>pip install -e .\n</code></pre> <p>Or with development dependencies:</p> <pre><code>pip install -r requirements-dev.txt\npip install -e .\n</code></pre> <ol> <li>Verify installation:</li> </ol> <pre><code>yuho --version\n</code></pre>"},{"location":"getting-started/installation/#using-docker","title":"Using Docker","text":"<p>The easiest way to run Yuho without installing Python:</p> <ol> <li>Pull the image (once available):</li> </ol> <pre><code>docker pull yuho:latest\n</code></pre> <p>Or build locally:</p> <pre><code>git clone https://github.com/gongahkia/yuho.git\ncd yuho\ndocker build -t yuho:latest .\n</code></pre> <ol> <li>Run Yuho:</li> </ol> <pre><code># Check a file\ndocker run --rm -v $(pwd):/workspace yuho:latest check example.yh\n\n# Start REPL\ndocker run --rm -it yuho:latest yuho-repl\n</code></pre> <ol> <li>Using docker-compose:</li> </ol> <pre><code># Development environment\ndocker-compose up yuho-dev\n\n# Run tests\ndocker-compose up yuho-test\n\n# Interactive REPL\ndocker-compose run --rm yuho-repl\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify Yuho is working:</p> <pre><code># Check version\nyuho --version\n\n# Get help\nyuho --help\n\n# Try the REPL\nyuho-repl\n</code></pre> <p>You should see output indicating Yuho v3.0.0 or later.</p>"},{"location":"getting-started/installation/#development-setup","title":"Development Setup","text":"<p>If you plan to contribute to Yuho:</p> <ol> <li>Clone and install:</li> </ol> <pre><code>git clone https://github.com/gongahkia/yuho.git\ncd yuho\npip install -r requirements-dev.txt\npip install -e .\n</code></pre> <ol> <li>Install pre-commit hooks:</li> </ol> <pre><code>pre-commit install\n</code></pre> <ol> <li>Run tests:</li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Check code quality:</li> </ol> <pre><code>black yuho_v3/\nflake8 yuho_v3/\nmypy yuho_v3/\n</code></pre>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#linux","title":"Linux","text":"<p>Installation should work out of the box on most distributions.</p>"},{"location":"getting-started/installation/#macos","title":"macOS","text":"<p>Use Homebrew to install Python if needed:</p> <pre><code>brew install python@3.11\n</code></pre>"},{"location":"getting-started/installation/#windows","title":"Windows","text":"<ol> <li>Install Python from python.org</li> <li>Ensure \"Add Python to PATH\" is checked during installation</li> <li>Use PowerShell or Command Prompt for commands</li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#command-not-found","title":"Command not found","text":"<p>If <code>yuho</code> command is not found after installation:</p> <ol> <li>Check if Python scripts directory is in PATH:</li> </ol> <pre><code>python -m site --user-base\n</code></pre> <ol> <li>Add the scripts directory to your PATH</li> </ol>"},{"location":"getting-started/installation/#permission-errors","title":"Permission errors","text":"<p>On Linux/macOS, you might need:</p> <pre><code>pip install --user yuho\n</code></pre> <p>Or use a virtual environment:</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install yuho\n</code></pre>"},{"location":"getting-started/installation/#docker-issues","title":"Docker issues","text":"<p>Ensure Docker is running:</p> <pre><code>docker --version\ndocker ps\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Get started with Yuho</li> <li>Your First Program - Write your first Yuho program</li> <li>CLI Commands - Learn the command-line interface</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>Get up and running with Yuho in 5 minutes!</p>"},{"location":"getting-started/quickstart/#installation","title":"Installation","text":"<p>First, install Yuho:</p> <pre><code>pip install -e .\n</code></pre> <p>Verify installation:</p> <pre><code>yuho --version\n</code></pre>"},{"location":"getting-started/quickstart/#your-first-yuho-program","title":"Your First Yuho Program","text":"<p>Create a file called <code>first.yh</code>:</p> <pre><code>// Define a simple struct\nstruct Person {\n    string name,\n    int age\n}\n\n// Create a variable\nint x := 42;\n\n// Use match-case for logic\nmatch {\n    case x &gt; 0 := consequence TRUE;\n    case _ := consequence FALSE;\n}\n</code></pre>"},{"location":"getting-started/quickstart/#check-your-code","title":"Check Your Code","text":"<p>Validate syntax and semantics:</p> <pre><code>yuho check first.yh\n</code></pre> <p>You should see: <pre><code>\u2713 Syntax check passed\n\u2713 Semantic check passed\n\u2713 first.yh looks good!\n</code></pre></p>"},{"location":"getting-started/quickstart/#generate-visualizations","title":"Generate Visualizations","text":"<p>Create a flowchart diagram:</p> <pre><code>yuho draw first.yh --format flowchart -o first.mmd\n</code></pre> <p>Create a mindmap:</p> <pre><code>yuho draw first.yh --format mindmap -o first_mindmap.mmd\n</code></pre>"},{"location":"getting-started/quickstart/#generate-formal-specification","title":"Generate Formal Specification","text":"<p>Create an Alloy specification for verification:</p> <pre><code>yuho alloy first.yh -o first.als\n</code></pre>"},{"location":"getting-started/quickstart/#interactive-repl","title":"Interactive REPL","text":"<p>Start the interactive shell:</p> <pre><code>yuho-repl\n</code></pre> <p>Try some commands:</p> <pre><code>yuho&gt; struct Test { string name }\n\u2713 Valid Yuho code\n\nyuho&gt; int x := 42;\n\u2713 Valid Yuho code\n\nyuho&gt; help\n[Shows available commands]\n\nyuho&gt; exit\n</code></pre>"},{"location":"getting-started/quickstart/#legal-example","title":"Legal Example","text":"<p>Let's create a real legal statute representation. Create <code>cheating.yh</code>:</p> <pre><code>// Section 415 of the Penal Code - Cheating\nstruct Cheating {\n    string accused,\n    string victim,\n    string action,\n    bool deception,\n    bool dishonest,\n    bool inducedAction,\n    bool causedHarm\n}\n\n// Logical requirements for cheating offense\nmatch {\n    case deception &amp;&amp; dishonest &amp;&amp; inducedAction &amp;&amp; causedHarm :=\n        consequence \"guilty of cheating\";\n    case _ :=\n        consequence \"not guilty\";\n}\n</code></pre> <p>Check it:</p> <pre><code>yuho check cheating.yh\n</code></pre> <p>Generate flowchart:</p> <pre><code>yuho draw cheating.yh --format flowchart -o cheating_flow.mmd\n</code></pre>"},{"location":"getting-started/quickstart/#common-cli-commands","title":"Common CLI Commands","text":"Command Purpose Example <code>check</code> Validate syntax and semantics <code>yuho check file.yh</code> <code>draw</code> Generate Mermaid diagrams <code>yuho draw file.yh -f flowchart</code> <code>alloy</code> Generate Alloy specification <code>yuho alloy file.yh -o spec.als</code> <code>draft</code> Create template file <code>yuho draft MyStruct -o file.yh</code> <code>how</code> Show usage examples <code>yuho how</code>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've got the basics:</p> <ol> <li>Learn the full syntax</li> <li>Explore more examples</li> <li>Understand match-case patterns</li> <li>Use the CLI effectively</li> </ol>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quickstart/#syntax-error","title":"Syntax Error","text":"<p>If you get a syntax error:</p> <ul> <li>Check that you're using <code>:=</code> for assignment (not <code>=</code>)</li> <li>Ensure all statements end with <code>;</code></li> <li>Verify struct field syntax uses <code>,</code> between fields</li> </ul>"},{"location":"getting-started/quickstart/#file-not-found","title":"File Not Found","text":"<ul> <li>Ensure you're in the correct directory</li> <li>Use absolute or relative paths correctly</li> <li>Check file has <code>.yh</code> extension</li> </ul>"},{"location":"getting-started/quickstart/#import-errors","title":"Import Errors","text":"<p>If Python import errors occur:</p> <pre><code>pip install -r requirements.txt\npip install -e .\n</code></pre>"},{"location":"getting-started/quickstart/#getting-help","title":"Getting Help","text":"<ul> <li>Use <code>yuho --help</code> for command-line help</li> <li>Use <code>yuho how</code> for usage examples</li> <li>Check FAQ for common questions</li> <li>Visit GitHub Issues for support</li> </ul>"},{"location":"language/overview/","title":"Language Overview","text":"<p>Yuho is a domain-specific language (DSL) designed specifically for representing legal statutes and reasoning patterns.</p>"},{"location":"language/overview/#design-philosophy","title":"Design Philosophy","text":"<p>Yuho is built on several core principles:</p> <ol> <li>Readability: Legal professionals should be able to read and understand Yuho code</li> <li>Immutability: All values are immutable, reflecting the fixed nature of statutes</li> <li>Type Safety: Strong typing prevents logical errors</li> <li>Completeness: Match-case patterns must cover all cases, mirroring legal completeness</li> </ol>"},{"location":"language/overview/#language-characteristics","title":"Language Characteristics","text":""},{"location":"language/overview/#strongly-statically-typed","title":"Strongly, Statically Typed","text":"<p>Every variable has a type known at compile time:</p> <pre><code>int x := 42;           // Integer\nstring s := \"hello\";    // String\nbool b := TRUE;         // Boolean\n</code></pre>"},{"location":"language/overview/#functional","title":"Functional","text":"<ul> <li>All values are immutable</li> <li>Every statement is an expression</li> <li>No side effects</li> </ul>"},{"location":"language/overview/#no-loops","title":"No Loops","text":"<p>Legal statutes don't contain loops, so Yuho doesn't either:</p> <ul> <li>No <code>for</code> loops</li> <li>No <code>while</code> loops</li> <li>No recursion (intentionally limited)</li> </ul>"},{"location":"language/overview/#pattern-matching","title":"Pattern Matching","text":"<p>Match-case is the primary control structure:</p> <pre><code>match {\n    case condition1 := consequence result1;\n    case condition2 := consequence result2;\n    case _ := consequence defaultResult;\n}\n</code></pre>"},{"location":"language/overview/#quick-reference","title":"Quick Reference","text":""},{"location":"language/overview/#comments","title":"Comments","text":"<pre><code>// Single-line comment\n\n/*\nMulti-line\ncomment\n*/\n</code></pre>"},{"location":"language/overview/#types","title":"Types","text":"<ul> <li><code>int</code> - Integer numbers</li> <li><code>float</code> - Floating-point numbers</li> <li><code>bool</code> - TRUE or FALSE</li> <li><code>string</code> - Text in quotes</li> <li><code>percent</code> - Percentage (25%)</li> <li><code>money</code> - Currency ($100.50)</li> <li><code>date</code> - Dates (DD-MM-YYYY)</li> <li><code>duration</code> - Time periods (5 days)</li> </ul>"},{"location":"language/overview/#structs","title":"Structs","text":"<pre><code>struct StructName {\n    type field1,\n    type field2\n}\n</code></pre>"},{"location":"language/overview/#variables","title":"Variables","text":"<pre><code>type variableName := value;\n</code></pre>"},{"location":"language/overview/#match-case","title":"Match-Case","text":"<pre><code>match {\n    case condition := consequence result;\n    case _ := consequence default;\n}\n</code></pre>"},{"location":"language/overview/#file-structure","title":"File Structure","text":"<p>A typical Yuho file (<code>.yh</code>) contains:</p> <ol> <li>Comments explaining the legal context</li> <li>Struct definitions for legal concepts</li> <li>Variable declarations</li> <li>Match-case logic for conditions</li> </ol> <p>Example:</p> <pre><code>// Section 415 - Cheating\n\nstruct Cheating {\n    string accused,\n    bool deception,\n    bool harm\n}\n\nmatch {\n    case deception &amp;&amp; harm := consequence \"guilty\";\n    case _ := consequence \"not guilty\";\n}\n</code></pre>"},{"location":"language/overview/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Files: snake_case (e.g., <code>criminal_law.yh</code>)</li> <li>Variables: camelCase (e.g., <code>isGuilty</code>)</li> <li>Structs: PascalCase (e.g., <code>Cheating</code>)</li> <li>Functions: camelCase (e.g., <code>checkValidity</code>)</li> </ul>"},{"location":"language/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Detailed Syntax Reference</li> <li>Type System</li> <li>Structs</li> <li>Match-Case Patterns</li> </ul> <p>For the complete original syntax specification, see SYNTAX.md in the repository root.</p>"},{"location":"transpilers/overview/","title":"Transpilers Overview","text":"<p>Yuho transpiles legal code to multiple target formats for visualization and formal verification.</p>"},{"location":"transpilers/overview/#what-is-a-transpiler","title":"What is a Transpiler?","text":"<p>A transpiler (source-to-source compiler) converts Yuho source code into other formats while preserving the logical meaning.</p> <p>Yuho's transpilers enable: - Visualization: Understand complex legal logic through diagrams - Verification: Formally prove correctness using automated tools - Documentation: Generate visual documentation automatically</p>"},{"location":"transpilers/overview/#available-transpilers","title":"Available Transpilers","text":""},{"location":"transpilers/overview/#1-mermaid-transpiler","title":"1. Mermaid Transpiler","text":"<p>Target: Mermaid diagram syntax</p> <p>Purpose: Generate visual diagrams that can be rendered in browsers, Markdown files, and documentation.</p> <p>Output Formats: - Flowcharts: Show control flow and conditional logic - Mindmaps: Show hierarchical structure of legal concepts</p> <p>Usage: <pre><code># Flowchart\nyuho draw example.yh --format flowchart -o diagram.mmd\n\n# Mindmap\nyuho draw example.yh --format mindmap -o mindmap.mmd\n</code></pre></p> <p>Example Output (Flowchart): <pre><code>flowchart TD\n    S0[Cheating]\n    S0 --&gt; M1[accused: string]\n    S0 --&gt; M2[deception: bool]\n    S0 --&gt; M3[harm: bool]\n    MC4{Decision}\n    MC4 --&gt; C5[Case 1]\n    C5 --&gt; CO6[Consequence: guilty]</code></pre></p> <p>Learn More: Mermaid Transpiler Details</p>"},{"location":"transpilers/overview/#2-alloy-transpiler","title":"2. Alloy Transpiler","text":"<p>Target: Alloy specification language</p> <p>Purpose: Generate formal specifications for automated logical verification and model checking.</p> <p>Output Components: - Signatures: From Yuho structs - Predicates: From match-case logic - Facts: From constraints and relationships - Run Commands: For automated verification</p> <p>Usage: <pre><code>yuho alloy example.yh -o specification.als\n</code></pre></p> <p>Example Output: <pre><code>// Generated Alloy specification from Yuho\nmodule YuhoGenerated\n\nabstract sig Bool {}\none sig True, False extends Bool {}\n\nsig Cheating {\n  accused: String,\n  deception: Bool,\n  harm: Bool\n}\n\npred MatchCase0[x: univ] {\n  // Match expression conditions\n  (deception = True and harm = True) =&gt; {\n    // Consequence: guilty\n  }\n}\n\nrun {} for 5\n</code></pre></p> <p>Learn More: Alloy Transpiler Details</p>"},{"location":"transpilers/overview/#transpilation-pipeline","title":"Transpilation Pipeline","text":"<pre><code>graph LR\n    A[Yuho Source .yh] --&gt; B[Lexer]\n    B --&gt; C[Parser]\n    C --&gt; D[AST]\n    D --&gt; E[Semantic Analyzer]\n    E --&gt; F{Transpiler}\n    F --&gt; G[Mermaid .mmd]\n    F --&gt; H[Alloy .als]</code></pre>"},{"location":"transpilers/overview/#step-by-step-process","title":"Step-by-Step Process","text":"<ol> <li>Lexing: Tokenize Yuho source code</li> <li>Parsing: Build Abstract Syntax Tree (AST)</li> <li>Semantic Analysis: Validate types and semantics</li> <li>Transpilation: Convert AST to target format</li> <li>Output: Write to file or stdout</li> </ol>"},{"location":"transpilers/overview/#use-cases","title":"Use Cases","text":""},{"location":"transpilers/overview/#use-case-1-visual-documentation","title":"Use Case 1: Visual Documentation","text":"<p>Problem: Legal statutes are hard to understand</p> <p>Solution: Generate flowcharts showing logic flow</p> <pre><code># Create visual documentation\nyuho draw statute.yh -f flowchart -o statute_diagram.mmd\n\n# View in browser with Mermaid Live Editor\n# Or embed in Markdown documentation\n</code></pre> <p>Result: Clear visual representation of conditional logic</p>"},{"location":"transpilers/overview/#use-case-2-formal-verification","title":"Use Case 2: Formal Verification","text":"<p>Problem: Need to prove logical consistency of legal rules</p> <p>Solution: Generate Alloy specification and verify</p> <pre><code># Generate Alloy specification\nyuho alloy statute.yh -o statute.als\n\n# Verify with Alloy Analyzer\njava -jar alloy.jar statute.als\n</code></pre> <p>Result: Automated verification of logical correctness</p>"},{"location":"transpilers/overview/#use-case-3-teaching-legal-logic","title":"Use Case 3: Teaching Legal Logic","text":"<p>Problem: Students struggle with statute structure</p> <p>Solution: Generate mindmaps showing hierarchy</p> <pre><code># Create learning materials\nyuho draw statute.yh -f mindmap -o learning_material.mmd\n</code></pre> <p>Result: Visual learning aids for legal education</p>"},{"location":"transpilers/overview/#transpiler-architecture","title":"Transpiler Architecture","text":""},{"location":"transpilers/overview/#common-components","title":"Common Components","text":"<p>All transpilers share:</p> <ol> <li>AST Traversal: Walk through the Abstract Syntax Tree</li> <li>Type Mapping: Convert Yuho types to target types</li> <li>Logic Translation: Convert match-case to target constructs</li> <li>Code Generation: Output in target format</li> </ol>"},{"location":"transpilers/overview/#mermaid-transpiler","title":"Mermaid Transpiler","text":"<p>Location: <code>yuho_v3/transpilers/mermaid_transpiler.py</code></p> <p>Key Features: - Node ID generation for unique identifiers - Recursive AST traversal - Format-specific output (flowchart vs mindmap)</p> <p>Algorithm: <pre><code>def transpile_to_flowchart(program):\n    1. Initialize output with \"flowchart TD\"\n    2. For each statement:\n        - Generate unique node ID\n        - Convert to Mermaid syntax\n        - Add to output\n    3. Connect nodes based on relationships\n    4. Return Mermaid code\n</code></pre></p>"},{"location":"transpilers/overview/#alloy-transpiler","title":"Alloy Transpiler","text":"<p>Location: <code>yuho_v3/transpilers/alloy_transpiler.py</code></p> <p>Key Features: - Struct to signature conversion - Match-case to predicate conversion - Type system mapping - Verification command generation</p> <p>Algorithm: <pre><code>def transpile(program):\n    1. Process structs \u2192 Generate signatures\n    2. Process match-case \u2192 Generate predicates\n    3. Add boolean signatures (True/False)\n    4. Add run commands\n    5. Return Alloy specification\n</code></pre></p>"},{"location":"transpilers/overview/#type-mapping","title":"Type Mapping","text":""},{"location":"transpilers/overview/#yuho-to-mermaid","title":"Yuho to Mermaid","text":"<p>Mermaid is primarily visual, so types appear as labels:</p> Yuho Type Mermaid Representation <code>int</code> <code>field: int</code> <code>string</code> <code>field: string</code> <code>bool</code> <code>field: bool</code> Custom struct <code>field: CustomType</code>"},{"location":"transpilers/overview/#yuho-to-alloy","title":"Yuho to Alloy","text":"Yuho Type Alloy Type <code>int</code> <code>Int</code> <code>float</code> <code>Int</code> (Alloy has no floats) <code>bool</code> <code>Bool</code> (custom signature) <code>string</code> <code>String</code> <code>percent</code> <code>Int</code> <code>money</code> <code>Int</code> <code>date</code> <code>String</code> <code>duration</code> <code>String</code> Custom struct Custom signature"},{"location":"transpilers/overview/#adding-new-transpilers","title":"Adding New Transpilers","text":"<p>Want to add a new transpiler? Here's how:</p>"},{"location":"transpilers/overview/#1-create-transpiler-module","title":"1. Create Transpiler Module","text":"<pre><code># yuho_v3/transpilers/my_transpiler.py\n\nclass MyTranspiler:\n    def __init__(self):\n        self.output = []\n\n    def transpile(self, program: Program) -&gt; str:\n        \"\"\"Transpile Yuho AST to target format\"\"\"\n        for stmt in program.statements:\n            self._process_statement(stmt)\n        return self._generate_output()\n\n    def _process_statement(self, stmt):\n        # Handle different statement types\n        if isinstance(stmt, StructDefinition):\n            self._handle_struct(stmt)\n        elif isinstance(stmt, MatchCase):\n            self._handle_match(stmt)\n\n    def _generate_output(self) -&gt; str:\n        # Generate final output\n        return \"\\n\".join(self.output)\n</code></pre>"},{"location":"transpilers/overview/#2-add-cli-command","title":"2. Add CLI Command","text":"<pre><code># yuho_v3/cli/main.py\n\n@cli.command()\n@click.argument('file_path', type=click.Path(exists=True))\n@click.option('--output', '-o', help='Output file path')\ndef mytarget(file_path, output):\n    \"\"\"Generate my target format from Yuho file\"\"\"\n    parser = YuhoParser()\n    ast = parser.parse_file(file_path)\n\n    transpiler = MyTranspiler()\n    result = transpiler.transpile(ast)\n\n    if output:\n        with open(output, 'w') as f:\n            f.write(result)\n    else:\n        click.echo(result)\n</code></pre>"},{"location":"transpilers/overview/#3-add-tests","title":"3. Add Tests","text":"<pre><code># yuho_v3/tests/test_my_transpiler.py\n\ndef test_my_transpiler():\n    parser = YuhoParser()\n    transpiler = MyTranspiler()\n\n    code = \"struct Test { string field }\"\n    ast = parser.parse(code)\n    result = transpiler.transpile(ast)\n\n    assert result is not None\n    assert \"Test\" in result\n</code></pre>"},{"location":"transpilers/overview/#future-transpilers","title":"Future Transpilers","text":"<p>Potential targets for future transpilers:</p>"},{"location":"transpilers/overview/#legal-formats","title":"Legal Formats","text":"<ul> <li>LegalRuleML: XML-based legal rule representation</li> <li>LKIF: Legal Knowledge Interchange Format</li> <li>Akoma Ntoso: Legal document XML standard</li> </ul>"},{"location":"transpilers/overview/#programming-languages","title":"Programming Languages","text":"<ul> <li>Python: Executable Python code</li> <li>Prolog: Logic programming</li> <li>JSON/YAML: Data interchange formats</li> </ul>"},{"location":"transpilers/overview/#visualization","title":"Visualization","text":"<ul> <li>GraphViz: Advanced graph visualization</li> <li>PlantUML: UML diagrams</li> <li>D3.js: Interactive visualizations</li> </ul>"},{"location":"transpilers/overview/#verification-tools","title":"Verification Tools","text":"<ul> <li>Coq: Proof assistant</li> <li>Z3: SMT solver</li> <li>TLA+: Formal specification</li> </ul>"},{"location":"transpilers/overview/#performance-considerations","title":"Performance Considerations","text":""},{"location":"transpilers/overview/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Large Files: Transpilation is O(n) where n = AST nodes</li> <li>Caching: Parser results can be cached for repeated transpilations</li> <li>Streaming: For very large files, consider streaming output</li> <li>Parallel: Multiple files can be transpiled in parallel</li> </ol>"},{"location":"transpilers/overview/#benchmarks","title":"Benchmarks","text":"<p>Typical transpilation times (on modern hardware):</p> File Size Statements Time Small 1-10 &lt;10ms Medium 11-100 &lt;50ms Large 101-1000 &lt;500ms Very Large 1000+ &lt;2s"},{"location":"transpilers/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"transpilers/overview/#transpilation-errors","title":"Transpilation Errors","text":"<p>Issue: Transpilation fails with error</p> <p>Solutions: 1. Check that file passes <code>yuho check</code> 2. Ensure all types are defined 3. Verify match-case coverage</p>"},{"location":"transpilers/overview/#output-issues","title":"Output Issues","text":"<p>Issue: Generated output is incorrect</p> <p>Solutions: 1. Check Yuho syntax is correct 2. Verify semantic analysis passes 3. Report bug with minimal example</p>"},{"location":"transpilers/overview/#target-tool-issues","title":"Target Tool Issues","text":"<p>Issue: Generated file won't open in target tool</p> <p>Solutions: - Mermaid: Test in Mermaid Live Editor - Alloy: Verify with Alloy Analyzer - Check target tool version compatibility</p>"},{"location":"transpilers/overview/#resources","title":"Resources","text":"<ul> <li>Mermaid Documentation</li> <li>Alloy Documentation</li> <li>Yuho Architecture</li> <li>AST Nodes Reference</li> </ul>"},{"location":"transpilers/overview/#see-also","title":"See Also","text":"<ul> <li>Mermaid Transpiler Details</li> <li>Alloy Transpiler Details</li> <li>CLI Commands</li> <li>Examples</li> </ul>"}]}