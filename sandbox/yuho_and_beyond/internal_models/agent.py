# ----- required imports -----

import os
import json
import ollama

# ----- helper functions -----

def start_model():
    """
    attempts to start and return an ollama model, else returns none
    """
    try:
        client = ollama.Client()
        return client
    except:
        return None

def write_agent_log(
    entry_prompt,
    agent_response,
    target_filepath
):
    """
    writes log data generated by the agentic workflow to the
    json at the specified filepath
    """
    try:
        wrapper = {
            "entry_prompt": entry_prompt,
            "response": agent_response
        }
        with open(target_filepath, "w") as json_file:
            json.dump(wrapper, json_file, indent=4)
        print(
            f"Data successfully written to JSON at the filepath {target_filepath}."
        )
    except Exception as e:
        print(
            f"Error: Unable to read or write to the JSON at the specified filepath: {e}"
        )


def generate_dsl_code(client, example_statute, example_dsl_code, statute_prompt):
    """
    generates DSL code based on an example DSL code and a separate prompt.
    """

    prompt = f"""
    You are an AI tasked with generating DSL code based on criminal law statutes.

    This example DSL code was generated based on the example statute.

    Example statute:
    
    {example_statute}

    Example DSL code:

    {example_dsl_code}

    Based on the above example, generate new DSL code for the following statute:

    {statute_prompt}
    
    Ensure that the generated code adheres to the syntax specifications of the DSL.
    """

    print(prompt)

    response = client.generate(prompt=prompt, model="codellama")

    print("------")

    print(response)

    response_text = response["response"].strip()

    return response_text


def execute_agentic_workflow(log_filepath, example_statute, example_dsl_code, statute_prompt):
    """
    wrapper function that performs agentic
    validation on the specified data, returning
    a boolean upon function execution state
    """
    client_model = start_model()
    
    if client_model:
        if example_statute and example_dsl_code and statute_prompt:

            generated_dsl_code = generate_dsl_code(client_model, example_statute, example_dsl_code, statute_prompt)
            
            write_agent_log(log_filepath, generated_dsl_code)
        
            return True
        else:

            print("Error: Possibe empty values passed to client model.")
            return False

    else:

        print("Error: Unable to generate ollama model.")
        return False


# ----- sample execution code -----

if __name__ == "__main__":

    TARGET_FILEPATH = "generated_log/log.json"

    example_statute = "<your_example_statute_here>"
    example_dsl_code = "<your_example_dsl_code_here>"
    statute_prompt = "<your_statute_prompt_here>"

    client_model = start_model()

    if client_model:
        print("Generating DSL code now...")
        
        generated_dsl_code = generate_dsl_code(client_model, example_statute, example_dsl_code, statute_prompt)
        
        write_agent_log(TARGET_FILEPATH, generated_dsl_code)
        
        print("DSL code generation complete.")
    
    else:
        print("Error: Unable to generate ollama model.")
